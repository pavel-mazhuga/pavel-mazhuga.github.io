{"version":3,"sources":["webpack:///./src/js/experiments/shaders/patterns/index.ts","webpack:///./src/js/experiments/shaders/patterns/shaders/vertex.glsl","webpack:///./src/js/experiments/shaders/patterns/shaders/fragment.glsl","webpack:///./src/js/experiments/shaders/pixelated/index.ts","webpack:///./src/js/experiments/shaders/pixelated/shaders/vertex.glsl","webpack:///./src/js/experiments/shaders/pixelated/shaders/fragment.glsl","webpack:///./src/js/experiments/shaders/pixelated/shaders/postprocessing.glsl","webpack:///./src/js/experiments/sliders/1/index.ts","webpack:///./src/js/experiments/sliders/1/shaders/vertex.glsl","webpack:///./src/js/experiments/sliders/1/shaders/fragment.glsl","webpack:///./src/js/experiments/sliders/1/shaders/postprocessing.glsl","webpack:///./src/js/experiments/sliders/fullscreen/index.ts","webpack:///./src/js/utils/webgl.ts","webpack:///./src/js/experiments/text/text-basic.ts","webpack:///./src/js/experiments/text/shaders/vertex.glsl","webpack:///./src/js/experiments/text/shaders/fragment.glsl","webpack:///./src/js/experiments/sliders/fullscreen/main-slider/webgl-slider.ts","webpack:///./src/js/experiments/sliders/fullscreen/main-slider/shaders/vertex.glsl","webpack:///./src/js/experiments/sliders/fullscreen/main-slider/shaders/fragment.glsl","webpack:///./src/js/app.ts","webpack:///./src/js/polyfills.ts","webpack:///./src/js/utils/index.ts","webpack:///./src/js/experiments/sliders/fullscreen/main-slider/index.ts","webpack:///./src/js/experiments/base.ts","webpack:///./src/js/sw.ts","webpack:///./src/js/custom-elements/index.ts","webpack:///./src/js/experiments/particles/particles-basic.ts","webpack:///./src/js/experiments/particles/path-trailing/index.ts","webpack:///./src/js/experiments/particles/path-trailing/shaders/vertex.glsl","webpack:///./src/js/experiments/particles/path-trailing/shaders/fragment.glsl","webpack:///./src/js/experiments/particles/path-trailing/russia.png","webpack:///./src/js/experiments/physics/physics-worker.ts"],"names":["createShadersPatterns","baseExperiment","rAF","canvas","sizes","onRender","gui","renderer","THREE","outputEncoding","setPixelRatio","Math","min","window","devicePixelRatio","setSize","width","height","camera","position","z","scene","clock","geometry","material","defines","PI","uniforms","uTime","value","vertexShader","fragmentShader","transparent","mesh","y","add","controls","OrbitControls","enableDamping","animate","elapsedTime","getElapsedTime","update","render","requestAnimationFrame","addEventListener","aspect","updateProjectionMatrix","module","hot","addDisposeHandler","cancelAnimationFrame","remove","disposeMesh","dispose","destroy","createShadersPixelated","sliderAladino","Aladino","density","dpr","post","fragment","postprocessingShader","pixelSize","vertex","img","document","querySelector","carpet","image","texture","currentSrc","resize","createSliders1","speed","speed2","cells","querySelectorAll","carpets","forEach","cell","push","oldProgress","slider","Flickity","accessibility","freeScroll","dragThreshold","freeScrollFriction","prevNextButtons","pageDots","observer","IntersectionObserver","entries","entry","exactCarpet","find","target","dom","active","isIntersecting","observe","on","progress","lerp","_isWebGLAvailable","isWebGLAvailable","createSlidersFullscreen","mainSlider","mainSliderContainer","MainSliderConstructor","MainWebglSlider","MainSlider","duration","autoplay","delay","this","createElement","WebGLRenderingContext","getContext","err","createMultilineText","ctx","textToWrite","maxWidth","text","futureText","wordsInCurrent","wordArrayLength","currentText","replace","subWidth","maxLineWidth","wordArray","split","length","measureText","console","log","i","createTextCanvas","el","textContent","styles","getComputedStyle","textArr","fontSize","parseFloat","lineHeight","font","fontFamily","textAlign","textBaseline","fillStyle","color","fillText","f","createTextBasic","then","direct","aladino","Array","from","textEl","generateTexture","Promise","resolve","toBlob","blob","newImg","Image","hidden","url","URL","createObjectURL","onload","body","removeChild","setTimeout","revokeObjectURL","src","appendChild","gsap","to","ease","args","arguments","apply","e","reject","result","WebglMainSlider","constructor","container","options","super","_onVisibilityChange","bind","isAnimating","isWebglInitialized","_init","displacementTexture","PUBLIC_PATH","textures","images","map","currentImage","activeIndex","nextImage","nextIndex","disp","dispPower","intensity","textureFactor","x","classList","setTextureFactor","index","factor","rect","getBoundingClientRect","rectRatio","imageRatio","removeEventListener","disconnect","navigateTo","onComplete","_onResize","registerCustomElements","createParticlesBasic","createParticlesPathTrailing","createPhysicsWorker","sw","register","accept","defaultOptions","paused","navigateToNext","navigateToPrev","_onSwipe","slides","total","slidesContainer","navigationContainer","paginationContainer","_getNextIndex","prevSlideButton","nextSlideButton","paginationButtons","_paginationDelegation","_autoplayTimeout","tl","_hammer","Hammer","get","set","direction","DIRECTION_HORIZONTAL","eventName","fn","once","off","resume","clearTimeout","_getPrevIndex","timeline","defaults","clearProps","autoAlpha","fromTo","nextContent","content","matchMedia","matches","name","opacity","label","cloneSlide","kill","event","deltaX","_generateNavigation","arrowTemplate","className","prevSlideLabel","setAttribute","innerHTML","nextSlideLabel","createDocumentFragment","_generatePagination","ul","li","button","buttonLabel","delegate","parseInt","delegateTarget","dataset","slideIndex","canvasRect","stats","Stats","domElement","dat","addFolder","unregister","navigator","serviceWorker","getRegistrations","registrations","registration","_module","recover","particleTexture","load","particlesGeometry","positions","Float32Array","particlesCount","random","sphere","size","sizeAttenuation","depthWrite","blending","svg","Error","svgBBox","getBBox","style","display","svgTexture","params","mapColor","particlesColor","pointsAmountFactor","maxPointsToRender","pointsToRenderFactor","particlesSpeed","opacityFactor","particleSize","max","step","pathsData","maxPoints","initScene","path","pathLength","getTotalLength","pointsAmount","floor","points","pointAt","point","getPointAtLength","normalizedPoint","pointsToRender","currentPosition","reduce","acc","pathData","onFinishChange","particlesMaterial","uParticleSize","getPixelRatio","uColor","addColor","onChange","particles","plane","dummyMat4","k","j","attributes","array","applyMatrix4","makeScale","needsUpdate","shadowMap","enabled","type","objects","world","CANNON","gravity","defaultMaterial","defaultContactMaterial","friction","restitution","addContactMaterial","receiveShadow","floorShape","floorBody","mass","addShape","addBody","ambientLight","directionalLight","castShadow","boxGeometry","boxMaterial","metalness","roughness","scale","shape","createBox","oldElapsedTime","deltaTime","copy"],"mappings":"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","file":"js/modern/app.973e2692.js","sourcesContent":["import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { baseExperiment } from '../../base';\nimport vertexShader from './shaders/vertex.glsl';\nimport fragmentShader from './shaders/fragment.glsl';\nimport { disposeMesh } from '../../../utils';\n\nexport const createShadersPatterns = baseExperiment('shaders-patterns', ({ canvas, sizes, onRender, gui }) => {\n    let rAF: number;\n    const renderer = new THREE.WebGLRenderer({ canvas });\n    renderer.outputEncoding = THREE.sRGBEncoding;\n    renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n    renderer.setSize(sizes.width, sizes.height);\n\n    const camera = new THREE.PerspectiveCamera(45, sizes.width / sizes.height, 0.1, 100);\n    camera.position.z = 10;\n\n    const scene = new THREE.Scene();\n    const clock = new THREE.Clock();\n\n    // const params = {\n    //     mapColor: 0x7071a,\n    //     // particlesColor: 0x040a14,\n    //     particlesColor: 0x110800,\n    //     // pointsAmountFactor: 0.4,\n    //     pointsAmountFactor: 0.9,\n    //     // maxPointsToRender: 50,\n    //     maxPointsToRender: 200,\n    //     // pointsToRenderFactor: 0.2,\n    //     pointsToRenderFactor: 0.5,\n    //     particlesSpeed: 1,\n    //     // opacityFactor: 0.2,\n    //     opacityFactor: 0.3,\n    //     // particleSize: 30,\n    //     particleSize: 20,\n    // };\n\n    const geometry = new THREE.PlaneBufferGeometry(6, 6, 256, 256);\n\n    const material = new THREE.ShaderMaterial({\n        defines: {\n            PI: Math.PI,\n        },\n        uniforms: {\n            uTime: { value: 0 },\n        },\n        vertexShader,\n        fragmentShader,\n        transparent: true,\n    });\n\n    const mesh = new THREE.Mesh(geometry, material);\n    mesh.position.y = 0.33;\n    scene.add(mesh);\n\n    const controls = new OrbitControls(camera, canvas);\n    controls.enableDamping = true;\n\n    function render() {\n        const elapsedTime = clock.getElapsedTime();\n\n        onRender();\n        material.uniforms.uTime.value = elapsedTime;\n\n        controls.update();\n        renderer.render(scene, camera);\n    }\n\n    function animate() {\n        render();\n        rAF = requestAnimationFrame(animate);\n    }\n\n    function destroy() {\n        cancelAnimationFrame(rAF);\n        scene.remove(mesh);\n        disposeMesh(mesh);\n        renderer.dispose();\n        gui.destroy();\n    }\n\n    animate();\n\n    window.addEventListener('resize', () => {\n        camera.aspect = sizes.width / sizes.height;\n        camera.updateProjectionMatrix();\n        renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n        renderer.setSize(sizes.width, sizes.height);\n    });\n\n    module.hot?.addDisposeHandler(destroy);\n});\n","export default \"#define GLSLIFY 1\\n//\\n// GLSL textureless classic 3D noise \\\"cnoise\\\",\\n// with an RSL-style periodic variant \\\"pnoise\\\".\\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\\n// Version: 2011-10-11\\n//\\n// Many thanks to Ian McEwan of Ashima Arts for the\\n// ideas for permutation and gradient selection.\\n//\\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\\n// Distributed under the MIT license. See LICENSE file.\\n// https://github.com/ashima/webgl-noise\\n//\\n\\nvec3 mod289(vec3 x)\\n{\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 mod289(vec4 x)\\n{\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 permute(vec4 x)\\n{\\n  return mod289(((x*34.0)+1.0)*x);\\n}\\n\\nvec4 taylorInvSqrt(vec4 r)\\n{\\n  return 1.79284291400159 - 0.85373472095314 * r;\\n}\\n\\nvec3 fade(vec3 t) {\\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\\n}\\n\\n// Classic Perlin noise\\nfloat cnoise(vec3 P)\\n{\\n  vec3 Pi0 = floor(P); // Integer part for indexing\\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\\n  Pi0 = mod289(Pi0);\\n  Pi1 = mod289(Pi1);\\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\\n  vec4 iz0 = Pi0.zzzz;\\n  vec4 iz1 = Pi1.zzzz;\\n\\n  vec4 ixy = permute(permute(ix) + iy);\\n  vec4 ixy0 = permute(ixy + iz0);\\n  vec4 ixy1 = permute(ixy + iz1);\\n\\n  vec4 gx0 = ixy0 * (1.0 / 7.0);\\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\\n  gx0 = fract(gx0);\\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\\n  vec4 sz0 = step(gz0, vec4(0.0));\\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\\n\\n  vec4 gx1 = ixy1 * (1.0 / 7.0);\\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\\n  gx1 = fract(gx1);\\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\\n  vec4 sz1 = step(gz1, vec4(0.0));\\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\\n\\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\\n\\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\\n  g000 *= norm0.x;\\n  g010 *= norm0.y;\\n  g100 *= norm0.z;\\n  g110 *= norm0.w;\\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\\n  g001 *= norm1.x;\\n  g011 *= norm1.y;\\n  g101 *= norm1.z;\\n  g111 *= norm1.w;\\n\\n  float n000 = dot(g000, Pf0);\\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\\n  float n111 = dot(g111, Pf1);\\n\\n  vec3 fade_xyz = fade(Pf0);\\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\\n  return 2.2 * n_xyz;\\n}\\n\\nuniform float uTime;\\n\\nvarying vec2 vUv;\\nvarying float vElevation;\\n\\nvoid main() {\\n    vec4 modelPosition = modelMatrix * vec4(position, 1.0);\\n    modelPosition.z += cnoise(modelPosition.xyz * sin(uTime)) * 0.7;\\n    float elevation = modelPosition.z;\\n\\n    vUv = uv;\\n    vElevation = elevation;\\n\\n    gl_Position = projectionMatrix * viewMatrix * modelPosition;\\n}\\n\\n// varying vec2 vUv;\\n\\n// void main() {\\n//     vUv = uv;\\n//     vec4 mvPosition = modelViewMatrix * vec4(position, 1.);\\n//     gl_Position = projectionMatrix * mvPosition;\\n// }\";","export default \"#define GLSLIFY 1\\nuniform float uTime;\\n\\nvarying vec2 vUv;\\nvarying float vElevation;\\n\\nvoid main() {\\n    vec3 color = vec3(distance(vUv, vec2(0.5)));\\n    \\n    gl_FragColor = vec4(mix(vec3(0.2), color, clamp(vElevation, 0., 1.)), 1.0);\\n}\\n\";","import './styles.scss';\nimport Aladino from 'aladino';\nimport { baseExperiment } from '../../base';\nimport vertexShader from './shaders/vertex.glsl';\nimport fragmentShader from './shaders/fragment.glsl';\nimport postprocessingShader from './shaders/postprocessing.glsl';\n\nexport const createShadersPixelated = baseExperiment('shaders-pixelated', ({ canvas, sizes, onRender, gui }) => {\n    let rAF: number;\n    const sliderAladino = new Aladino({\n        density: 1,\n        dpr: Math.min(devicePixelRatio, 2),\n        canvas,\n        post: {\n            fragment: postprocessingShader,\n            uniforms: {\n                pixelSize: 50,\n            },\n        },\n    });\n\n    const material = sliderAladino.material({\n        vertex: vertexShader,\n        fragment: fragmentShader,\n    });\n\n    const img = document.querySelector('img') as HTMLImageElement;\n\n    const carpet = sliderAladino.carpet(img, {\n        material,\n        uniforms: {\n            image: sliderAladino.texture(img.currentSrc),\n        },\n    });\n\n    function render() {\n        if (sliderAladino.post.uniforms.pixelSize > 1) {\n            sliderAladino.post.uniforms.pixelSize -= 0.5;\n        }\n    }\n\n    function animate() {\n        render();\n        rAF = requestAnimationFrame(animate);\n    }\n\n    function destroy() {\n        cancelAnimationFrame(rAF);\n        carpet.destroy();\n        sliderAladino.destroy();\n        gui.destroy();\n    }\n\n    animate();\n\n    window.addEventListener('resize', () => {\n        carpet.resize();\n    });\n\n    module.hot?.addDisposeHandler(destroy);\n});\n","export default \"#define GLSLIFY 1\\nattribute vec2 position;\\nattribute vec2 uv;\\n\\nuniform mat4 projection;\\n\\nvarying vec2 vUv;\\n\\n// float parabola(float x, float k) {\\n//   return pow(4.0 * x * (1.0 - x), k);\\n// }\\n\\nvoid main() {\\n  vUv = uv;\\n\\n  vec4 pos = vec4(position, 0.0, 1.0);\\n//   float spee = speed * 2.0;\\n//   pos.x += parabola(uv.y, 1.0) * spee;\\n//   vec4 pp = projection * vec4(position, 0.0, 1.0);\\n//   float yy = ((pp / pp.w).x + 1.0) / 2.0;\\n//   pos.z = parabola(clamp(yy, 0.0, 1.0), 2.4) * speed2 * 160.0;\\n//   pos.z = clamp(pos.z, -6.0, 6.0);\\n\\n  gl_Position = projection * pos;\\n}\";","export default \"precision highp float;\\n#define GLSLIFY 1\\n\\nuniform vec2 size;\\nuniform vec2 sizeImage;\\nuniform sampler2D image;\\n\\nvarying vec2 vUv;\\n\\nvec4 coverTexture(sampler2D tex, vec2 imgSize, vec2 ouv) {\\n  vec2 s = size;\\n  vec2 i = imgSize;\\n  float rs = s.x / s.y;\\n  float ri = i.x / i.y;\\n  vec2 new = rs < ri ? vec2(i.x * s.y / i.y, s.y) : vec2(s.x, i.y * s.x / i.x);\\n  vec2 offset = (rs < ri ? vec2((new.x - s.x) / 2.0, 0.0) : vec2(0.0, (new.y - s.y) / 2.0)) / new;\\n  vec2 uv = ouv * s / new + offset;\\n\\n  return texture2D(tex, uv);\\n}\\n\\nvoid main() {\\n  gl_FragColor = coverTexture(image, sizeImage, vUv);\\n}\\n\";","export default \"precision highp float;\\n#define GLSLIFY 1\\n    \\n// uniform float time;\\n// uniform float speed;\\n// uniform vec2 viewport;\\n// uniform sampler2D image;\\n\\n// float parabola(float x, float k) {\\n//     return pow(4.0 * x * (1.0 - x), k);\\n// }\\n\\n// float random(vec2 co) {\\n//     return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\\n// }\\n\\n// void main() {\\n//     vec2 uv = gl_FragCoord.xy / viewport;\\n//     float spe = speed * 300.0;\\n//     float p = parabola(uv.x, 1.4);\\n\\n//     float r = texture2D(image, uv + vec2(0.000 * spe, 0.0) * p).r;\\n//     float g = texture2D(image, uv + vec2(0.01 * spe, 0.0) * p).g;\\n//     float b = texture2D(image, uv + vec2(0.02 * spe, 0.0) * p).b;\\n//     float a = texture2D(image, uv + vec2(0.000 * spe, 0.0) * p).w;\\n\\n//     gl_FragColor = vec4(r, g, b, a);\\n    \\n//     // Film grain effect\\n//     float n = random(uv + mod(time, 3.0));\\n//     gl_FragColor.rgb *= 1.0 - (n * 0.2);\\n// }\\n\\nuniform sampler2D image;\\nuniform vec2 viewport;\\nuniform vec2 resolution;\\nuniform float pixelSize;\\n\\n// varying vec2 vUv;\\n\\n// vec3 bg(vec2 uv) {\\n//    return texture2D(image, uv).rgb;\\n// }\\n\\n// vec3 effect(vec2 uv, vec3 col) {\\n//    float granularity = floor(intensity*20.+10.);\\n\\n//    if (mod(granularity,2.) > 0.) {\\n//        granularity += 1.0;\\n//    };\\n\\n//    if (granularity > 0.0) {\\n//        float dx = granularity / viewport.x;\\n//        float dy = granularity / viewport.y;\\n//        uv = vec2(dx*(floor(uv.x/dx) + 0.5),dy*(floor(uv.y/dy) + 0.5));\\n//        return bg(uv);\\n//    };\\n\\n//    return col;\\n// }\\n\\nvoid main() {\\n    vec2 uv = gl_FragCoord.xy / viewport;\\n    // vec3 tex = bg(uv);\\n    // vec3 col = effect(uv,tex);\\n    // gl_FragColor = vec4( col, 1. );\\n\\n    vec2 dxy = pixelSize / viewport;\\n    vec2 coord = dxy * floor( uv / dxy );\\n    gl_FragColor = texture2D(image, coord);\\n}\\n\";","import './styles.scss';\nimport Flickity from 'flickity';\nimport Aladino from 'aladino';\nimport lerp from 'lerp';\nimport { baseExperiment } from '../../base';\nimport vertexShader from './shaders/vertex.glsl';\nimport fragmentShader from './shaders/fragment.glsl';\nimport postprocessingShader from './shaders/postprocessing.glsl';\n\nexport const createSliders1 = baseExperiment('sliders-1', ({ canvas, sizes, onRender, gui }) => {\n    let rAF: number;\n    const sliderAladino = new Aladino({\n        density: 16,\n        dpr: Math.min(devicePixelRatio, 2),\n        canvas,\n        post: {\n            fragment: postprocessingShader,\n            uniforms: {\n                speed: 0.0,\n            },\n        },\n    });\n\n    const material = sliderAladino.material({\n        vertex: vertexShader,\n        fragment: fragmentShader,\n        uniforms: {\n            speed: 0,\n            speed2: 0,\n        },\n    });\n\n    const cells = [...document.querySelectorAll('.slider-el')];\n    const carpets = [];\n    cells.forEach((cell) => {\n        const carpet = sliderAladino.carpet(cell, {\n            material,\n            uniforms: {\n                image: sliderAladino.texture(cell.currentSrc),\n            },\n        });\n\n        carpets.push(carpet);\n    });\n\n    let oldProgress = 0;\n    let speed = 0;\n    const freeScroll = true;\n\n    const slider = new Flickity(document.querySelector('.carousel')!, {\n        accessibility: true,\n        freeScroll,\n        dragThreshold: freeScroll ? 0 : 30,\n        // dragThreshold: 30,\n        freeScrollFriction: 0.07,\n        prevNextButtons: false,\n        pageDots: false,\n        // wrapAround: true,\n    });\n\n    const observer = new IntersectionObserver((entries) => {\n        entries.forEach((entry) => {\n            const exactCarpet = carpets.find((carpet) => entry.target === carpet.dom);\n            if (exactCarpet) {\n                exactCarpet.active = entry.isIntersecting;\n            }\n        });\n    });\n\n    cells.forEach((cell) => {\n        observer.observe(cell);\n    });\n\n    slider.on('scroll', (progress) => {\n        // The way flickity works doesn't allow an easy use of the position,\n        // So it can be optimised, as here we're recalculating dom boundingbox each time\n        carpets.forEach((carpet) => {\n            carpet.resize();\n        });\n\n        speed = oldProgress - progress;\n        oldProgress = progress;\n    });\n\n    function render() {\n        material.uniforms.speed = lerp(material.uniforms.speed, speed, 0.6);\n        material.uniforms.speed2 = lerp(material.uniforms.speed2, speed, 0.1);\n        sliderAladino.post.uniforms.speed = lerp(sliderAladino.post.uniforms.speed, speed, 0.1);\n    }\n\n    function animate() {\n        render();\n        rAF = requestAnimationFrame(animate);\n    }\n\n    function destroy() {\n        cancelAnimationFrame(rAF);\n        carpets.forEach((carpet) => {\n            carpet.destroy();\n        });\n        carpets = [];\n        sliderAladino.destroy();\n        slider.destroy();\n        gui.destroy();\n    }\n\n    animate();\n\n    window.addEventListener('resize', () => {\n        carpets.forEach((carpet) => {\n            carpet.resize();\n        });\n    });\n\n    module.hot?.addDisposeHandler(destroy);\n});\n","export default \"#define GLSLIFY 1\\nattribute vec2 position;\\nattribute vec2 uv;\\nuniform mat4 projection;\\nuniform float speed;\\nuniform float speed2;\\nvarying vec2 vUv;\\n\\nfloat parabola(float x, float k) {\\n  return pow(4.0 * x * (1.0 - x), k);\\n}\\n\\nvoid main() {\\n  vUv = uv;\\n\\n  vec4 pos = vec4(position, 0.0, 1.0);\\n  float spee = speed * 2.0;\\n  pos.x += parabola(uv.y, 1.0) * spee;\\n  vec4 pp = projection * vec4(position, 0.0, 1.0);\\n  float yy = ((pp / pp.w).x + 1.0) / 2.0;\\n  pos.z = parabola(clamp(yy, 0.0, 1.0), 2.4) * speed2 * 160.0;\\n  pos.z = clamp(pos.z, -6.0, 6.0);\\n\\n  gl_Position = projection * pos;\\n}\";","export default \"precision highp float;\\n#define GLSLIFY 1\\n\\nuniform vec2 size;\\nuniform vec2 sizeImage;\\nuniform sampler2D image;\\n\\nvarying vec2 vUv;\\n\\nvec4 coverTexture(sampler2D tex, vec2 imgSize, vec2 ouv) {\\n  vec2 s = size;\\n  vec2 i = imgSize;\\n  float rs = s.x / s.y;\\n  float ri = i.x / i.y;\\n  vec2 new = rs < ri ? vec2(i.x * s.y / i.y, s.y) : vec2(s.x, i.y * s.x / i.x);\\n  vec2 offset = (rs < ri ? vec2((new.x - s.x) / 2.0, 0.0) : vec2(0.0, (new.y - s.y) / 2.0)) / new;\\n  vec2 uv = ouv * s / new + offset;\\n\\n  return texture2D(tex, uv);\\n}\\n\\nvoid main() {\\n  gl_FragColor = coverTexture(image, sizeImage, vUv);\\n}\\n\";","export default \"precision highp float;\\n#define GLSLIFY 1\\n    \\nuniform float time;\\nuniform float speed;\\nuniform vec2 viewport;\\nuniform sampler2D image;\\n\\nfloat parabola(float x, float k) {\\n    return pow(4.0 * x * (1.0 - x), k);\\n}\\n\\nfloat random(vec2 co) {\\n    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\\n}\\n\\nvoid main() {\\n    vec2 uv = gl_FragCoord.xy / viewport;\\n    float spe = speed * 300.0;\\n    float p = parabola(uv.x, 1.4);\\n\\n    float r = texture2D(image, uv + vec2(0.000 * spe, 0.0) * p).r;\\n    float g = texture2D(image, uv + vec2(0.01 * spe, 0.0) * p).g;\\n    float b = texture2D(image, uv + vec2(0.02 * spe, 0.0) * p).b;\\n    float a = texture2D(image, uv + vec2(0.000 * spe, 0.0) * p).w;\\n\\n    gl_FragColor = vec4(r, g, b, a);\\n    \\n    // Film grain effect\\n    float n = random(uv + mod(time, 3.0));\\n    gl_FragColor.rgb *= 1.0 - (n * 0.2);\\n}\";","import './styles.scss';\nimport { baseExperiment } from '../../base';\n// import postprocessingShader from './shaders/postprocessing.glsl';\nimport MainSlider from './main-slider';\nimport MainWebglSlider from './main-slider/webgl-slider';\nimport { isWebGLAvailable } from '../../../utils/webgl';\n\nconst _isWebGLAvailable = isWebGLAvailable();\n\nexport const createSlidersFullscreen = baseExperiment('sliders-fullscreen', ({ canvas, sizes, onRender, gui }) => {\n    const mainSliderContainer = document.querySelector('.js-main-slider');\n    let mainSlider: any;\n    if (mainSliderContainer) {\n        const MainSliderConstructor = _isWebGLAvailable ? MainWebglSlider : MainSlider;\n        mainSlider = new MainSliderConstructor(mainSliderContainer, {\n            duration: 2500,\n            autoplay: true,\n            delay: 5000,\n            // paused: true,\n            canvas,\n        });\n    }\n\n    // function render() {\n    //     console.log('render');\n    //     // material.uniforms.speed = lerp(material.uniforms.speed, speed, 0.6);\n    //     // material.uniforms.speed2 = lerp(material.uniforms.speed2, speed, 0.1);\n    //     // sliderAladino.post.uniforms.speed = lerp(sliderAladino.post.uniforms.speed, speed, 0.1);\n    // }\n\n    // function animate() {\n    //     render();\n    //     this.rAF = requestAnimationFrame(animate);\n    // }\n\n    function destroy() {\n        cancelAnimationFrame(this.rAF);\n\n        if (mainSlider) {\n            mainSlider.destroy();\n            mainSlider = null;\n        }\n\n        gui.destroy();\n    }\n\n    // animate();\n\n    module.hot?.addDisposeHandler(destroy);\n});\n","export function isWebGLAvailable() {\n    try {\n        const canvas = document.createElement('canvas');\n        return !!(\n            window.WebGLRenderingContext &&\n            (canvas.getContext('webgl') || canvas.getContext('experimental-webgl'))\n        );\n    } catch (err) {\n        return false;\n    }\n}\n\nexport function isWebGL2Available() {\n    try {\n        const canvas = document.createElement('canvas');\n        return !!(window.WebGL2RenderingContext && canvas.getContext('webgl2'));\n    } catch (e) {\n        return false;\n    }\n}\n","import './styles.scss';\nimport Aladino from 'aladino';\nimport gsap from 'gsap';\nimport { baseExperiment } from '../base';\nimport vertexShader from './shaders/vertex.glsl';\nimport fragmentShader from './shaders/fragment.glsl';\n\nfunction getPowerOfTwo(value: number, pow = 1) {\n    let _pow = pow;\n\n    while (_pow < value) {\n        _pow *= 2;\n    }\n\n    return _pow;\n}\n\nfunction createMultilineText(ctx, textToWrite, maxWidth, text) {\n    textToWrite = textToWrite.replace('\\n', ' ');\n    var currentText = textToWrite;\n    var futureText;\n    var subWidth = 0;\n    var maxLineWidth = 0;\n\n    var wordArray = textToWrite.split(' ');\n    var wordsInCurrent, wordArrayLength;\n    wordsInCurrent = wordArrayLength = wordArray.length;\n\n    // Reduce currentText until it is less than maxWidth or is a single word\n    // futureText var keeps track of text not yet written to a text line\n    while (ctx.measureText(currentText).width > maxWidth && wordsInCurrent > 1) {\n        console.log({ currentText, width: ctx.measureText(currentText).width });\n        wordsInCurrent--;\n        // let linebreak = false;\n\n        currentText = futureText = '';\n        for (let i = 0; i < wordArrayLength; i++) {\n            if (i < wordsInCurrent) {\n                currentText += wordArray[i];\n                if (i + 1 < wordsInCurrent) {\n                    currentText += ' ';\n                }\n            } else {\n                futureText += wordArray[i];\n                if (i + 1 < wordArrayLength) {\n                    futureText += ' ';\n                }\n            }\n        }\n    }\n    text.push(currentText); // Write this line of text to the array\n    maxLineWidth = ctx.measureText(currentText).width;\n\n    // If there is any text left to be written call the function again\n    if (futureText) {\n        subWidth = createMultilineText(ctx, futureText, maxWidth, text);\n        if (subWidth > maxLineWidth) {\n            maxLineWidth = subWidth;\n        }\n    }\n\n    // Return the maximum line width\n    return maxLineWidth;\n}\n\nfunction createTextCanvas(el: HTMLElement) {\n    const text = el.textContent || '';\n    const dpr = Math.min(2, window.devicePixelRatio);\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d')!;\n    const textMeasurement = ctx.measureText(text);\n    const styles = getComputedStyle(el);\n    const textArr: string[] = [];\n    const fontSize = parseFloat(styles.fontSize) * dpr;\n    const width = parseFloat(styles.width);\n    // const width = getPowerOfTwo(textMeasurement.width);\n    const height = parseFloat(styles.height);\n    const lineHeight = parseFloat(styles.lineHeight);\n    // const height = getPowerOfTwo(fontSize * 2);\n    const maxWidth = createMultilineText(ctx, text, width, textArr);\n    console.log({ maxWidth });\n\n    canvas.width = width * dpr;\n    canvas.height = height * dpr;\n\n    ctx.font = `${fontSize}px ${styles.fontFamily}`;\n    ctx.textAlign = 'center';\n    // ctx.textAlign = styles.textAlign;\n    ctx.textBaseline = 'middle';\n    ctx.fillStyle = styles.color;\n\n    // const canvasX = maxWidth;\n    const canvasX = width;\n    // const canvasX = canvas.width;\n    const canvasY = lineHeight * textArr.length;\n    // const textX = canvas.width / 2;\n    // const textX = canvasX / 2;\n    const textX = 0;\n    let textY: number;\n    const offset = (canvasY - lineHeight * (textArr.length + 1)) * 0.5;\n    console.log(textArr);\n\n    // for (let i = 0; i < textArr.length; i++) {\n    //     textY = (i + 1) * lineHeight + offset;\n    //     // textY = canvas.height / 2;\n    //     ctx.fillText(textArr[i], textX, textY);\n    //     // ctx.fillText(textArr[i], textX, textY + fontSize * 0.14);\n    // }\n    ctx.fillText(text, canvas.width / 2, canvas.height / 2 + fontSize * 0.14);\n\n    return canvas;\n}\n\nexport const createTextBasic = baseExperiment('text-basic', async ({ canvas, sizes, onRender, gui }) => {\n    let rAF: number;\n\n    const aladino = new Aladino({\n        density: 1,\n        dpr: Math.min(devicePixelRatio, 2),\n        canvas,\n    });\n\n    Array.from(document.querySelectorAll<HTMLElement>('.js-gl-text')).forEach((textEl) => {\n        const styles = getComputedStyle(textEl);\n\n        const material = aladino.material({\n            vertex: vertexShader,\n            fragment: fragmentShader,\n            uniforms: {\n                pixelSize: 1,\n            },\n        });\n\n        textEl.addEventListener('mouseenter', () => {\n            gsap.to(material.uniforms, {\n                duration: 0.6,\n                pixelSize: parseFloat(styles.fontSize) * 0.75,\n                ease: 'steps(10)',\n            });\n        });\n\n        textEl.addEventListener('mouseleave', () => {\n            gsap.to(material.uniforms, {\n                duration: 0.6,\n                pixelSize: 1,\n                ease: 'steps(10)',\n            });\n        });\n\n        function generateTexture() {\n            return new Promise((resolve) => {\n                createTextCanvas(textEl).toBlob((blob) => {\n                    const newImg = new Image();\n                    newImg.hidden = true;\n                    const url = URL.createObjectURL(blob);\n\n                    newImg.onload = () => {\n                        document.body.removeChild(newImg);\n                        resolve(url);\n                        setTimeout(() => {\n                            URL.revokeObjectURL(url);\n                        }, 0);\n                    };\n\n                    newImg.src = url;\n                    document.body.appendChild(newImg);\n                });\n            });\n        }\n\n        let carpet;\n\n        generateTexture().then((url) => {\n            carpet = aladino.carpet(textEl, {\n                material,\n                uniforms: {\n                    image: aladino.texture(url),\n                },\n            });\n        });\n\n        window.addEventListener('resize', () => {\n            generateTexture().then((url) => {\n                if (carpet) {\n                    carpet.uniforms.image = aladino.texture(url);\n                }\n            });\n        });\n    });\n\n    function render() {\n        onRender();\n    }\n\n    function animate() {\n        render();\n        rAF = requestAnimationFrame(animate);\n    }\n\n    function destroy() {\n        cancelAnimationFrame(rAF);\n    }\n\n    animate();\n\n    module.hot?.addDisposeHandler(destroy);\n});\n","export default \"#define GLSLIFY 1\\nattribute vec2 position;\\nattribute vec2 uv;\\nuniform mat4 projection;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vUv = uv;\\n\\n  vec4 pos = vec4(position, 0.0, 1.0);\\n\\n  gl_Position = projection * pos;\\n}\\n\";","export default \"precision highp float;\\n#define GLSLIFY 1\\n\\n// uniform vec2 size;\\n// uniform vec2 sizeImage;\\nuniform vec2 viewport;\\nuniform float pixelSize;\\nuniform sampler2D image;\\nuniform float time;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vec2 uv = vUv;\\n  // uv.x += sin(uv.y * 40.0 + time * 0.01) * 0.005;\\n\\n  // gl_FragColor = texture2D(image, uv);\\n\\n  vec2 dxy = pixelSize / viewport;\\n  vec2 coord = dxy * floor(uv / dxy);\\n\\n  gl_FragColor = texture2D(image, coord);\\n}\\n\";","import Aladino from 'aladino';\nimport lerp from 'lerp';\nimport gsap from 'gsap';\nimport vertexShader from './shaders/vertex.glsl';\nimport fragmentShader from './shaders/fragment.glsl';\nimport MainSlider from './index';\nimport type { MainSliderOptions } from './types';\n\nexport default class WebglMainSlider extends MainSlider {\n    isWebglInitialized: boolean;\n\n    // width: number;\n\n    // height: number;\n\n    isAnimating: boolean;\n\n    // containerRect: DOMRect;\n\n    constructor(container: Element, options: Partial<MainSliderOptions>) {\n        super(container, options);\n        this._onVisibilityChange = this._onVisibilityChange.bind(this);\n        // this.animate = this.animate.bind(this);\n\n        this.isAnimating = false;\n        // this.containerRect = this.container.getBoundingClientRect();\n        // this.width = this.containerRect.width;\n        // this.height = this.containerRect.height;\n        this.isWebglInitialized = false;\n\n        this._init();\n    }\n\n    protected _init() {\n        this.aladino = new Aladino({\n            density: 1,\n            dpr: Math.min(devicePixelRatio, 2),\n            canvas: this.options.canvas,\n            // post: {\n            //     fragment: postprocessingShader,\n            //     uniforms: {\n            //         speed: 0.0,\n            //     },\n            // },\n        });\n\n        this.displacementTexture = this.aladino.texture(`${PUBLIC_PATH}img/sliders/displacement-map.png`);\n        this.textures = this.images.map((img) => this.aladino.texture(img.currentSrc));\n\n        this.material = this.aladino.material({\n            vertex: vertexShader,\n            fragment: fragmentShader,\n            uniforms: {\n                currentImage: this.textures[this.activeIndex],\n                nextImage: this.textures[this.nextIndex],\n                disp: this.displacementTexture,\n                dispPower: 0,\n                intensity: 0.5,\n                textureFactor: { x: 1, y: 1 },\n            },\n        });\n\n        this.carpet = this.aladino.carpet(this.images[0], {\n            material: this.material,\n            uniforms: {\n                image: this.textures[this.activeIndex],\n            },\n        });\n\n        const observer = new IntersectionObserver((entries) => {\n            entries.forEach((entry) => {\n                this.carpet.active = entry.isIntersecting;\n            });\n        });\n\n        observer.observe(this.container);\n\n        document.addEventListener('visibilitychange', this._onVisibilityChange);\n\n        // this.animate();\n\n        this.container.classList.add('webgl-initialized');\n        this.isWebglInitialized = true;\n    }\n\n    protected setTextureFactor(index: number) {\n        const { image } = this.textures[index];\n        const factor = { x: 1, y: 1 };\n        const rect = this.container.getBoundingClientRect();\n        const rectRatio = rect.width / rect.height;\n        const imageRatio = image.width / image.height;\n\n        if (rectRatio > imageRatio) {\n            factor.x = 1;\n            factor.y = (1 / rectRatio) * imageRatio;\n        } else {\n            factor.x = (1 * rectRatio) / imageRatio;\n            factor.y = 1;\n        }\n\n        return factor;\n    }\n\n    // render() {\n    //     // material.uniforms.speed = lerp(material.uniforms.speed, speed, 0.6);\n    //     // material.uniforms.speed2 = lerp(material.uniforms.speed2, speed, 0.1);\n    //     // sliderAladino.post.uniforms.speed = lerp(sliderAladino.post.uniforms.speed, speed, 0.1);\n    // }\n\n    // animate() {\n    //     this.render();\n    //     this.rAF = requestAnimationFrame(this.animate);\n    // }\n\n    async destroy() {\n        super.destroy();\n\n        cancelAnimationFrame(this.rAF);\n        document.removeEventListener('visibilitychange', this._onVisibilityChange);\n\n        if (this.observer) {\n            this.observer.disconnect();\n            this.observer = null;\n        }\n\n        this.carpet.destroy();\n        this.aladino.destroy();\n        this.container.classList.remove('webgl-initialized');\n        this.isWebglInitialized = false;\n    }\n\n    async navigateTo(index: number) {\n        super.navigateTo(index);\n\n        if (!this.isAnimating) return;\n\n        this.isAnimating = true;\n        console.log(this);\n\n        if (this.nextIndex !== index) {\n            this.material.uniforms.nextImage = this.textures[index];\n        }\n\n        const factor = this.setTextureFactor(index);\n\n        gsap.to(this.material.uniforms.dispPower, {\n            duration: this.duration / 1000,\n            value: 1,\n            ease: 'expo.inOut',\n            onComplete: () => {\n                this.material.uniforms.dispPower = 0;\n                this.material.uniforms.currentImage = this.textures[index];\n                this.material.uniforms.nextImage = this.textures[this.nextIndex];\n                this.isAnimating = false;\n                // this.activeIndex = index;\n            },\n        });\n\n        gsap.to(this.material.uniforms.textureFactor, {\n            duration: this.duration / 1000,\n            x: factor.x,\n            y: factor.y,\n            ease: 'expo.inOut',\n        });\n    }\n\n    protected async _onResize() {\n        super._onResize();\n        this.carpet.resize();\n    }\n\n    protected async _onVisibilityChange() {\n        // if (this.offscreen) {\n        //     await this.offscreen.setState({ documentVisible: document.visibilityState === 'visible' });\n        // }\n    }\n}\n","export default \"#define GLSLIFY 1\\nattribute vec2 position;\\nattribute vec2 uv;\\n\\nuniform mat4 projection;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vUv = uv;\\n\\n  gl_Position = projection * vec4(position, 0.0, 1.0);\\n}\\n\";","export default \"precision highp float;\\n#define GLSLIFY 1\\n\\nuniform vec2 size;\\nuniform vec2 sizeImage;\\nuniform sampler2D image;\\nuniform sampler2D currentImage;\\nuniform sampler2D nextImage;\\nuniform sampler2D disp;\\nuniform float dispPower;\\nuniform float intensity;\\n\\nvarying vec2 vUv;\\n\\nvec4 coverTexture(sampler2D tex, vec2 imgSize, vec2 ouv) {\\n  vec2 s = size;\\n  vec2 i = imgSize;\\n  float rs = s.x / s.y;\\n  float ri = i.x / i.y;\\n  vec2 new = rs < ri ? vec2(i.x * s.y / i.y, s.y) : vec2(s.x, i.y * s.x / i.x);\\n  vec2 offset = (rs < ri ? vec2((new.x - s.x) / 2.0, 0.0) : vec2(0.0, (new.y - s.y) / 2.0)) / new;\\n  vec2 uv = ouv * s / new + offset;\\n\\n  return texture2D(tex, uv);\\n}\\n\\nvoid main() {\\n    vec2 uv = vUv;\\n    vec4 disp = texture2D(disp, uv);\\n    vec2 dispVec = vec2(disp.x, disp.y);\\n    \\n    vec2 distPos1 = uv + (dispVec * intensity * dispPower);\\n    vec2 distPos2 = uv + (dispVec * -(intensity * (1. - dispPower)));\\n    \\n    vec4 currentImage = texture2D(currentImage, distPos1);\\n    vec4 nextImage = texture2D(nextImage, distPos2);\\n    \\n    gl_FragColor = mix(currentImage, nextImage, dispPower);\\n//   gl_FragColor = coverTexture(currentImage, sizeImage, vUv);\\n}\\n\";","/* global USE_SERVICE_WORKER */\nimport './webpack-imports';\nimport './sentry';\nimport './polyfills';\n\nimport sw from './sw';\nimport { registerCustomElements } from './custom-elements';\n\nimport { createParticlesBasic } from './experiments/particles/particles-basic';\nimport { createParticlesPathTrailing } from './experiments/particles/path-trailing';\n\nimport { createPhysicsWorker } from './experiments/physics/physics-worker';\n\nimport { createShadersPatterns } from './experiments/shaders/patterns';\nimport { createShadersPixelated } from './experiments/shaders/pixelated';\n\nimport { createSliders1 } from './experiments/sliders/1';\nimport { createSlidersFullscreen } from './experiments/sliders/fullscreen';\n\nimport { createTextBasic } from './experiments/text/text-basic';\n\nimport './experiments/distortions/1';\n\nregisterCustomElements();\n\ncreateParticlesBasic();\ncreateParticlesPathTrailing();\n\ncreatePhysicsWorker();\n\ncreateShadersPatterns();\ncreateShadersPixelated();\ncreateSliders1();\ncreateSlidersFullscreen();\n\ncreateTextBasic();\n\n// Service Worker\nif (USE_SERVICE_WORKER) {\n    window.addEventListener('load', () => sw.register());\n} else {\n    sw.unregister();\n}\n\nmodule.hot?.accept();\n","/* global BUILD_TYPE */\n/* eslint global-require: \"off\" */\nimport 'focus-visible';\n// import 'intersection-observer';\n\nif (BUILD_TYPE === 'legacy') {\n    require('core-js/es/symbol');\n    require('core-js/es/promise/finally');\n    require('document-register-element/build/document-register-element');\n    // require('element-matches-polyfill');\n    require('whatwg-fetch');\n}\n","import { BackSide, FrontSide, Group, Material, Mesh, Points } from 'three';\n\nexport function disposeMesh(mesh: Mesh | Points) {\n    mesh.geometry?.dispose();\n    if (mesh.material) {\n        if (mesh.material instanceof Array) {\n            for (let i = 0; i < mesh.material.length; ++i) {\n                mesh.material[i].dispose();\n            }\n        } else {\n            mesh.material.dispose();\n        }\n    }\n}\n\nexport function separateCullingPass(mesh: Mesh): Group {\n    const group = new Group();\n\n    [BackSide, FrontSide].forEach((side, i) => {\n        const newMesh = mesh.clone();\n        newMesh.name = `${newMesh.name}__clone${i + 1}`;\n\n        if (mesh.material instanceof Material) {\n            const material = mesh.material.clone();\n            newMesh.material = material;\n            material.transparent = true;\n            material.side = side;\n        }\n\n        group.add(newMesh);\n\n        if (mesh.parent) {\n            mesh.parent.add(group);\n            mesh.parent.remove(mesh);\n            disposeMesh(mesh);\n        }\n    });\n\n    return group;\n}\n","/* eslint-disable max-lines */\nimport delegate from 'delegate';\n// import createDispatcher from 'lit-dispatcher';\nimport gsap from 'gsap';\n// import debounce from 'lodash.debounce';\nimport Hammer from 'hammerjs';\n\nimport type { MainSliderOptions } from './types';\n\nconst defaultOptions: MainSliderOptions = {\n    duration: 1,\n    autoplay: false,\n    delay: 5000,\n    paused: false,\n};\n\nexport default class MainSlider {\n    container: Element;\n\n    options: MainSliderOptions;\n\n    slides: Element[];\n\n    slidesContainer: Element | null;\n\n    navigationContainer: Element | null;\n\n    paginationContainer: Element | null;\n\n    prevSlideButton: HTMLButtonElement | null;\n\n    nextSlideButton: HTMLButtonElement | null;\n\n    _paginationDelegation: any;\n\n    // _dispatcher: ReturnType<typeof createDispatcher>;\n\n    paginationButtons: HTMLButtonElement[];\n\n    images: HTMLImageElement[];\n\n    total: number;\n\n    activeIndex: number;\n\n    nextIndex: number;\n\n    isAnimating: boolean;\n\n    _autoplayTimeout: NodeJS.Timeout | null;\n\n    // _contentMap: WeakMap<Element, { content: Element; label: Element; name: Element; link: Element }>;\n\n    _hammer: HammerManager;\n\n    tl: gsap.core.Timeline | null;\n\n    constructor(container: Element, options: Partial<MainSliderOptions> = defaultOptions) {\n        this.navigateToNext = this.navigateToNext.bind(this);\n        this.navigateToPrev = this.navigateToPrev.bind(this);\n        this._onResize = this._onResize.bind(this);\n        this._onSwipe = this._onSwipe.bind(this);\n\n        this.options = { ...defaultOptions, ...options };\n        // this._dispatcher = createDispatcher();\n        this.isAnimating = false;\n        this.container = container;\n        this.slides = Array.from(container.querySelectorAll('.js-main-slide'));\n        this.total = this.slides.length;\n        this.slidesContainer = container.querySelector('.js-main-slides-container');\n        this.navigationContainer = container.querySelector('.js-main-slide-nav-container');\n        this.paginationContainer = container.querySelector('.js-main-slide-pagination-container');\n        this.images = Array.from(container.querySelectorAll('img.js-main-slide-img'));\n        this.activeIndex = 0;\n        this.nextIndex = this._getNextIndex();\n        this.prevSlideButton = null;\n        this.nextSlideButton = null;\n        this.paginationButtons = [];\n        this._paginationDelegation = null;\n        this._autoplayTimeout = null;\n        this.tl = null;\n\n        // this._contentMap = new WeakMap<Element, { content: Element; label: Element; name: Element; link: Element }>();\n        // this.slides.forEach((slide) => {\n        //     this._contentMap.set(slide, {\n        //         content: slide.querySelector('.js-main-slide-content')!,\n        //         label: slide.querySelector('.js-main-slide-label')!,\n        //         name: slide.querySelector('.js-main-slide-name')!,\n        //         link: slide.querySelector('.js-main-slide-link')!,\n        //     });\n        // });\n\n        // this._generateNavigation();\n        // this._generatePagination();\n\n        this._hammer = new Hammer(container as HTMLElement);\n        this._hammer.get('swipe').set({ direction: Hammer.DIRECTION_HORIZONTAL });\n        this._hammer.on('swipe', this._onSwipe);\n\n        this.slides[this.activeIndex].classList.add('is-active');\n        this.slides[this.nextIndex].classList.add('is-next');\n        // this.paginationButtons[this.activeIndex].classList.add('a-loader');\n\n        if (this.options.autoplay && !this.options.paused) {\n            this._autoplayTimeout = setTimeout(this.navigateToNext, this.options.delay);\n        }\n\n        window.addEventListener('resize', this._onResize);\n    }\n\n    on(eventName: string, fn: (data?: any) => void) {\n        // this._dispatcher.on(eventName, fn);\n    }\n\n    once(eventName: string, fn: (data?: any) => void) {\n        // this._dispatcher.once(eventName, fn);\n    }\n\n    off(eventName: string, fn: (data?: any) => void) {\n        // this._dispatcher.off(eventName, fn);\n    }\n\n    resume() {\n        this.options.paused = true;\n        this._autoplayTimeout = setTimeout(this.navigateToNext, this.options.delay);\n    }\n\n    navigateTo(index: number) {\n        console.log('adf');\n        if (this.activeIndex === index || this.isAnimating) return;\n\n        if (this._autoplayTimeout) {\n            clearTimeout(this._autoplayTimeout);\n        }\n\n        this.isAnimating = true;\n        // this._dispatcher.dispatch('change', { currentIndex: this.activeIndex, nextIndex: index });\n\n        // const activePaginationBtn = this.paginationButtons.find(\n        //     (btn) => this.paginationButtons.indexOf(btn) === this.activeIndex,\n        // );\n\n        // if (activePaginationBtn) {\n        //     activePaginationBtn.classList.remove('a-loader');\n        //     activePaginationBtn.classList.remove('is-active');\n        // }\n\n        // this.paginationButtons.find((btn) => this.paginationButtons.indexOf(btn) === index)?.classList.add('is-active');\n\n        const nextIndex = this._getNextIndex(this._getPrevIndex(index));\n        const nextAfterNextIndex = this._getNextIndex(nextIndex);\n\n        if (this.nextIndex !== nextIndex) {\n            this.slides[this.nextIndex].classList.remove('is-next');\n            this.slides[nextIndex].classList.add('is-next');\n            this.nextIndex = nextIndex;\n        }\n\n        // const currentContent = this._contentMap.get(this.slides[this.activeIndex]);\n        // const nextContent = this._contentMap.get(this.slides[index]);\n        // const nextAfterNextContent = this._contentMap.get(this.slides[nextAfterNextIndex]);\n        const duration = (this.options.duration / 1000) * 0.9;\n\n        // const cloneSlide = this.slides[nextAfterNextIndex].cloneNode(true) as Element;\n        // cloneSlide.classList.add('main-slide--clone');\n        // cloneSlide.classList.remove('is-active');\n        // cloneSlide.classList.remove('is-next');\n        // this.slidesContainer?.appendChild(cloneSlide);\n\n        this.tl = gsap.timeline({\n            defaults: { duration },\n            onComplete: () => {\n                // this.slidesContainer?.removeChild(cloneSlide);\n\n                // this.paginationButtons\n                //     .find((btn) => this.paginationButtons.indexOf(btn) === index)\n                //     ?.classList.add('a-loader');\n\n                this.slides[this.activeIndex].classList.remove('is-active');\n                this.slides[this.nextIndex].classList.remove('is-next');\n\n                this.activeIndex = index;\n                this.nextIndex = this._getNextIndex();\n\n                this.slides[this.activeIndex].classList.add('is-active');\n                this.slides[this.nextIndex].classList.add('is-next');\n\n                gsap.set(\n                    [\n                        this.slides[index],\n                        // currentContent!.link,\n                        // currentContent!.name,\n                        // currentContent!.label,\n                        // nextContent!.content,\n                        // nextContent!.name,\n                        // nextContent!.label,\n                        // nextContent!.link,\n                        // nextAfterNextContent!.name,\n                    ],\n                    { clearProps: 'all' },\n                );\n\n                this.isAnimating = false;\n                // this._dispatcher.dispatch('change-complete', {\n                //     currentIndex: this.activeIndex,\n                //     nextIndex: this.nextIndex,\n                // });\n\n                if (this.options.autoplay) {\n                    this._autoplayTimeout = setTimeout(this.navigateToNext, this.options.delay);\n                }\n            },\n        });\n\n        this.tl\n            .to(this.images[this.activeIndex], {\n                autoAlpha: 0,\n                ease: 'power4.inOut',\n            })\n            .fromTo(\n                this.images[nextIndex],\n                {\n                    autoAlpha: 0,\n                },\n                {\n                    x: 0,\n                    autoAlpha: 1,\n                    ease: 'expo.inOut',\n                },\n                `-=${duration}`,\n            )\n            .fromTo(\n                // this.slides[index],\n                nextContent!.content,\n                {\n                    x: 0,\n                },\n                {\n                    x: window.matchMedia('(max-width: 1024px)').matches ? '-100vw' : '-50vw',\n                    ease: 'power4.inOut',\n                },\n                `-=${duration - 0.05}`,\n            )\n            .to(\n                nextContent!.name,\n                {\n                    opacity: 1,\n                    ease: 'expo.inOut',\n                },\n                `-=${duration}`,\n            )\n            .fromTo(\n                nextContent!.label,\n                {\n                    x: '15vw',\n                    autoAlpha: 0,\n                },\n                {\n                    x: 0,\n                    autoAlpha: 1,\n                    ease: 'expo.inOut',\n                },\n                `-=${duration - 0.05}`,\n            )\n            .fromTo(\n                cloneSlide,\n                {\n                    x: '50vw',\n                },\n                {\n                    x: 0,\n                    ease: 'power4.inOut',\n                },\n                `-=${duration - 0.05}`,\n            );\n    }\n\n    navigateToPrev() {\n        this.navigateTo(this._getPrevIndex());\n    }\n\n    navigateToNext() {\n        this.navigateTo(this._getNextIndex());\n    }\n\n    destroy() {\n        if (this.tl) {\n            this.tl.kill();\n            this.tl = null;\n        }\n        this._hammer.destroy();\n        window.removeEventListener('resize', this._onResize);\n        this.prevSlideButton?.removeEventListener('click', this.navigateToPrev);\n        this.nextSlideButton?.removeEventListener('click', this.navigateToNext);\n        // this.slides.forEach((slide) => {\n        //     this._contentMap.delete(slide);\n        // });\n\n        if (this._paginationDelegation) {\n            this._paginationDelegation.destroy();\n        }\n\n        if (this._autoplayTimeout) {\n            clearTimeout(this._autoplayTimeout);\n        }\n    }\n\n    protected _onResize() {\n        //\n    }\n\n    protected _onSwipe(event: any) {\n        console.log('swipe');\n        if (event.deltaX < 0) {\n            this.navigateToNext();\n        } else {\n            this.navigateToPrev();\n        }\n    }\n\n    protected _generateNavigation() {\n        if (!this.navigationContainer) return;\n\n        const arrowTemplate = `\n            <svg width=\"16\" height=\"9\" viewBox=\"0 0 16 9\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M15.2 1.348a.59.59 0 00-.834-.832L8.08 6.802 2.014.516a.59.59 0 00-.833.832l6.9 7.01 7.118-7.01z\" fill=\"#fff\"/>\n            </svg>\n        `;\n        this.prevSlideButton = document.createElement('button');\n        this.prevSlideButton.className = 'main-slider-navigation-arrow main-slider-navigation-arrow--prev';\n        const prevSlideLabel = 'Предыдущий слайд';\n        this.prevSlideButton.setAttribute('aria-label', prevSlideLabel);\n        this.prevSlideButton.setAttribute('title', prevSlideLabel);\n        this.prevSlideButton.innerHTML = arrowTemplate;\n        this.prevSlideButton.addEventListener('click', this.navigateToPrev);\n\n        this.nextSlideButton = document.createElement('button');\n        this.nextSlideButton.className = 'main-slider-navigation-arrow main-slider-navigation-arrow--next';\n        const nextSlideLabel = 'Следующий слайд';\n        this.nextSlideButton.setAttribute('aria-label', nextSlideLabel);\n        this.nextSlideButton.setAttribute('title', nextSlideLabel);\n        this.nextSlideButton.innerHTML = arrowTemplate;\n        this.nextSlideButton.addEventListener('click', this.navigateToNext);\n\n        const fragment = document.createDocumentFragment();\n        fragment.appendChild(this.prevSlideButton);\n        fragment.appendChild(this.nextSlideButton);\n\n        this.navigationContainer.appendChild(fragment);\n    }\n\n    protected _generatePagination() {\n        if (!this.paginationContainer) return;\n\n        const loaderTemplate = `\n            <svg viewBox=\"0 0 37 37\" class=\"main-slider-pagination__loading-svg\" preserveAspectRatio=\"none\">\n                <circle class=\"main-slider-pagination__loading-path\" cx=\"19\" cy=\"19\" r=\"18.5\" style=\"--path-length:115.49px;\"></circle>\n            </svg>\n        `;\n\n        this.paginationButtons = [];\n        const ul = document.createElement('ul');\n        ul.className = 'list-unstyled main-slider-pagination-list';\n\n        for (let i = 0; i < this.total; i++) {\n            const li = document.createElement('li');\n            li.className = 'main-slider-pagination-list__item';\n            ul.appendChild(li);\n            const button = document.createElement('button');\n            button.className = 'main-slider-pagination-btn js-main-slider-pagination-btn';\n            const buttonLabel = `Перейти на слайд ${i + 1}`;\n            button.setAttribute('aria-label', buttonLabel);\n            button.setAttribute('title', buttonLabel);\n            button.setAttribute('data-slide-index', `${i}`);\n            if (this.activeIndex === i) {\n                button.classList.add('is-active');\n            }\n            this.paginationButtons.push(button);\n            li.appendChild(button);\n            button.innerHTML += loaderTemplate;\n        }\n\n        this.paginationContainer.appendChild(ul);\n\n        this._paginationDelegation = delegate(\n            this.paginationContainer,\n            '.js-main-slider-pagination-btn',\n            'click',\n            (event: any) => {\n                this.navigateTo(parseInt(event.delegateTarget.dataset.slideIndex, 10));\n            },\n        );\n    }\n\n    protected _getPrevIndex(index = this.activeIndex) {\n        return (index - 1 + this.total) % this.total;\n    }\n\n    protected _getNextIndex(index = this.activeIndex) {\n        return (index + 1) % this.total;\n    }\n}\n","import Stats from 'three/examples/jsm/libs/stats.module';\nimport * as dat from 'three/examples/jsm/libs/dat.gui.module';\n\ntype Experiment = (data: {\n    canvas: HTMLCanvasElement;\n    onRender: () => void;\n    gui: any;\n    sizes: { width: number; height: number };\n}) => void;\n\nexport function baseExperiment(name: string, fn: Experiment) {\n    return () => {\n        const canvas = document.querySelector<HTMLCanvasElement>(`.js-canvas[data-experiment=\"${name}\"]`);\n\n        if (!canvas) {\n            return;\n        }\n\n        let canvasRect = canvas.getBoundingClientRect();\n\n        const sizes = {\n            width: canvasRect.width,\n            height: canvasRect.height,\n        };\n\n        const stats = new Stats();\n        document.body.appendChild(stats.domElement);\n\n        const gui = new dat.GUI();\n        gui.addFolder();\n\n        function onRender() {\n            stats.update();\n        }\n\n        fn({ sizes, gui, canvas, onRender });\n\n        window.addEventListener('resize', () => {\n            canvasRect = canvas.getBoundingClientRect();\n            sizes.width = canvasRect.width;\n            sizes.height = canvasRect.height;\n        });\n\n        function destroy() {\n            gui?.destroy();\n        }\n\n        module.hot?.addDisposeHandler(destroy);\n    };\n}\n","/* global PUBLIC_PATH */\nasync function register() {\n    if ('serviceWorker' in navigator) {\n        try {\n            await navigator.serviceWorker.register(`${PUBLIC_PATH}service-worker.js`);\n        } catch (err) {\n            console.log('SW registration failed: ', err);\n        }\n    }\n}\n\nasync function unregister() {\n    if ('serviceWorker' in navigator) {\n        const registrations = await navigator.serviceWorker.getRegistrations();\n        registrations.forEach((registration) => {\n            registration.unregister();\n        });\n    }\n}\n\nconst _module = { register, unregister };\n\nexport default _module;\n","// import * as Cookies from 'js-cookie';\n\nexport function registerCustomElements() {\n    // if (Cookies.get('COOKIES_USAGE_ACCEPTED') !== 'true') {\n    //     import(/* webpackChunkName: \"CookiesAgreement\" */ './CookiesAgreement/CookiesAgreement').then(\n    //         ({ CookiesAgreement }) => {\n    //             window.customElements.define('x-cookies-agreement', CookiesAgreement);\n    //         },\n    //     );\n    // }\n}\n","import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { baseExperiment } from '../base';\n\nexport const createParticlesBasic = baseExperiment('particles-basic', ({ canvas, sizes, onRender, gui }) => {\n    let rAF: number;\n    const renderer = new THREE.WebGLRenderer({ canvas });\n    renderer.outputEncoding = THREE.sRGBEncoding;\n    renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n    renderer.setSize(sizes.width, sizes.height);\n\n    const camera = new THREE.PerspectiveCamera(45, sizes.width / sizes.height, 0.1, 1000);\n    camera.position.z = 3;\n\n    const scene = new THREE.Scene();\n    const textureLoader = new THREE.TextureLoader();\n\n    const particleTexture = textureLoader.load(`${PUBLIC_PATH}img/particles/8.png`);\n\n    const particlesGeometry = new THREE.BufferGeometry();\n    const particlesCount = 20000;\n    const positions = new Float32Array(particlesCount * 3);\n\n    for (let i = 0; i < particlesCount * 3; i++) {\n        positions[i] = (Math.random() - 0.5) * 4;\n    }\n\n    particlesGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n\n    const sphere = new THREE.Points(\n        particlesGeometry,\n        new THREE.PointsMaterial({\n            color: 0xffffff,\n            map: particleTexture,\n            size: 0.05,\n            sizeAttenuation: true,\n            depthWrite: false,\n            blending: THREE.AdditiveBlending,\n        }),\n    );\n    scene.add(sphere);\n\n    const controls = new OrbitControls(camera, canvas);\n    controls.enableDamping = true;\n\n    function render() {\n        onRender();\n        controls.update();\n        renderer.render(scene, camera);\n    }\n\n    function animate() {\n        render();\n        rAF = requestAnimationFrame(animate);\n    }\n\n    function destroy() {\n        cancelAnimationFrame(rAF);\n        renderer.dispose();\n    }\n\n    animate();\n\n    window.addEventListener('resize', () => {\n        camera.aspect = sizes.width / sizes.height;\n        camera.updateProjectionMatrix();\n        renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n        renderer.setSize(sizes.width, sizes.height);\n    });\n\n    module.hot?.addDisposeHandler(destroy);\n});\n","import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { baseExperiment } from '../../base';\nimport vertexShader from './shaders/vertex.glsl';\nimport fragmentShader from './shaders/fragment.glsl';\nimport { disposeMesh } from '../../../utils';\nimport texture from './russia.png';\n\nexport const createParticlesPathTrailing = baseExperiment(\n    'particles-path-trailing',\n    ({ canvas, sizes, onRender, gui }) => {\n        let rAF: number;\n        const renderer = new THREE.WebGLRenderer({ canvas });\n        renderer.outputEncoding = THREE.sRGBEncoding;\n        renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n        renderer.setSize(sizes.width, sizes.height);\n\n        const camera = new THREE.PerspectiveCamera(45, sizes.width / sizes.height, 0.1, 100);\n        camera.position.z = 10;\n\n        const scene = new THREE.Scene();\n        // const clock = new THREE.Clock();\n\n        const svg = document.querySelector<SVGElement>('svg.js-russia-svg');\n\n        if (!svg) {\n            throw new Error('svg not found');\n        }\n\n        const svgBBox = svg.getBBox();\n        svg.style.display = 'none';\n        const svgTexture = new THREE.TextureLoader().load(texture);\n\n        const params = {\n            mapColor: 0x7071a,\n            // particlesColor: 0x040a14,\n            particlesColor: 0x110800,\n            // pointsAmountFactor: 0.4,\n            pointsAmountFactor: 0.9,\n            // maxPointsToRender: 50,\n            maxPointsToRender: 200,\n            // pointsToRenderFactor: 0.2,\n            pointsToRenderFactor: 0.5,\n            particlesSpeed: 1,\n            // opacityFactor: 0.2,\n            opacityFactor: 0.3,\n            // particleSize: 30,\n            particleSize: 20,\n        };\n        gui?.add(params, 'particlesSpeed').min(0).max(10).step(1);\n        gui?.add(params, 'opacityFactor').min(0).max(1).step(0.001);\n\n        let pathsData: any[] = [];\n        let maxPoints = 0;\n        let positions: Float32Array | null;\n        let opacity: Float32Array | null;\n\n        const particlesGeometry = new THREE.BufferGeometry();\n\n        function initScene() {\n            pathsData = Array.from(svg!.querySelectorAll<SVGPathElement>('.land')).map((path) => {\n                const pathLength = path.getTotalLength();\n                const pointsAmount = Math.floor(pathLength * params.pointsAmountFactor);\n                const points: THREE.Vector3[] = [];\n\n                for (let i = 0; i < pointsAmount; i++) {\n                    const pointAt = (pathLength / pointsAmount) * i;\n                    const point = path.getPointAtLength(pointAt);\n                    const normalizedPoint = {\n                        x: (point.x - svgBBox.width / 2) * 0.01 + Math.random() * 0.02,\n                        y: (point.y - svgBBox.height / 2) * 0.01 + Math.random() * 0.02,\n                        z: 0,\n                    };\n                    points.push(new THREE.Vector3(normalizedPoint.x, normalizedPoint.y, normalizedPoint.z));\n                }\n\n                return {\n                    length: pathLength,\n                    points,\n                    pointsToRender: Math.min(\n                        params.maxPointsToRender,\n                        Math.floor(pointsAmount * params.pointsToRenderFactor),\n                    ),\n                    currentPosition: 0,\n                };\n            });\n            maxPoints = pathsData.reduce((acc, pathData) => acc + pathData.pointsToRender, 0);\n\n            positions = new Float32Array(maxPoints * 3);\n            opacity = new Float32Array(maxPoints);\n\n            for (let i = 0; i < maxPoints * 3; i++) {\n                positions[i] = 0;\n            }\n\n            for (let i = 0; i < maxPoints; i++) {\n                opacity[i] = Math.random() * params.opacityFactor;\n            }\n\n            particlesGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n            particlesGeometry.setAttribute('opacity', new THREE.BufferAttribute(opacity, 1));\n        }\n\n        initScene();\n        gui?.add(params, 'pointsToRenderFactor').min(0).max(1).step(0.01).onFinishChange(initScene);\n        gui?.add(params, 'pointsAmountFactor').min(0).max(3).step(0.01).onFinishChange(initScene);\n        gui?.add(params, 'maxPointsToRender').min(0).max(500).step(1).onFinishChange(initScene);\n\n        const particlesMaterial = new THREE.ShaderMaterial({\n            uniforms: {\n                uParticleSize: { value: params.particleSize * renderer.getPixelRatio() },\n                uTime: { value: 0 },\n                uColor: { value: new THREE.Color(params.particlesColor) },\n            },\n            vertexShader,\n            fragmentShader,\n            transparent: true,\n            depthWrite: false,\n            blending: THREE.AdditiveBlending,\n        });\n        gui?.addColor(params, 'particlesColor').onChange(() => {\n            particlesMaterial.uniforms.uColor.value = new THREE.Color(params.particlesColor);\n        });\n        gui?.add(params, 'particleSize')\n            .min(0)\n            .max(100)\n            .step(0.01)\n            .onChange(() => {\n                particlesMaterial.uniforms.uParticleSize.value = params.particleSize;\n            });\n\n        const particles = new THREE.Points(particlesGeometry, particlesMaterial);\n        particles.position.y = 0.33;\n        scene.add(particles);\n\n        const plane = new THREE.Mesh(\n            new THREE.PlaneBufferGeometry(svgBBox.width * 0.01, svgBBox.height * 0.01, 1, 1),\n            new THREE.MeshBasicMaterial({\n                color: params.mapColor,\n                map: svgTexture,\n            }),\n        );\n        scene.add(plane);\n        gui?.addColor(params, 'mapColor').onChange(() => {\n            plane.material.color = new THREE.Color(params.mapColor);\n        });\n\n        const dummyMat4 = new THREE.Matrix4();\n\n        const controls = new OrbitControls(camera, canvas);\n        controls.enableDamping = true;\n\n        function render() {\n            // const elapsedTime = clock.getElapsedTime();\n\n            onRender();\n            // particlesMaterial.uniforms.uTime.value = elapsedTime;\n            let k = 0;\n\n            for (let i = 0; i < pathsData.length; i++) {\n                pathsData[i].currentPosition =\n                    (pathsData[i].currentPosition + params.particlesSpeed) % pathsData[i].points.length;\n\n                for (let j = 0; j < pathsData[i].pointsToRender; j++) {\n                    const point = pathsData[i].points[(j + pathsData[i].currentPosition) % pathsData[i].points.length];\n                    positions?.set([point.x, point.y, point.z], k * 3);\n\n                    if (opacity) {\n                        opacity[k] = j / (pathsData[i].pointsToRender / params.opacityFactor);\n                    }\n\n                    k++;\n                }\n            }\n\n            particlesGeometry.attributes.position.array = positions;\n            particlesGeometry.applyMatrix4(dummyMat4.makeScale(1, -1, 1));\n            particlesGeometry.attributes.opacity.array = opacity;\n            particlesGeometry.attributes.position.needsUpdate = true;\n            particlesGeometry.attributes.opacity.needsUpdate = true;\n\n            controls.update();\n            renderer.render(scene, camera);\n        }\n\n        function animate() {\n            render();\n            rAF = requestAnimationFrame(animate);\n        }\n\n        function destroy() {\n            if (svg) {\n                svg.style.display = 'block';\n            }\n\n            cancelAnimationFrame(rAF);\n            scene.remove(particles);\n            disposeMesh(particles);\n            renderer.dispose();\n            gui.destroy();\n        }\n\n        animate();\n\n        window.addEventListener('resize', () => {\n            camera.aspect = sizes.width / sizes.height;\n            camera.updateProjectionMatrix();\n            renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n            renderer.setSize(sizes.width, sizes.height);\n        });\n\n        module.hot?.addDisposeHandler(destroy);\n    },\n);\n","export default \"#define GLSLIFY 1\\nuniform float uParticleSize;\\n\\nattribute float opacity;\\n\\nvarying float vOpacity;\\n\\nvoid main() {\\n    vOpacity = opacity;\\n\\n    vec4 mvPosition = modelViewMatrix * vec4(position, 1.);\\n\\n    gl_PointSize = uParticleSize * (-1. / mvPosition.z);\\n    gl_Position = projectionMatrix * mvPosition;\\n}\";","export default \"#define GLSLIFY 1\\nuniform vec3 uColor;\\n\\nvarying float vOpacity;\\n\\nvoid main() {\\n    vec2 uv = vec2(gl_PointCoord.x, 1. - gl_PointCoord.y);\\n    vec2 centerUv = uv - 0.5;\\n\\n    vec4 color = vec4(0.08 / length(centerUv));\\n    color.rgb = min(vec3(10.), color.rgb);\\n    color.rgb *= uColor * 100.;\\n    color *= vOpacity;\\n    color.a = min(1., color.a);\\n\\n    gl_FragColor = vec4(color.rgb, 1.);\\n}\";","export default __webpack_public_path__ + \"img/russia.png\";","import * as THREE from 'three';\nimport Stats from 'three/examples/jsm/libs/stats.module';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport * as dat from 'three/examples/jsm/libs/dat.gui.module';\nimport * as CANNON from 'cannon-es';\n\nexport function createPhysicsWorker() {\n    const canvas = document.querySelector<HTMLCanvasElement>('.js-canvas[data-experiment=\"physics-worker\"]');\n    let rAF: number;\n\n    if (!canvas) return;\n\n    let canvasRect = canvas.getBoundingClientRect();\n\n    const sizes = {\n        width: canvasRect.width,\n        height: canvasRect.height,\n    };\n\n    const gui = new dat.GUI();\n    gui.addFolder('');\n\n    const renderer = new THREE.WebGLRenderer({ canvas });\n    renderer.shadowMap.enabled = true;\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n    renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n    renderer.setSize(sizes.width, sizes.height);\n\n    const camera = new THREE.PerspectiveCamera(45, sizes.width / sizes.height, 0.1, 1000);\n    camera.position.set(-5, 7, 12);\n    const scene = new THREE.Scene();\n\n    const objects: any[] = [];\n    const world = new CANNON.World();\n    world.gravity.set(0, -9.82, 0);\n\n    const defaultMaterial = new CANNON.Material('default');\n    const defaultContactMaterial = new CANNON.ContactMaterial(defaultMaterial, defaultMaterial, {\n        friction: 0.1,\n        restitution: 0.7,\n    });\n\n    world.addContactMaterial(defaultContactMaterial);\n    world.defaultContactMaterial = defaultContactMaterial;\n\n    const plane = new THREE.Mesh(new THREE.PlaneBufferGeometry(25, 25, 25), new THREE.MeshStandardMaterial());\n    plane.receiveShadow = true;\n    // plane.rotation.x = -Math.PI / 2;\n    scene.add(plane);\n\n    const floorShape = new CANNON.Plane();\n    const floorBody = new CANNON.Body({ material: defaultMaterial });\n    floorBody.mass = 0;\n    floorBody.addShape(floorShape);\n    // floorBody.quaternion.setFromAxisAngle(new CANNON.Vec3(-1, 0, 0), Math.PI * 0.5);\n    world.addBody(floorBody);\n\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.35);\n    scene.add(ambientLight);\n\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.5);\n    directionalLight.position.set(0.3, 0.5, 0.5);\n    directionalLight.target = plane;\n    directionalLight.castShadow = true;\n    scene.add(directionalLight);\n    gui.add(directionalLight.position, 'x').min(-10).max(10).step(0.001);\n    gui.add(directionalLight.position, 'y').min(-10).max(10).step(0.001);\n    gui.add(directionalLight.position, 'z').min(-10).max(10).step(0.001);\n\n    const boxGeometry = new THREE.BoxBufferGeometry(1, 1, 1);\n    const boxMaterial = new THREE.MeshStandardMaterial({\n        metalness: 0.5,\n        roughness: 0.45,\n    });\n\n    function createBox(size = 1, position: { x: number; y: number; z: number }) {\n        const mesh = new THREE.Mesh(boxGeometry, boxMaterial);\n        mesh.castShadow = true;\n        mesh.scale.set(size, size, size);\n        mesh.position.x = position.x;\n        mesh.position.y = position.y;\n        mesh.position.z = position.z;\n        scene.add(mesh);\n\n        const shape = new CANNON.Box(new CANNON.Vec3(position.x, position.y, position.z));\n        const body = new CANNON.Body({\n            mass: 1,\n            position: new CANNON.Vec3(position.x, position.y, position.z),\n            shape,\n        });\n\n        world.addBody(body);\n        objects.push({ mesh, body });\n        // body.applyLocalForce(new CANNON.Vec3(150, 0, 0), new CANNON.Vec3(0, 0, 0));\n    }\n\n    createBox(1, { x: 0, y: 3, z: 0 });\n\n    const clock = new THREE.Clock();\n    let oldElapsedTime = 0;\n\n    const controls = new OrbitControls(camera, canvas);\n    controls.enableDamping = true;\n\n    const stats = new Stats();\n    document.body.appendChild(stats.domElement);\n\n    function render() {\n        const elapsedTime = clock.getElapsedTime();\n        const deltaTime = elapsedTime - oldElapsedTime;\n        oldElapsedTime = elapsedTime;\n\n        // Update physics world\n        world.step(1 / 60, deltaTime, 3);\n\n        for (let i = 0; i < objects.length; i++) {\n            objects[i].mesh.position.copy(objects[i].body.position);\n        }\n\n        controls.update();\n        stats.update();\n\n        renderer.render(scene, camera);\n    }\n\n    function animate() {\n        render();\n        rAF = requestAnimationFrame(animate);\n    }\n\n    function destroy() {\n        cancelAnimationFrame(rAF);\n        gui.destroy();\n        boxGeometry.dispose();\n        boxMaterial.dispose();\n        renderer.dispose();\n    }\n\n    animate();\n\n    window.addEventListener('resize', () => {\n        canvasRect = canvas.getBoundingClientRect();\n        sizes.width = canvasRect.width;\n        sizes.height = canvasRect.height;\n        camera.aspect = sizes.width / sizes.height;\n        camera.updateProjectionMatrix();\n        renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n        renderer.setSize(sizes.width, sizes.height);\n    });\n\n    module.hot?.addDisposeHandler(destroy);\n}\n"],"sourceRoot":""}