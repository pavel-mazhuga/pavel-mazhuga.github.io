{"version":3,"sources":["webpack:///./src/js/utils/webgl.ts","webpack:///./src/js/experiments/sliders/fullscreen/main-slider/webgl-slider.ts","webpack:///./src/js/experiments/sliders/fullscreen/main-slider/shaders/vertex.glsl","webpack:///./src/js/experiments/sliders/fullscreen/main-slider/shaders/fragment.glsl","webpack:///./src/js/app.ts","webpack:///./src/js/polyfills.ts","webpack:///./src/js/utils/index.ts","webpack:///./src/js/experiments/sliders/fullscreen/main-slider/index.ts","webpack:///./src/js/experiments/base.ts","webpack:///./src/js/sw.ts","webpack:///./src/js/custom-elements/index.ts","webpack:///./src/js/experiments/particles/particles-basic.ts","webpack:///./src/js/experiments/particles/path-trailing/index.ts","webpack:///./src/js/experiments/particles/path-trailing/shaders/vertex.glsl","webpack:///./src/js/experiments/particles/path-trailing/shaders/fragment.glsl","webpack:///./src/js/experiments/particles/path-trailing/russia.png","webpack:///./src/js/experiments/physics/physics-worker.ts","webpack:///./src/js/experiments/shaders/patterns/index.ts","webpack:///./src/js/experiments/shaders/patterns/shaders/vertex.glsl","webpack:///./src/js/experiments/shaders/patterns/shaders/fragment.glsl","webpack:///./src/js/experiments/shaders/pixelated/index.ts","webpack:///./src/js/experiments/shaders/pixelated/shaders/vertex.glsl","webpack:///./src/js/experiments/shaders/pixelated/shaders/fragment.glsl","webpack:///./src/js/experiments/shaders/pixelated/shaders/postprocessing.glsl","webpack:///./src/js/experiments/sliders/1/index.ts","webpack:///./src/js/experiments/sliders/1/shaders/vertex.glsl","webpack:///./src/js/experiments/sliders/1/shaders/fragment.glsl","webpack:///./src/js/experiments/sliders/1/shaders/postprocessing.glsl","webpack:///./src/js/experiments/sliders/fullscreen/index.ts"],"names":["isWebGLAvailable","canvas","document","createElement","window","WebGLRenderingContext","getContext","err","value","then","direct","Promise","resolve","body","result","e","reject","WebglMainSlider","MainSlider","constructor","container","options","super","this","_onVisibilityChange","bind","isAnimating","isWebglInitialized","_init","aladino","Aladino","density","dpr","Math","min","devicePixelRatio","displacementTexture","texture","PUBLIC_PATH","textures","images","map","img","currentSrc","material","vertex","fragment","uniforms","currentImage","activeIndex","nextImage","nextIndex","disp","dispPower","intensity","textureFactor","x","y","carpet","image","IntersectionObserver","entries","forEach","entry","active","isIntersecting","observe","addEventListener","classList","add","setTextureFactor","index","factor","rect","getBoundingClientRect","rectRatio","width","height","imageRatio","destroy","cancelAnimationFrame","rAF","removeEventListener","observer","disconnect","remove","navigateTo","console","log","gsap","to","duration","ease","onComplete","_onResize","resize","registerCustomElements","createParticlesBasic","createParticlesPathTrailing","createPhysicsWorker","createShadersPatterns","createShadersPixelated","createSliders1","createSlidersFullscreen","sw","register","module","hot","accept","disposeMesh","mesh","geometry","dispose","Array","i","length","defaultOptions","autoplay","delay","paused","navigateToNext","navigateToPrev","_onSwipe","slides","from","querySelectorAll","total","slidesContainer","querySelector","navigationContainer","paginationContainer","_getNextIndex","prevSlideButton","nextSlideButton","paginationButtons","_paginationDelegation","_autoplayTimeout","tl","_hammer","Hammer","get","set","direction","DIRECTION_HORIZONTAL","on","setTimeout","eventName","fn","once","off","resume","clearTimeout","_getPrevIndex","timeline","defaults","clearProps","autoAlpha","fromTo","nextContent","content","matchMedia","matches","name","opacity","label","cloneSlide","kill","event","deltaX","_generateNavigation","arrowTemplate","className","prevSlideLabel","setAttribute","innerHTML","nextSlideLabel","createDocumentFragment","appendChild","_generatePagination","ul","li","button","buttonLabel","push","delegate","parseInt","delegateTarget","dataset","slideIndex","baseExperiment","canvasRect","sizes","stats","Stats","domElement","gui","dat","addFolder","onRender","update","unregister","navigator","serviceWorker","getRegistrations","registrations","registration","f","args","arguments","apply","_module","recover","renderer","THREE","outputEncoding","setPixelRatio","setSize","camera","position","z","scene","particleTexture","load","particlesGeometry","positions","Float32Array","particlesCount","random","sphere","color","size","sizeAttenuation","depthWrite","blending","controls","OrbitControls","enableDamping","animate","render","requestAnimationFrame","aspect","updateProjectionMatrix","addDisposeHandler","svg","Error","svgBBox","getBBox","style","display","svgTexture","params","mapColor","particlesColor","pointsAmountFactor","maxPointsToRender","pointsToRenderFactor","particlesSpeed","opacityFactor","particleSize","max","step","pathsData","maxPoints","initScene","path","pathLength","getTotalLength","pointsAmount","floor","points","pointAt","point","getPointAtLength","normalizedPoint","pointsToRender","currentPosition","reduce","acc","pathData","onFinishChange","particlesMaterial","uParticleSize","getPixelRatio","uTime","uColor","vertexShader","fragmentShader","transparent","addColor","onChange","particles","plane","dummyMat4","k","j","attributes","array","applyMatrix4","makeScale","needsUpdate","shadowMap","enabled","type","objects","world","CANNON","gravity","defaultMaterial","defaultContactMaterial","friction","restitution","addContactMaterial","receiveShadow","floorShape","floorBody","mass","addShape","addBody","ambientLight","directionalLight","target","castShadow","boxGeometry","boxMaterial","metalness","roughness","scale","shape","createBox","clock","oldElapsedTime","elapsedTime","getElapsedTime","deltaTime","copy","defines","PI","sliderAladino","post","postprocessingShader","pixelSize","speed","speed2","cells","carpets","cell","oldProgress","slider","Flickity","accessibility","freeScroll","dragThreshold","freeScrollFriction","prevNextButtons","pageDots","exactCarpet","find","dom","progress","lerp","_isWebGLAvailable","mainSlider","mainSliderContainer","MainSliderConstructor","MainWebglSlider"],"mappings":"0FAAO,SAASA,IACZ,IACI,IAAMC,EAASC,SAASC,cAAc,UACtC,SACIC,OAAOC,wBACNJ,EAAOK,WAAW,WAAYL,EAAOK,WAAW,uBAEvD,MAAOC,GACL,OAAO,GARf,mC,+FCoFO,WAAgBC,EAAOC,EAAMC,GACjC,OAAEA,EACID,EAAOA,EAAKD,GAASA,GAExBA,GAAUA,EAAMC,OAChBD,EAAIG,QAAQC,QAAQJ,IAElBC,EAAOD,EAAMC,KAAKA,GAAQD,GAob3B,WAAeK,EAAMJ,EAAMC,GACjC,GAAIA,EACH,OAAOD,EAAOA,EAAKI,KAAUA,IAE9B,IACC,IAAIC,EAASH,QAAQC,QAAQC,KAC7B,OAAOJ,EAAOK,EAAOL,KAAKA,GAAQK,EACjC,MAAOC,GACR,OAAOJ,QAAQK,OAAOD,IA/gBT,MAAME,UAAwBC,IAWzCC,YAAYC,EAAoBC,GAC5BC,MAAMF,EAAWC,GACjBE,KAAKC,oBAAsBD,KAAKC,oBAAoBC,KAAKF,MAGzDA,KAAKG,aAAc,EAInBH,KAAKI,oBAAqB,EAE1BJ,KAAKK,QAGCA,QACNL,KAAKM,QAAU,IAAIC,IAAQ,CACvBC,QAAS,EACTC,IAAKC,KAAKC,IAAIC,iBAAkB,GAChClC,OAAQsB,KAAKF,QAAQpB,SASzBsB,KAAKa,oBAAsBb,KAAKM,QAAQQ,QAAWC,qCACnDf,KAAKgB,SAAWhB,KAAKiB,OAAOC,KAAKC,GAAQnB,KAAKM,QAAQQ,QAAQK,EAAIC,cAElEpB,KAAKqB,SAAWrB,KAAKM,QAAQe,SAAS,CAClCC,OClDG,gNDmDHC,SEnDG,0qCFoDHC,SAAU,CACNC,aAAczB,KAAKgB,SAAShB,KAAK0B,aACjCC,UAAW3B,KAAKgB,SAAShB,KAAK4B,WAC9BC,KAAM7B,KAAKa,oBACXiB,UAAW,EACXC,UAAW,GACXC,cAAe,CAAEC,EAAG,EAAGC,EAAG,MAIlClC,KAAKmC,OAASnC,KAAKM,QAAQ6B,OAAOnC,KAAKiB,OAAO,GAAI,CAC9CI,SAAUrB,KAAKqB,SACfG,SAAU,CACNY,MAAOpC,KAAKgB,SAAShB,KAAK0B,gBAIjB,IAAIW,sBAAsBC,IACvCA,EAAQC,SAASC,IACbxC,KAAKmC,OAAOM,OAASD,EAAME,qBAI1BC,QAAQ3C,KAAKH,WAEtBlB,SAASiE,iBAAiB,mBAAoB5C,KAAKC,qBAInDD,KAAKH,UAAUgD,UAAUC,IAAI,qBAC7B9C,KAAKI,oBAAqB,EAGpB2C,iBAAiBC,GACvB,IAAM,MAAEZ,GAAUpC,KAAKgB,SAASgC,GAC1BC,EAAS,CAAEhB,EAAG,EAAGC,EAAG,GACpBgB,EAAOlD,KAAKH,UAAUsD,wBACtBC,EAAYF,EAAKG,MAAQH,EAAKI,OAC9BC,EAAanB,EAAMiB,MAAQjB,EAAMkB,OAUvC,OARIF,EAAYG,GACZN,EAAOhB,EAAI,EACXgB,EAAOf,EAAK,EAAIkB,EAAaG,IAE7BN,EAAOhB,EAAK,EAAImB,EAAaG,EAC7BN,EAAOf,EAAI,GAGRe,EAcLO,UAAO,MACTzD,MAAMyD,QADG,4BAAG,OACZ,UAEAC,qBAAqB,EAAKC,KAC1B/E,SAASgF,oBAAoB,mBAAoB,EAAK1D,qBAElD,EAAK2D,WACL,EAAKA,SAASC,aACd,EAAKD,SAAW,MAGpB,EAAKzB,OAAOqB,UACZ,EAAKlD,QAAQkD,UACb,EAAK3D,UAAUgD,UAAUiB,OAAO,qBAChC,EAAK1D,oBAAqB,EAdd,OAiBV2D,WAAWf,GAAD,MACZjD,MAAMgE,WADM,4BAGZ,GAFA,SAAiBf,IAEZ,EAAK7C,YAAa,WAEvB,EAAKA,aAAc,EACnB6D,QAAQC,IAAR,GAEI,EAAKrC,YAAcoB,IACnB,EAAK3B,SAASG,SAASG,UAAY,EAAKX,SAASgC,IAGrD,IAAMC,EAAS,EAAKF,iBAAiBC,GAZT,OAc5BkB,IAAKC,GAAG,EAAK9C,SAASG,SAASM,UAAW,CACtCsC,SAAU,EAAKA,SAAW,IAC1BnF,MAAO,EACPoF,KAAM,aACNC,WAAY,KACR,EAAKjD,SAASG,SAASM,UAAY,EACnC,EAAKT,SAASG,SAASC,aAAe,EAAKT,SAASgC,GACpD,EAAK3B,SAASG,SAASG,UAAY,EAAKX,SAAS,EAAKY,WACtD,EAAKzB,aAAc,KAK3B+D,IAAKC,GAAG,EAAK9C,SAASG,SAASQ,cAAe,CAC1CoC,SAAU,EAAKA,SAAW,IAC1BnC,EAAGgB,EAAOhB,EACVC,EAAGe,EAAOf,EACVmC,KAAM,eA/BkB,OAmChBE,YAAS,MACrBxE,MAAMwE,UADe,4BAAG,OACxB,UACA,EAAKpC,OAAOqC,SAFY,OAKZvE,sBAAmB,c,8JGtJvCwE,cAEAC,cACAC,cAEAC,cAEAC,cACAC,cACAC,cACAC,cAIInG,OAAO+D,iBAAiB,QAAQ,IAAMqC,IAAGC,aAK7C,SAAAC,EAAOC,MAAP,EAAYC,U,4ECxCZ,Q,8ICAA,uCAEO,SAASC,EAAYC,GAAqB,MAE7C,GADA,SAAAA,EAAKC,WAAL,EAAeC,UACXF,EAAKlE,SACL,GAAIkE,EAAKlE,oBAAoBqE,MACzB,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAKlE,SAASuE,SAAUD,EACxCJ,EAAKlE,SAASsE,GAAGF,eAGrBF,EAAKlE,SAASoE,Y,uHCDpBI,EAAoC,CACtCzB,SAAU,EACV0B,UAAU,EACVC,MAAO,IACPC,QAAQ,GAGG,MAAMrG,EAyCjBC,YAAYC,EAAoBC,QAAsD,IAAtDA,MAAsC+F,GAClE7F,KAAKiG,eAAiBjG,KAAKiG,eAAe/F,KAAKF,MAC/CA,KAAKkG,eAAiBlG,KAAKkG,eAAehG,KAAKF,MAC/CA,KAAKuE,UAAYvE,KAAKuE,UAAUrE,KAAKF,MACrCA,KAAKmG,SAAWnG,KAAKmG,SAASjG,KAAKF,MAEnCA,KAAKF,QAAL,iBAAoB+F,EAAmB/F,GAEvCE,KAAKG,aAAc,EACnBH,KAAKH,UAAYA,EACjBG,KAAKoG,OAASV,MAAMW,KAAKxG,EAAUyG,iBAAiB,mBACpDtG,KAAKuG,MAAQvG,KAAKoG,OAAOR,OACzB5F,KAAKwG,gBAAkB3G,EAAU4G,cAAc,6BAC/CzG,KAAK0G,oBAAsB7G,EAAU4G,cAAc,gCACnDzG,KAAK2G,oBAAsB9G,EAAU4G,cAAc,uCACnDzG,KAAKiB,OAASyE,MAAMW,KAAKxG,EAAUyG,iBAAiB,0BACpDtG,KAAK0B,YAAc,EACnB1B,KAAK4B,UAAY5B,KAAK4G,gBACtB5G,KAAK6G,gBAAkB,KACvB7G,KAAK8G,gBAAkB,KACvB9G,KAAK+G,kBAAoB,GACzB/G,KAAKgH,sBAAwB,KAC7BhH,KAAKiH,iBAAmB,KACxBjH,KAAKkH,GAAK,KAeVlH,KAAKmH,QAAU,IAAIC,IAAOvH,GAC1BG,KAAKmH,QAAQE,IAAI,SAASC,IAAI,CAAEC,UAAWH,IAAOI,uBAClDxH,KAAKmH,QAAQM,GAAG,QAASzH,KAAKmG,UAE9BnG,KAAKoG,OAAOpG,KAAK0B,aAAamB,UAAUC,IAAI,aAC5C9C,KAAKoG,OAAOpG,KAAK4B,WAAWiB,UAAUC,IAAI,WAGtC9C,KAAKF,QAAQgG,WAAa9F,KAAKF,QAAQkG,SACvChG,KAAKiH,iBAAmBS,WAAW1H,KAAKiG,eAAgBjG,KAAKF,QAAQiG,QAGzElH,OAAO+D,iBAAiB,SAAU5C,KAAKuE,WAG3CkD,GAAGE,EAAmBC,IAItBC,KAAKF,EAAmBC,IAIxBE,IAAIH,EAAmBC,IAIvBG,SACI/H,KAAKF,QAAQkG,QAAS,EACtBhG,KAAKiH,iBAAmBS,WAAW1H,KAAKiG,eAAgBjG,KAAKF,QAAQiG,OAGzEhC,WAAWf,GAEP,GADAgB,QAAQC,IAAI,OACRjE,KAAK0B,cAAgBsB,IAAShD,KAAKG,YAAvC,CAEIH,KAAKiH,kBACLe,aAAahI,KAAKiH,kBAGtBjH,KAAKG,aAAc,EAcnB,IAAMyB,EAAY5B,KAAK4G,cAAc5G,KAAKiI,cAAcjF,IAC7BhD,KAAK4G,cAAchF,GAE1C5B,KAAK4B,YAAcA,IACnB5B,KAAKoG,OAAOpG,KAAK4B,WAAWiB,UAAUiB,OAAO,WAC7C9D,KAAKoG,OAAOxE,GAAWiB,UAAUC,IAAI,WACrC9C,KAAK4B,UAAYA,GAMrB,IAAMwC,EAAYpE,KAAKF,QAAQsE,SAAW,IAAQ,GAQlDpE,KAAKkH,GAAKhD,IAAKgE,SAAS,CACpBC,SAAU,CAAE/D,YACZE,WAAY,KAORtE,KAAKoG,OAAOpG,KAAK0B,aAAamB,UAAUiB,OAAO,aAC/C9D,KAAKoG,OAAOpG,KAAK4B,WAAWiB,UAAUiB,OAAO,WAE7C9D,KAAK0B,YAAcsB,EACnBhD,KAAK4B,UAAY5B,KAAK4G,gBAEtB5G,KAAKoG,OAAOpG,KAAK0B,aAAamB,UAAUC,IAAI,aAC5C9C,KAAKoG,OAAOpG,KAAK4B,WAAWiB,UAAUC,IAAI,WAE1CoB,IAAKoD,IACD,CACItH,KAAKoG,OAAOpD,IAUhB,CAAEoF,WAAY,QAGlBpI,KAAKG,aAAc,EAMfH,KAAKF,QAAQgG,WACb9F,KAAKiH,iBAAmBS,WAAW1H,KAAKiG,eAAgBjG,KAAKF,QAAQiG,WAKjF/F,KAAKkH,GACA/C,GAAGnE,KAAKiB,OAAOjB,KAAK0B,aAAc,CAC/B2G,UAAW,EACXhE,KAAM,iBAETiE,OACGtI,KAAKiB,OAAOW,GACZ,CACIyG,UAAW,GAEf,CACIpG,EAAG,EACHoG,UAAW,EACXhE,KAAM,cAblB,KAeaD,GAERkE,OAEGC,YAAaC,QACb,CACIvG,EAAG,GAEP,CACIA,EAAGpD,OAAO4J,WAAW,uBAAuBC,QAAU,SAAW,QACjErE,KAAM,gBAzBlB,MA2BaD,EAAW,MAEnBD,GACGoE,YAAaI,KACb,CACIC,QAAS,EACTvE,KAAM,cAjClB,KAmCaD,GAERkE,OACGC,YAAaM,MACb,CACI5G,EAAG,OACHoG,UAAW,GAEf,CACIpG,EAAG,EACHoG,UAAW,EACXhE,KAAM,cA9ClB,MAgDaD,EAAW,MAEnBkE,OACGQ,WACA,CACI7G,EAAG,QAEP,CACIA,EAAG,EACHoC,KAAM,gBAzDlB,MA2DaD,EAAW,OAI5B8B,iBACIlG,KAAK+D,WAAW/D,KAAKiI,iBAGzBhC,iBACIjG,KAAK+D,WAAW/D,KAAK4G,iBAGzBpD,UAAU,QACFxD,KAAKkH,KACLlH,KAAKkH,GAAG6B,OACR/I,KAAKkH,GAAK,MAEdlH,KAAKmH,QAAQ3D,UACb3E,OAAO8E,oBAAoB,SAAU3D,KAAKuE,WAC1C,SAAAvE,KAAK6G,kBAAL,EAAsBlD,oBAAoB,QAAS3D,KAAKkG,gBACxD,SAAAlG,KAAK8G,kBAAL,EAAsBnD,oBAAoB,QAAS3D,KAAKiG,gBAKpDjG,KAAKgH,uBACLhH,KAAKgH,sBAAsBxD,UAG3BxD,KAAKiH,kBACLe,aAAahI,KAAKiH,kBAIhB1C,aAIA4B,SAAS6C,GACfhF,QAAQC,IAAI,SACR+E,EAAMC,OAAS,EACfjJ,KAAKiG,iBAELjG,KAAKkG,iBAIHgD,sBACN,GAAKlJ,KAAK0G,oBAAV,CAEA,IAAMyC,EAAgB,8TAKtBnJ,KAAK6G,gBAAkBlI,SAASC,cAAc,UAC9CoB,KAAK6G,gBAAgBuC,UAAY,kEACjC,IAAMC,EAAiB,mBACvBrJ,KAAK6G,gBAAgByC,aAAa,aAAcD,GAChDrJ,KAAK6G,gBAAgByC,aAAa,QAASD,GAC3CrJ,KAAK6G,gBAAgB0C,UAAYJ,EACjCnJ,KAAK6G,gBAAgBjE,iBAAiB,QAAS5C,KAAKkG,gBAEpDlG,KAAK8G,gBAAkBnI,SAASC,cAAc,UAC9CoB,KAAK8G,gBAAgBsC,UAAY,kEACjC,IAAMI,EAAiB,kBACvBxJ,KAAK8G,gBAAgBwC,aAAa,aAAcE,GAChDxJ,KAAK8G,gBAAgBwC,aAAa,QAASE,GAC3CxJ,KAAK8G,gBAAgByC,UAAYJ,EACjCnJ,KAAK8G,gBAAgBlE,iBAAiB,QAAS5C,KAAKiG,gBAEpD,IAAM1E,EAAW5C,SAAS8K,yBAC1BlI,EAASmI,YAAY1J,KAAK6G,iBAC1BtF,EAASmI,YAAY1J,KAAK8G,iBAE1B9G,KAAK0G,oBAAoBgD,YAAYnI,IAG/BoI,sBACN,GAAK3J,KAAK2G,oBAAV,CAQA3G,KAAK+G,kBAAoB,GACzB,IAAM6C,EAAKjL,SAASC,cAAc,MAClCgL,EAAGR,UAAY,4CAEf,IAAK,IAAIzD,EAAI,EAAGA,EAAI3F,KAAKuG,MAAOZ,IAAK,CACjC,IAAMkE,EAAKlL,SAASC,cAAc,MAClCiL,EAAGT,UAAY,oCACfQ,EAAGF,YAAYG,GACf,IAAMC,EAASnL,SAASC,cAAc,UACtCkL,EAAOV,UAAY,2DACnB,IAAMW,EAAc,qBAAoBpE,EAAI,GAC5CmE,EAAOR,aAAa,aAAcS,GAClCD,EAAOR,aAAa,QAASS,GAC7BD,EAAOR,aAAa,mBAApB,GAA2C3D,GACvC3F,KAAK0B,cAAgBiE,GACrBmE,EAAOjH,UAAUC,IAAI,aAEzB9C,KAAK+G,kBAAkBiD,KAAKF,GAC5BD,EAAGH,YAAYI,GACfA,EAAOP,WAzBY,wRA4BvBvJ,KAAK2G,oBAAoB+C,YAAYE,GAErC5J,KAAKgH,sBAAwBiD,IACzBjK,KAAK2G,oBACL,iCACA,SACCqC,IACGhJ,KAAK+D,WAAWmG,SAASlB,EAAMmB,eAAeC,QAAQC,WAAY,SAKpEpC,cAAcjF,GACpB,YAD8C,IAA1BA,MAAQhD,KAAK0B,cACzBsB,EAAQ,EAAIhD,KAAKuG,OAASvG,KAAKuG,MAGjCK,cAAc5D,GACpB,YAD8C,IAA1BA,MAAQhD,KAAK0B,cACzBsB,EAAQ,GAAKhD,KAAKuG,S,+BC/YlC,sDAUO,SAAS+D,EAAe3B,EAAcf,GACzC,MAAO,KACH,IAAMlJ,EAASC,SAAS8H,cAAT,+BAAyEkC,EAAzE,MAEf,GAAKjK,EAAL,CAIA,IAAI6L,EAAa7L,EAAOyE,wBAElBqH,EAAQ,CACVnH,MAAOkH,EAAWlH,MAClBC,OAAQiH,EAAWjH,QAGjBmH,EAAQ,IAAIC,IAClB/L,SAASW,KAAKoK,YAAYe,EAAME,YAEhC,IAAMC,EAAM,IAAIC,IAChBD,EAAIE,YAMJlD,EAAG,CAAE4C,QAAOI,MAAKlM,SAAQqM,SAJzB,WACIN,EAAMO,YAKVnM,OAAO+D,iBAAiB,UAAU,KAC9B2H,EAAa7L,EAAOyE,wBACpBqH,EAAMnH,MAAQkH,EAAWlH,MACzBmH,EAAMlH,OAASiH,EAAWjH,c,gCCwjB/B,c,IArlBQ2H,E,cAAa,wBACpB,kBAAmBC,UADC,OAyELjM,EAvEaiM,UAAUC,cAAcC,mBAuE9BlM,EAzEF,SAEdmM,GACNA,EAAc9I,SAAS+I,IACnBA,EAAaL,iBAsEpB9L,EACID,EAAOA,EAAKD,GAASA,GAExBA,GAAUA,EAAMC,OACpBD,EAAQG,QAAQC,QAAQJ,IAElBC,EAAOD,EAAMC,KAAKA,GAAQD,GAP3B,IAAgBA,EAAOC,EAAMC,QAsd7B,WAAwBG,GAC9B,IAAIC,EAASD,IACb,GAAIC,GAAUA,EAAOL,KACpB,OAAOK,EAAOL,KAAP,GAveF,WAAgBqM,GACtB,OAAO,WACN,IAAK,IAAIC,EAAO,GAAI7F,EAAI,EAAGA,EAAI8F,UAAU7F,OAAQD,IAChD6F,EAAK7F,GAAK8F,UAAU9F,GAErB,IACC,OAAOvG,QAAQC,QAAQkM,EAAEG,MAAM,KAAMF,IACpC,MAAMhM,GACP,OAAOJ,QAAQK,OAAOD,KA1DzB,IAAMmM,EAAU,CAAEzG,S,cAnBQ,wBAClB,kBAAmBgG,UADD,OA0GnB,SAA0BjM,GAChC,GAAIA,GAASA,EAAMC,KAClB,OAAOD,EAAMC,KAAN,GA5GiB,CAijBnB,SAAgBI,EAAMsM,GAC5B,IACC,IAAIrM,EAASD,IACZ,MAAME,GACP,OAAOoM,EAAQpM,GAEhB,GAAID,GAAUA,EAAOL,KACpB,OAAOK,EAAOL,UAAK,EAAQ0M,GAE5B,OAAOrM,EA1jBkB,aAEd,OA4FL,SAAuBN,EAAOE,GACpC,IAAKA,EACJ,OAAOF,GAASA,EAAMC,KAAOD,EAAMC,KAAN,GAAqBE,QAAQC,UA9FhD,CACM6L,UAAUC,cAAcjG,SAAYnE,0BAH5B,SAIT/B,GACLgF,QAAQC,IAAI,2BAA4BjF,aAcxBiM,cAEbU,O,gCCpBR,SAASlH,KAFhB,mC,iICIaC,EAAuB4F,YAAe,mBAAoB,IAAqC,MACpG5G,GAD+D,OAAEhF,EAAF,MAAU8L,EAAV,SAAiBO,EAAjB,IAA2BH,GAAU,EAElGiB,EAAW,IAAIC,IAAoB,CAAEpN,WAC3CmN,EAASE,eAAiBD,IAC1BD,EAASG,cAActL,KAAKC,IAAI,EAAG9B,OAAO+B,mBAC1CiL,EAASI,QAAQzB,EAAMnH,MAAOmH,EAAMlH,QAEpC,IAAM4I,EAAS,IAAIJ,IAAwB,GAAItB,EAAMnH,MAAQmH,EAAMlH,OAAQ,GAAK,KAChF4I,EAAOC,SAASC,EAAI,EAWpB,IATA,IAAMC,EAAQ,IAAIP,IAGZQ,GAFgB,IAAIR,KAEYS,KAAQxL,wBAExCyL,EAAoB,IAAIV,IAExBW,EAAY,IAAIC,aAAaC,KAE1BhH,EAAI,EAAGA,EAAIgH,IAAoBhH,IACpC8G,EAAU9G,GAA6B,GAAvBjF,KAAKkM,SAAW,IAGpCJ,EAAkBlD,aAAa,WAAY,IAAIwC,IAAsBW,EAAW,IAEhF,IAAMI,EAAS,IAAIf,IACfU,EACA,IAAIV,IAAqB,CACrBgB,MAAO,SACP5L,IAAKoL,EACLS,KAAM,IACNC,iBAAiB,EACjBC,YAAY,EACZC,SAAUpB,OAGlBO,EAAMvJ,IAAI+J,GAEV,IAAMM,EAAW,IAAIC,IAAclB,EAAQxN,GAC3CyO,EAASE,eAAgB,EAQzB,SAASC,IALLvC,IACAoC,EAASnC,SACTa,EAAS0B,OAAOlB,EAAOH,GAKvBxI,EAAM8J,sBAAsBF,GAQhCA,GAEAzO,OAAO+D,iBAAiB,UAAU,KAC9BsJ,EAAOuB,OAASjD,EAAMnH,MAAQmH,EAAMlH,OACpC4I,EAAOwB,yBACP7B,EAASG,cAActL,KAAKC,IAAI,EAAG9B,OAAO+B,mBAC1CiL,EAASI,QAAQzB,EAAMnH,MAAOmH,EAAMlH,WAGxC,SAAA6B,EAAOC,MAAP,EAAYuI,mBAdZ,WACIlK,qBAAqBC,GACrBmI,EAASpG,kB,6LClDJd,EAA8B2F,YACvC,2BACC,IAAqC,MAC9B5G,GADP,OAAEhF,EAAF,MAAU8L,EAAV,SAAiBO,EAAjB,IAA2BH,GAAU,EAE5BiB,EAAW,IAAIC,IAAoB,CAAEpN,WAC3CmN,EAASE,eAAiBD,IAC1BD,EAASG,cAActL,KAAKC,IAAI,EAAG9B,OAAO+B,mBAC1CiL,EAASI,QAAQzB,EAAMnH,MAAOmH,EAAMlH,QAEpC,IAAM4I,EAAS,IAAIJ,IAAwB,GAAItB,EAAMnH,MAAQmH,EAAMlH,OAAQ,GAAK,KAChF4I,EAAOC,SAASC,EAAI,GAEpB,IAAMC,EAAQ,IAAIP,IAGZ8B,EAAMjP,SAAS8H,cAA0B,qBAE/C,IAAKmH,EACD,MAAM,IAAIC,MAAM,iBAGpB,IAAMC,EAAUF,EAAIG,UACpBH,EAAII,MAAMC,QAAU,OACpB,IAAMC,GAAa,IAAIpC,KAAsBS,KAAKzL,KAE5CqN,EAAS,CACXC,SAAU,OAEVC,eAAgB,QAEhBC,mBAAoB,GAEpBC,kBAAmB,IAEnBC,qBAAsB,GACtBC,eAAgB,EAEhBC,cAAe,GAEfC,aAAc,IAEf,MAAH/D,KAAK9H,IAAIqL,EAAQ,kBAAkBxN,IAAI,GAAGiO,IAAI,IAAIC,KAAK,GACpD,MAAHjE,KAAK9H,IAAIqL,EAAQ,iBAAiBxN,IAAI,GAAGiO,IAAI,GAAGC,KAAK,MAErD,IAEIpC,EACA7D,EAHAkG,EAAmB,GACnBC,EAAY,EAIVvC,EAAoB,IAAIV,IAE9B,SAASkD,IACLF,EAAYpJ,MAAMW,KAAKuH,EAAKtH,iBAAiC,UAAUpF,KAAK+N,IAKxE,IAJA,IAAMC,EAAaD,EAAKE,iBAClBC,EAAe1O,KAAK2O,MAAMH,EAAaf,EAAOG,oBAC9CgB,EAA0B,GAEvB3J,EAAI,EAAGA,EAAIyJ,EAAczJ,IAAK,CACnC,IAAM4J,EAAWL,EAAaE,EAAgBzJ,EACxC6J,EAAQP,EAAKQ,iBAAiBF,GAC9BG,EAAkB,CACpBzN,EAAmC,KAA/BuN,EAAMvN,EAAI6L,EAAQzK,MAAQ,GAA4B,IAAhB3C,KAAKkM,SAC/C1K,EAAoC,KAAhCsN,EAAMtN,EAAI4L,EAAQxK,OAAS,GAA4B,IAAhB5C,KAAKkM,SAChDR,EAAG,GAEPkD,EAAOtF,KAAK,IAAI8B,IAAc4D,EAAgBzN,EAAGyN,EAAgBxN,EAAGwN,EAAgBtD,IAGxF,MAAO,CACHxG,OAAQsJ,EACRI,SACAK,eAAgBjP,KAAKC,IACjBwN,EAAOI,kBACP7N,KAAK2O,MAAMD,EAAejB,EAAOK,uBAErCoB,gBAAiB,MAGzBb,EAAYD,EAAUe,QAAO,CAACC,EAAKC,IAAaD,EAAMC,EAASJ,gBAAgB,GAE/ElD,EAAY,IAAIC,aAAyB,EAAZqC,GAC7BnG,EAAU,IAAI8D,aAAaqC,GAE3B,IAAK,IAAIpJ,EAAI,EAAGA,EAAgB,EAAZoJ,EAAepJ,IAC/B8G,EAAU9G,GAAK,EAGnB,IAAK,IAAIA,EAAI,EAAGA,EAAIoJ,EAAWpJ,IAC3BiD,EAAQjD,GAAKjF,KAAKkM,SAAWuB,EAAOO,cAGxClC,EAAkBlD,aAAa,WAAY,IAAIwC,IAAsBW,EAAW,IAChFD,EAAkBlD,aAAa,UAAW,IAAIwC,IAAsBlD,EAAS,IAGjFoG,IACG,MAAHpE,KAAK9H,IAAIqL,EAAQ,wBAAwBxN,IAAI,GAAGiO,IAAI,GAAGC,KAAK,KAAMmB,eAAehB,GAC9E,MAAHpE,KAAK9H,IAAIqL,EAAQ,sBAAsBxN,IAAI,GAAGiO,IAAI,GAAGC,KAAK,KAAMmB,eAAehB,GAC5E,MAAHpE,KAAK9H,IAAIqL,EAAQ,qBAAqBxN,IAAI,GAAGiO,IAAI,KAAKC,KAAK,GAAGmB,eAAehB,GAE7E,IAAMiB,EAAoB,IAAInE,IAAqB,CAC/CtK,SAAU,CACN0O,cAAe,CAAEjR,MAAOkP,EAAOQ,aAAe9C,EAASsE,iBACvDC,MAAO,CAAEnR,MAAO,GAChBoR,OAAQ,CAAEpR,MAAO,IAAI6M,IAAYqC,EAAOE,kBAE5CiC,iBACAC,mBACAC,aAAa,EACbvD,YAAY,EACZC,SAAUpB,MAEX,MAAHlB,KAAK6F,SAAStC,EAAQ,kBAAkBuC,UAAS,KAC7CT,EAAkBzO,SAAS6O,OAAOpR,MAAQ,IAAI6M,IAAYqC,EAAOE,mBAElE,MAAHzD,KAAK9H,IAAIqL,EAAQ,gBACZxN,IAAI,GACJiO,IAAI,KACJC,KAAK,KACL6B,UAAS,KACNT,EAAkBzO,SAAS0O,cAAcjR,MAAQkP,EAAOQ,gBAGhE,IAAMgC,EAAY,IAAI7E,IAAaU,EAAmByD,GACtDU,EAAUxE,SAASjK,EAAI,IACvBmK,EAAMvJ,IAAI6N,GAEV,IAAMC,EAAQ,IAAI9E,IACd,IAAIA,IAA0C,IAAhBgC,EAAQzK,MAA+B,IAAjByK,EAAQxK,OAAe,EAAG,GAC9E,IAAIwI,IAAwB,CACxBgB,MAAOqB,EAAOC,SACdlN,IAAKgN,KAGb7B,EAAMvJ,IAAI8N,GACP,MAAHhG,KAAK6F,SAAStC,EAAQ,YAAYuC,UAAS,KACvCE,EAAMvP,SAASyL,MAAQ,IAAIhB,IAAYqC,EAAOC,aAGlD,IAAMyC,EAAY,IAAI/E,IAEhBqB,EAAW,IAAIC,IAAclB,EAAQxN,GAC3CyO,EAASE,eAAgB,EAmCzB,SAASC,KAjCT,WAGIvC,IAIA,IAFA,IAAI+F,EAAI,EAECnL,EAAI,EAAGA,EAAImJ,EAAUlJ,OAAQD,IAAK,CACvCmJ,EAAUnJ,GAAGiK,iBACRd,EAAUnJ,GAAGiK,gBAAkBzB,EAAOM,gBAAkBK,EAAUnJ,GAAG2J,OAAO1J,OAEjF,IAAK,IAAImL,EAAI,EAAGA,EAAIjC,EAAUnJ,GAAGgK,eAAgBoB,IAAK,OAC5CvB,EAAQV,EAAUnJ,GAAG2J,QAAQyB,EAAIjC,EAAUnJ,GAAGiK,iBAAmBd,EAAUnJ,GAAG2J,OAAO1J,QAClF,OAAT,EAAA6G,IAAA,EAAWnF,IAAI,CAACkI,EAAMvN,EAAGuN,EAAMtN,EAAGsN,EAAMpD,GAAQ,EAAJ0E,GAExClI,IACAA,EAAQkI,GAAKC,GAAKjC,EAAUnJ,GAAGgK,eAAiBxB,EAAOO,gBAG3DoC,KAIRtE,EAAkBwE,WAAW7E,SAAS8E,MAAQxE,EAC9CD,EAAkB0E,aAAaL,EAAUM,UAAU,GAAI,EAAG,IAC1D3E,EAAkBwE,WAAWpI,QAAQqI,MAAQrI,EAC7C4D,EAAkBwE,WAAW7E,SAASiF,aAAc,EACpD5E,EAAkBwE,WAAWpI,QAAQwI,aAAc,EAEnDjE,EAASnC,SACTa,EAAS0B,OAAOlB,EAAOH,GAIvBqB,GACA7J,EAAM8J,sBAAsBF,GAehCA,GAEAzO,OAAO+D,iBAAiB,UAAU,KAC9BsJ,EAAOuB,OAASjD,EAAMnH,MAAQmH,EAAMlH,OACpC4I,EAAOwB,yBACP7B,EAASG,cAActL,KAAKC,IAAI,EAAG9B,OAAO+B,mBAC1CiL,EAASI,QAAQzB,EAAMnH,MAAOmH,EAAMlH,WAGxC,SAAA6B,EAAOC,MAAP,EAAYuI,mBArBZ,WACQC,IACAA,EAAII,MAAMC,QAAU,SAGxBxK,qBAAqBC,GACrB2I,EAAMvI,OAAO6M,GACbrL,YAAYqL,GACZ9E,EAASpG,UACTmF,EAAIpH,kB,qDCvMD,wU,gCCAA,6Z,gCCAA,QAA0B,kB,iCCAzC,wFAMO,SAASoB,IAAsB,MAE9BlB,EADEhF,EAASC,SAAS8H,cAAiC,gDAGzD,GAAK/H,EAAL,CAEA,IAAI6L,EAAa7L,EAAOyE,wBAElBqH,EAAQ,CACVnH,MAAOkH,EAAWlH,MAClBC,OAAQiH,EAAWjH,QAGjBsH,EAAM,IAAIC,IAChBD,EAAIE,UAAU,IAEd,IAAMe,EAAW,IAAIC,IAAoB,CAAEpN,WAC3CmN,EAASwF,UAAUC,SAAU,EAC7BzF,EAASwF,UAAUE,KAAOzF,IAC1BD,EAASG,cAActL,KAAKC,IAAI,EAAG9B,OAAO+B,mBAC1CiL,EAASI,QAAQzB,EAAMnH,MAAOmH,EAAMlH,QAEpC,IAAM4I,EAAS,IAAIJ,IAAwB,GAAItB,EAAMnH,MAAQmH,EAAMlH,OAAQ,GAAK,KAChF4I,EAAOC,SAAS7E,KAAK,EAAG,EAAG,IAC3B,IAAM+E,EAAQ,IAAIP,IAEZ0F,EAAiB,GACjBC,EAAQ,IAAIC,IAClBD,EAAME,QAAQrK,IAAI,GAAI,KAAM,GAE5B,IAAMsK,EAAkB,IAAIF,IAAgB,WACtCG,EAAyB,IAAIH,IAAuBE,EAAiBA,EAAiB,CACxFE,SAAU,GACVC,YAAa,KAGjBN,EAAMO,mBAAmBH,GACzBJ,EAAMI,uBAAyBA,EAE/B,IAAMjB,EAAQ,IAAI9E,IAAW,IAAIA,IAA0B,GAAI,GAAI,IAAK,IAAIA,KAC5E8E,EAAMqB,eAAgB,EAEtB5F,EAAMvJ,IAAI8N,GAEV,IAAMsB,EAAa,IAAIR,IACjBS,EAAY,IAAIT,IAAY,CAAErQ,SAAUuQ,IAC9CO,EAAUC,KAAO,EACjBD,EAAUE,SAASH,GAEnBT,EAAMa,QAAQH,GAEd,IAAMI,EAAe,IAAIzG,IAAmB,SAAU,KACtDO,EAAMvJ,IAAIyP,GAEV,IAAMC,EAAmB,IAAI1G,IAAuB,SAAU,IAC9D0G,EAAiBrG,SAAS7E,IAAI,GAAK,GAAK,IACxCkL,EAAiBC,OAAS7B,EAC1B4B,EAAiBE,YAAa,EAC9BrG,EAAMvJ,IAAI0P,GACV5H,EAAI9H,IAAI0P,EAAiBrG,SAAU,KAAKxL,KAAK,IAAIiO,IAAI,IAAIC,KAAK,MAC9DjE,EAAI9H,IAAI0P,EAAiBrG,SAAU,KAAKxL,KAAK,IAAIiO,IAAI,IAAIC,KAAK,MAC9DjE,EAAI9H,IAAI0P,EAAiBrG,SAAU,KAAKxL,KAAK,IAAIiO,IAAI,IAAIC,KAAK,MAE9D,IAAM8D,EAAc,IAAI7G,IAAwB,EAAG,EAAG,GAChD8G,EAAc,IAAI9G,IAA2B,CAC/C+G,UAAW,GACXC,UAAW,OAGf,SAAmB/F,EAAUZ,QAA+C,IAAzDY,MAAO,GACtB,IAAMxH,EAAO,IAAIuG,IAAW6G,EAAaC,GACzCrN,EAAKmN,YAAa,EAClBnN,EAAKwN,MAAMzL,IAAIyF,EAAMA,EAAMA,GAC3BxH,EAAK4G,SAASlK,EAAIkK,EAASlK,EAC3BsD,EAAK4G,SAASjK,EAAIiK,EAASjK,EAC3BqD,EAAK4G,SAASC,EAAID,EAASC,EAC3BC,EAAMvJ,IAAIyC,GAEV,IAAMyN,EAAQ,IAAItB,IAAW,IAAIA,IAAYvF,EAASlK,EAAGkK,EAASjK,EAAGiK,EAASC,IACxE9M,EAAO,IAAIoS,IAAY,CACzBU,KAAM,EACNjG,SAAU,IAAIuF,IAAYvF,EAASlK,EAAGkK,EAASjK,EAAGiK,EAASC,GAC3D4G,UAGJvB,EAAMa,QAAQhT,GACdkS,EAAQxH,KAAK,CAAEzE,OAAMjG,SAIzB2T,CAAU,EAAG,CAAEhR,EAAG,EAAGC,EAAG,EAAGkK,EAAG,IAE9B,IAAM8G,EAAQ,IAAIpH,IACdqH,EAAiB,EAEfhG,EAAW,IAAIC,IAAclB,EAAQxN,GAC3CyO,EAASE,eAAgB,EAEzB,IAAM5C,EAAQ,IAAIC,IAClB/L,SAASW,KAAKoK,YAAYe,EAAME,YAoBhC,SAAS2C,KAlBT,WACI,IAAM8F,EAAcF,EAAMG,iBACpBC,EAAYF,EAAcD,EAChCA,EAAiBC,EAGjB3B,EAAM5C,KAAK,EAAI,GAAIyE,EAAW,GAE9B,IAAK,IAAI3N,EAAI,EAAGA,EAAI6L,EAAQ5L,OAAQD,IAChC6L,EAAQ7L,GAAGJ,KAAK4G,SAASoH,KAAK/B,EAAQ7L,GAAGrG,KAAK6M,UAGlDgB,EAASnC,SACTP,EAAMO,SAENa,EAAS0B,OAAOlB,EAAOH,GAIvBqB,GACA7J,EAAM8J,sBAAsBF,GAWhCA,GAEAzO,OAAO+D,iBAAiB,UAAU,KAC9B2H,EAAa7L,EAAOyE,wBACpBqH,EAAMnH,MAAQkH,EAAWlH,MACzBmH,EAAMlH,OAASiH,EAAWjH,OAC1B4I,EAAOuB,OAASjD,EAAMnH,MAAQmH,EAAMlH,OACpC4I,EAAOwB,yBACP7B,EAASG,cAActL,KAAKC,IAAI,EAAG9B,OAAO+B,mBAC1CiL,EAASI,QAAQzB,EAAMnH,MAAOmH,EAAMlH,WAGxC,SAAA6B,EAAOC,MAAP,EAAYuI,mBApBZ,WACIlK,qBAAqBC,GACrBkH,EAAIpH,UACJmP,EAAYlN,UACZmN,EAAYnN,UACZoG,EAASpG,iB,sDCvIjB,gGAOaZ,EAAwByF,YAAe,oBAAqB,IAAqC,MACtG5G,GADiE,OAAEhF,EAAF,MAAU8L,EAAV,SAAiBO,EAAjB,IAA2BH,GAAU,EAEpGiB,EAAW,IAAIC,IAAoB,CAAEpN,WAC3CmN,EAASE,eAAiBD,IAC1BD,EAASG,cAActL,KAAKC,IAAI,EAAG9B,OAAO+B,mBAC1CiL,EAASI,QAAQzB,EAAMnH,MAAOmH,EAAMlH,QAEpC,IAAM4I,EAAS,IAAIJ,IAAwB,GAAItB,EAAMnH,MAAQmH,EAAMlH,OAAQ,GAAK,KAChF4I,EAAOC,SAASC,EAAI,GAEpB,IAAMC,EAAQ,IAAIP,IACZoH,EAAQ,IAAIpH,IAmBZtG,EAAW,IAAIsG,IAA0B,EAAG,EAAG,IAAK,KAEpDzK,EAAW,IAAIyK,IAAqB,CACtC0H,QAAS,CACLC,GAAI/S,KAAK+S,IAEbjS,SAAU,CACN4O,MAAO,CAAEnR,MAAO,IAEpBqR,iBACAC,mBACAC,aAAa,IAGXjL,EAAO,IAAIuG,IAAWtG,EAAUnE,GACtCkE,EAAK4G,SAASjK,EAAI,IAClBmK,EAAMvJ,IAAIyC,GAEV,IAAM4H,EAAW,IAAIC,IAAclB,EAAQxN,GAC3CyO,EAASE,eAAgB,EAYzB,SAASC,IAVT,IACU8F,IAAcF,EAAMG,iBAE1BtI,IACA1J,EAASG,SAAS4O,MAAMnR,MAAQmU,EAEhCjG,EAASnC,SACTa,EAAS0B,OAAOlB,EAAOH,GAKvBxI,EAAM8J,sBAAsBF,GAWhCA,GAEAzO,OAAO+D,iBAAiB,UAAU,KAC9BsJ,EAAOuB,OAASjD,EAAMnH,MAAQmH,EAAMlH,OACpC4I,EAAOwB,yBACP7B,EAASG,cAActL,KAAKC,IAAI,EAAG9B,OAAO+B,mBAC1CiL,EAASI,QAAQzB,EAAMnH,MAAOmH,EAAMlH,WAGxC,SAAA6B,EAAOC,MAAP,EAAYuI,mBAjBZ,WACIlK,qBAAqBC,GACrB2I,EAAMvI,OAAOyB,GACbD,YAAYC,GACZsG,EAASpG,UACTmF,EAAIpH,kB,qDC9EG,qvH,gCCAA,8P,iCCAf,gGAOasB,EAAyBwF,YAAe,qBAAsB,IAAqC,MACxG5G,GADmE,OAAEhF,EAAF,MAAU8L,EAAV,SAAiBO,EAAjB,IAA2BH,GAAU,EAEtG8I,EAAgB,IAAInT,IAAQ,CAC9BC,QAAS,EACTC,IAAKC,KAAKC,IAAIC,iBAAkB,GAChClC,SACAiV,KAAM,CACFpS,SAAUqS,IACVpS,SAAU,CACNqS,UAAW,OAKjBxS,EAAWqS,EAAcrS,SAAS,CACpCC,OAAQgP,IACR/O,SAAUgP,MAGRpP,EAAMxC,SAAS8H,cAAc,OAE7BtE,EAASuR,EAAcvR,OAAOhB,EAAK,CACrCE,WACAG,SAAU,CACNY,MAAOsR,EAAc5S,QAAQK,EAAIC,gBAUzC,SAASkM,IALDoG,EAAcC,KAAKnS,SAASqS,UAAY,IACxCH,EAAcC,KAAKnS,SAASqS,WAAa,IAM7CnQ,EAAM8J,sBAAsBF,GAUhCA,GAEAzO,OAAO+D,iBAAiB,UAAU,KAC9BT,EAAOqC,YAGX,SAAAW,EAAOC,MAAP,EAAYuI,mBAbZ,WACIlK,qBAAqBC,GACrBvB,EAAOqB,UACPkQ,EAAclQ,UACdoH,EAAIpH,kB,qDClDG,klB,gCCAA,gnB,gCCAA,02D,0LCSFuB,EAAiBuF,YAAe,aAAc,IAAqC,MACxF5G,GADmD,OAAEhF,EAAF,MAAU8L,EAAV,SAAiBO,EAAjB,IAA2BH,GAAU,EAEtF8I,EAAgB,IAAInT,IAAQ,CAC9BC,QAAS,GACTC,IAAKC,KAAKC,IAAIC,iBAAkB,GAChClC,SACAiV,KAAM,CACFpS,SAAUqS,IACVpS,SAAU,CACNsS,MAAO,MAKbzS,EAAWqS,EAAcrS,SAAS,CACpCC,OAAQgP,IACR/O,SAAUgP,IACV/O,SAAU,CACNsS,MAAO,EACPC,OAAQ,KAIVC,EAAQ,IAAIrV,SAAS2H,iBAAiB,eACtC2N,EAAU,GAChBD,EAAMzR,SAAS2R,IACX,IAAM/R,EAASuR,EAAcvR,OAAO+R,EAAM,CACtC7S,WACAG,SAAU,CACNY,MAAOsR,EAAc5S,QAAQoT,EAAK9S,eAI1C6S,EAAQjK,KAAK7H,MAGjB,IAAIgS,EAAc,EACdL,EAAQ,EAGNM,EAAS,IAAIC,IAAS1V,SAAS8H,cAAc,aAAe,CAC9D6N,eAAe,EACfC,WAJe,KAKfC,cAA4B,EAE5BC,mBAAoB,IACpBC,iBAAiB,EACjBC,UAAU,IAIR/Q,EAAW,IAAIvB,sBAAsBC,IACvCA,EAAQC,SAASC,IACb,IAAMoS,EAAcX,EAAQY,MAAM1S,GAAWK,EAAMiQ,SAAWtQ,EAAO2S,MACjEF,IACAA,EAAYnS,OAASD,EAAME,sBAKvCsR,EAAMzR,SAAS2R,IACXtQ,EAASjB,QAAQuR,MAGrBE,EAAO3M,GAAG,UAAWsN,IAGjBd,EAAQ1R,SAASJ,IACbA,EAAOqC,YAGXsP,EAAQK,EAAcY,EACtBZ,EAAcY,KASlB,SAASzH,IALLjM,EAASG,SAASsS,MAAQkB,IAAK3T,EAASG,SAASsS,MAAOA,EAAO,IAC/DzS,EAASG,SAASuS,OAASiB,IAAK3T,EAASG,SAASuS,OAAQD,EAAO,IACjEJ,EAAcC,KAAKnS,SAASsS,MAAQkB,IAAKtB,EAAcC,KAAKnS,SAASsS,MAAOA,EAAO,IAKnFpQ,EAAM8J,sBAAsBF,GAchCA,GAEAzO,OAAO+D,iBAAiB,UAAU,KAC9BqR,EAAQ1R,SAASJ,IACbA,EAAOqC,eAIf,SAAAW,EAAOC,MAAP,EAAYuI,mBAnBZ,WACIlK,qBAAqBC,GACrBuQ,EAAQ1R,SAASJ,IACbA,EAAOqB,aAEJ,uBAAPyQ,EAAU,GACVP,EAAclQ,UACd4Q,EAAO5Q,UACPoH,EAAIpH,kB,qDCvGG,ymB,gCCAA,gnB,gCCAA,63B,iCCAf,0FAOMyR,EAAoBxW,cAEbuG,EAA0BsF,YAAe,sBAAuB,IAAqC,MAE1G4K,GAFqE,OAAExW,EAAF,MAAU8L,EAAV,SAAiBO,EAAjB,IAA2BH,GAAU,EACxGuK,EAAsBxW,SAAS8H,cAAc,mBAEnD,GAAI0O,EAAqB,CACrB,IAAMC,EAAwBH,EAAoBI,IAAkB1V,IACpEuV,EAAa,IAAIE,EAAsBD,EAAqB,CACxD/Q,SAAU,KACV0B,UAAU,EACVC,MAAO,IAEPrH,WA6BR,SAAAyG,EAAOC,MAAP,EAAYuI,mBAbZ,WACIlK,qBAAqBzD,KAAK0D,KAEtBwR,IACAA,EAAW1R,UACX0R,EAAa,MAGjBtK,EAAIpH,kB","file":"js/modern/app.586945b8.js","sourcesContent":["export function isWebGLAvailable() {\n    try {\n        const canvas = document.createElement('canvas');\n        return !!(\n            window.WebGLRenderingContext &&\n            (canvas.getContext('webgl') || canvas.getContext('experimental-webgl'))\n        );\n    } catch (err) {\n        return false;\n    }\n}\n\nexport function isWebGL2Available() {\n    try {\n        const canvas = document.createElement('canvas');\n        return !!(window.WebGL2RenderingContext && canvas.getContext('webgl2'));\n    } catch (e) {\n        return false;\n    }\n}\n","import Aladino from 'aladino';\nimport lerp from 'lerp';\nimport gsap from 'gsap';\nimport vertexShader from './shaders/vertex.glsl';\nimport fragmentShader from './shaders/fragment.glsl';\nimport MainSlider from './index';\nimport type { MainSliderOptions } from './types';\n\nexport default class WebglMainSlider extends MainSlider {\n    isWebglInitialized: boolean;\n\n    // width: number;\n\n    // height: number;\n\n    isAnimating: boolean;\n\n    // containerRect: DOMRect;\n\n    constructor(container: Element, options: Partial<MainSliderOptions>) {\n        super(container, options);\n        this._onVisibilityChange = this._onVisibilityChange.bind(this);\n        // this.animate = this.animate.bind(this);\n\n        this.isAnimating = false;\n        // this.containerRect = this.container.getBoundingClientRect();\n        // this.width = this.containerRect.width;\n        // this.height = this.containerRect.height;\n        this.isWebglInitialized = false;\n\n        this._init();\n    }\n\n    protected _init() {\n        this.aladino = new Aladino({\n            density: 1,\n            dpr: Math.min(devicePixelRatio, 2),\n            canvas: this.options.canvas,\n            // post: {\n            //     fragment: postprocessingShader,\n            //     uniforms: {\n            //         speed: 0.0,\n            //     },\n            // },\n        });\n\n        this.displacementTexture = this.aladino.texture(`${PUBLIC_PATH}img/sliders/displacement-map.png`);\n        this.textures = this.images.map((img) => this.aladino.texture(img.currentSrc));\n\n        this.material = this.aladino.material({\n            vertex: vertexShader,\n            fragment: fragmentShader,\n            uniforms: {\n                currentImage: this.textures[this.activeIndex],\n                nextImage: this.textures[this.nextIndex],\n                disp: this.displacementTexture,\n                dispPower: 0,\n                intensity: 0.5,\n                textureFactor: { x: 1, y: 1 },\n            },\n        });\n\n        this.carpet = this.aladino.carpet(this.images[0], {\n            material: this.material,\n            uniforms: {\n                image: this.textures[this.activeIndex],\n            },\n        });\n\n        const observer = new IntersectionObserver((entries) => {\n            entries.forEach((entry) => {\n                this.carpet.active = entry.isIntersecting;\n            });\n        });\n\n        observer.observe(this.container);\n\n        document.addEventListener('visibilitychange', this._onVisibilityChange);\n\n        // this.animate();\n\n        this.container.classList.add('webgl-initialized');\n        this.isWebglInitialized = true;\n    }\n\n    protected setTextureFactor(index: number) {\n        const { image } = this.textures[index];\n        const factor = { x: 1, y: 1 };\n        const rect = this.container.getBoundingClientRect();\n        const rectRatio = rect.width / rect.height;\n        const imageRatio = image.width / image.height;\n\n        if (rectRatio > imageRatio) {\n            factor.x = 1;\n            factor.y = (1 / rectRatio) * imageRatio;\n        } else {\n            factor.x = (1 * rectRatio) / imageRatio;\n            factor.y = 1;\n        }\n\n        return factor;\n    }\n\n    // render() {\n    //     // material.uniforms.speed = lerp(material.uniforms.speed, speed, 0.6);\n    //     // material.uniforms.speed2 = lerp(material.uniforms.speed2, speed, 0.1);\n    //     // sliderAladino.post.uniforms.speed = lerp(sliderAladino.post.uniforms.speed, speed, 0.1);\n    // }\n\n    // animate() {\n    //     this.render();\n    //     this.rAF = requestAnimationFrame(this.animate);\n    // }\n\n    async destroy() {\n        super.destroy();\n\n        cancelAnimationFrame(this.rAF);\n        document.removeEventListener('visibilitychange', this._onVisibilityChange);\n\n        if (this.observer) {\n            this.observer.disconnect();\n            this.observer = null;\n        }\n\n        this.carpet.destroy();\n        this.aladino.destroy();\n        this.container.classList.remove('webgl-initialized');\n        this.isWebglInitialized = false;\n    }\n\n    async navigateTo(index: number) {\n        super.navigateTo(index);\n\n        if (!this.isAnimating) return;\n\n        this.isAnimating = true;\n        console.log(this);\n\n        if (this.nextIndex !== index) {\n            this.material.uniforms.nextImage = this.textures[index];\n        }\n\n        const factor = this.setTextureFactor(index);\n\n        gsap.to(this.material.uniforms.dispPower, {\n            duration: this.duration / 1000,\n            value: 1,\n            ease: 'expo.inOut',\n            onComplete: () => {\n                this.material.uniforms.dispPower = 0;\n                this.material.uniforms.currentImage = this.textures[index];\n                this.material.uniforms.nextImage = this.textures[this.nextIndex];\n                this.isAnimating = false;\n                // this.activeIndex = index;\n            },\n        });\n\n        gsap.to(this.material.uniforms.textureFactor, {\n            duration: this.duration / 1000,\n            x: factor.x,\n            y: factor.y,\n            ease: 'expo.inOut',\n        });\n    }\n\n    protected async _onResize() {\n        super._onResize();\n        this.carpet.resize();\n    }\n\n    protected async _onVisibilityChange() {\n        // if (this.offscreen) {\n        //     await this.offscreen.setState({ documentVisible: document.visibilityState === 'visible' });\n        // }\n    }\n}\n","export default \"#define GLSLIFY 1\\nattribute vec2 position;\\nattribute vec2 uv;\\n\\nuniform mat4 projection;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vUv = uv;\\n\\n  gl_Position = projection * vec4(position, 0.0, 1.0);\\n}\\n\";","export default \"precision highp float;\\n#define GLSLIFY 1\\n\\nuniform vec2 size;\\nuniform vec2 sizeImage;\\nuniform sampler2D image;\\nuniform sampler2D currentImage;\\nuniform sampler2D nextImage;\\nuniform sampler2D disp;\\nuniform float dispPower;\\nuniform float intensity;\\n\\nvarying vec2 vUv;\\n\\nvec4 coverTexture(sampler2D tex, vec2 imgSize, vec2 ouv) {\\n  vec2 s = size;\\n  vec2 i = imgSize;\\n  float rs = s.x / s.y;\\n  float ri = i.x / i.y;\\n  vec2 new = rs < ri ? vec2(i.x * s.y / i.y, s.y) : vec2(s.x, i.y * s.x / i.x);\\n  vec2 offset = (rs < ri ? vec2((new.x - s.x) / 2.0, 0.0) : vec2(0.0, (new.y - s.y) / 2.0)) / new;\\n  vec2 uv = ouv * s / new + offset;\\n\\n  return texture2D(tex, uv);\\n}\\n\\nvoid main() {\\n    vec2 uv = vUv;\\n    vec4 disp = texture2D(disp, uv);\\n    vec2 dispVec = vec2(disp.x, disp.y);\\n    \\n    vec2 distPos1 = uv + (dispVec * intensity * dispPower);\\n    vec2 distPos2 = uv + (dispVec * -(intensity * (1. - dispPower)));\\n    \\n    vec4 currentImage = texture2D(currentImage, distPos1);\\n    vec4 nextImage = texture2D(nextImage, distPos2);\\n    \\n    gl_FragColor = mix(currentImage, nextImage, dispPower);\\n//   gl_FragColor = coverTexture(currentImage, sizeImage, vUv);\\n}\\n\";","/* global USE_SERVICE_WORKER */\nimport './webpack-imports';\nimport './sentry';\nimport './polyfills';\n\nimport sw from './sw';\nimport { registerCustomElements } from './custom-elements';\n\nimport { createParticlesBasic } from './experiments/particles/particles-basic';\nimport { createParticlesPathTrailing } from './experiments/particles/path-trailing';\n\nimport { createPhysicsWorker } from './experiments/physics/physics-worker';\n\nimport { createShadersPatterns } from './experiments/shaders/patterns';\nimport { createShadersPixelated } from './experiments/shaders/pixelated';\n\nimport { createSliders1 } from './experiments/sliders/1';\nimport { createSlidersFullscreen } from './experiments/sliders/fullscreen';\n\nimport './experiments/distortions/1';\n\nregisterCustomElements();\n\ncreateParticlesBasic();\ncreateParticlesPathTrailing();\n\ncreatePhysicsWorker();\n\ncreateShadersPatterns();\ncreateShadersPixelated();\ncreateSliders1();\ncreateSlidersFullscreen();\n\n// Service Worker\nif (USE_SERVICE_WORKER) {\n    window.addEventListener('load', () => sw.register());\n} else {\n    sw.unregister();\n}\n\nmodule.hot?.accept();\n","/* global BUILD_TYPE */\n/* eslint global-require: \"off\" */\nimport 'focus-visible';\n// import 'intersection-observer';\n\nif (BUILD_TYPE === 'legacy') {\n    require('core-js/es/symbol');\n    require('core-js/es/promise/finally');\n    require('document-register-element/build/document-register-element');\n    // require('element-matches-polyfill');\n    require('whatwg-fetch');\n}\n","import { BackSide, FrontSide, Group, Material, Mesh, Points } from 'three';\n\nexport function disposeMesh(mesh: Mesh | Points) {\n    mesh.geometry?.dispose();\n    if (mesh.material) {\n        if (mesh.material instanceof Array) {\n            for (let i = 0; i < mesh.material.length; ++i) {\n                mesh.material[i].dispose();\n            }\n        } else {\n            mesh.material.dispose();\n        }\n    }\n}\n\nexport function separateCullingPass(mesh: Mesh): Group {\n    const group = new Group();\n\n    [BackSide, FrontSide].forEach((side, i) => {\n        const newMesh = mesh.clone();\n        newMesh.name = `${newMesh.name}__clone${i + 1}`;\n\n        if (mesh.material instanceof Material) {\n            const material = mesh.material.clone();\n            newMesh.material = material;\n            material.transparent = true;\n            material.side = side;\n        }\n\n        group.add(newMesh);\n\n        if (mesh.parent) {\n            mesh.parent.add(group);\n            mesh.parent.remove(mesh);\n            disposeMesh(mesh);\n        }\n    });\n\n    return group;\n}\n","/* eslint-disable max-lines */\nimport delegate from 'delegate';\n// import createDispatcher from 'lit-dispatcher';\nimport gsap from 'gsap';\n// import debounce from 'lodash.debounce';\nimport Hammer from 'hammerjs';\n\nimport type { MainSliderOptions } from './types';\n\nconst defaultOptions: MainSliderOptions = {\n    duration: 1,\n    autoplay: false,\n    delay: 5000,\n    paused: false,\n};\n\nexport default class MainSlider {\n    container: Element;\n\n    options: MainSliderOptions;\n\n    slides: Element[];\n\n    slidesContainer: Element | null;\n\n    navigationContainer: Element | null;\n\n    paginationContainer: Element | null;\n\n    prevSlideButton: HTMLButtonElement | null;\n\n    nextSlideButton: HTMLButtonElement | null;\n\n    _paginationDelegation: any;\n\n    // _dispatcher: ReturnType<typeof createDispatcher>;\n\n    paginationButtons: HTMLButtonElement[];\n\n    images: HTMLImageElement[];\n\n    total: number;\n\n    activeIndex: number;\n\n    nextIndex: number;\n\n    isAnimating: boolean;\n\n    _autoplayTimeout: NodeJS.Timeout | null;\n\n    // _contentMap: WeakMap<Element, { content: Element; label: Element; name: Element; link: Element }>;\n\n    _hammer: HammerManager;\n\n    tl: gsap.core.Timeline | null;\n\n    constructor(container: Element, options: Partial<MainSliderOptions> = defaultOptions) {\n        this.navigateToNext = this.navigateToNext.bind(this);\n        this.navigateToPrev = this.navigateToPrev.bind(this);\n        this._onResize = this._onResize.bind(this);\n        this._onSwipe = this._onSwipe.bind(this);\n\n        this.options = { ...defaultOptions, ...options };\n        // this._dispatcher = createDispatcher();\n        this.isAnimating = false;\n        this.container = container;\n        this.slides = Array.from(container.querySelectorAll('.js-main-slide'));\n        this.total = this.slides.length;\n        this.slidesContainer = container.querySelector('.js-main-slides-container');\n        this.navigationContainer = container.querySelector('.js-main-slide-nav-container');\n        this.paginationContainer = container.querySelector('.js-main-slide-pagination-container');\n        this.images = Array.from(container.querySelectorAll('img.js-main-slide-img'));\n        this.activeIndex = 0;\n        this.nextIndex = this._getNextIndex();\n        this.prevSlideButton = null;\n        this.nextSlideButton = null;\n        this.paginationButtons = [];\n        this._paginationDelegation = null;\n        this._autoplayTimeout = null;\n        this.tl = null;\n\n        // this._contentMap = new WeakMap<Element, { content: Element; label: Element; name: Element; link: Element }>();\n        // this.slides.forEach((slide) => {\n        //     this._contentMap.set(slide, {\n        //         content: slide.querySelector('.js-main-slide-content')!,\n        //         label: slide.querySelector('.js-main-slide-label')!,\n        //         name: slide.querySelector('.js-main-slide-name')!,\n        //         link: slide.querySelector('.js-main-slide-link')!,\n        //     });\n        // });\n\n        // this._generateNavigation();\n        // this._generatePagination();\n\n        this._hammer = new Hammer(container as HTMLElement);\n        this._hammer.get('swipe').set({ direction: Hammer.DIRECTION_HORIZONTAL });\n        this._hammer.on('swipe', this._onSwipe);\n\n        this.slides[this.activeIndex].classList.add('is-active');\n        this.slides[this.nextIndex].classList.add('is-next');\n        // this.paginationButtons[this.activeIndex].classList.add('a-loader');\n\n        if (this.options.autoplay && !this.options.paused) {\n            this._autoplayTimeout = setTimeout(this.navigateToNext, this.options.delay);\n        }\n\n        window.addEventListener('resize', this._onResize);\n    }\n\n    on(eventName: string, fn: (data?: any) => void) {\n        // this._dispatcher.on(eventName, fn);\n    }\n\n    once(eventName: string, fn: (data?: any) => void) {\n        // this._dispatcher.once(eventName, fn);\n    }\n\n    off(eventName: string, fn: (data?: any) => void) {\n        // this._dispatcher.off(eventName, fn);\n    }\n\n    resume() {\n        this.options.paused = true;\n        this._autoplayTimeout = setTimeout(this.navigateToNext, this.options.delay);\n    }\n\n    navigateTo(index: number) {\n        console.log('adf');\n        if (this.activeIndex === index || this.isAnimating) return;\n\n        if (this._autoplayTimeout) {\n            clearTimeout(this._autoplayTimeout);\n        }\n\n        this.isAnimating = true;\n        // this._dispatcher.dispatch('change', { currentIndex: this.activeIndex, nextIndex: index });\n\n        // const activePaginationBtn = this.paginationButtons.find(\n        //     (btn) => this.paginationButtons.indexOf(btn) === this.activeIndex,\n        // );\n\n        // if (activePaginationBtn) {\n        //     activePaginationBtn.classList.remove('a-loader');\n        //     activePaginationBtn.classList.remove('is-active');\n        // }\n\n        // this.paginationButtons.find((btn) => this.paginationButtons.indexOf(btn) === index)?.classList.add('is-active');\n\n        const nextIndex = this._getNextIndex(this._getPrevIndex(index));\n        const nextAfterNextIndex = this._getNextIndex(nextIndex);\n\n        if (this.nextIndex !== nextIndex) {\n            this.slides[this.nextIndex].classList.remove('is-next');\n            this.slides[nextIndex].classList.add('is-next');\n            this.nextIndex = nextIndex;\n        }\n\n        // const currentContent = this._contentMap.get(this.slides[this.activeIndex]);\n        // const nextContent = this._contentMap.get(this.slides[index]);\n        // const nextAfterNextContent = this._contentMap.get(this.slides[nextAfterNextIndex]);\n        const duration = (this.options.duration / 1000) * 0.9;\n\n        // const cloneSlide = this.slides[nextAfterNextIndex].cloneNode(true) as Element;\n        // cloneSlide.classList.add('main-slide--clone');\n        // cloneSlide.classList.remove('is-active');\n        // cloneSlide.classList.remove('is-next');\n        // this.slidesContainer?.appendChild(cloneSlide);\n\n        this.tl = gsap.timeline({\n            defaults: { duration },\n            onComplete: () => {\n                // this.slidesContainer?.removeChild(cloneSlide);\n\n                // this.paginationButtons\n                //     .find((btn) => this.paginationButtons.indexOf(btn) === index)\n                //     ?.classList.add('a-loader');\n\n                this.slides[this.activeIndex].classList.remove('is-active');\n                this.slides[this.nextIndex].classList.remove('is-next');\n\n                this.activeIndex = index;\n                this.nextIndex = this._getNextIndex();\n\n                this.slides[this.activeIndex].classList.add('is-active');\n                this.slides[this.nextIndex].classList.add('is-next');\n\n                gsap.set(\n                    [\n                        this.slides[index],\n                        // currentContent!.link,\n                        // currentContent!.name,\n                        // currentContent!.label,\n                        // nextContent!.content,\n                        // nextContent!.name,\n                        // nextContent!.label,\n                        // nextContent!.link,\n                        // nextAfterNextContent!.name,\n                    ],\n                    { clearProps: 'all' },\n                );\n\n                this.isAnimating = false;\n                // this._dispatcher.dispatch('change-complete', {\n                //     currentIndex: this.activeIndex,\n                //     nextIndex: this.nextIndex,\n                // });\n\n                if (this.options.autoplay) {\n                    this._autoplayTimeout = setTimeout(this.navigateToNext, this.options.delay);\n                }\n            },\n        });\n\n        this.tl\n            .to(this.images[this.activeIndex], {\n                autoAlpha: 0,\n                ease: 'power4.inOut',\n            })\n            .fromTo(\n                this.images[nextIndex],\n                {\n                    autoAlpha: 0,\n                },\n                {\n                    x: 0,\n                    autoAlpha: 1,\n                    ease: 'expo.inOut',\n                },\n                `-=${duration}`,\n            )\n            .fromTo(\n                // this.slides[index],\n                nextContent!.content,\n                {\n                    x: 0,\n                },\n                {\n                    x: window.matchMedia('(max-width: 1024px)').matches ? '-100vw' : '-50vw',\n                    ease: 'power4.inOut',\n                },\n                `-=${duration - 0.05}`,\n            )\n            .to(\n                nextContent!.name,\n                {\n                    opacity: 1,\n                    ease: 'expo.inOut',\n                },\n                `-=${duration}`,\n            )\n            .fromTo(\n                nextContent!.label,\n                {\n                    x: '15vw',\n                    autoAlpha: 0,\n                },\n                {\n                    x: 0,\n                    autoAlpha: 1,\n                    ease: 'expo.inOut',\n                },\n                `-=${duration - 0.05}`,\n            )\n            .fromTo(\n                cloneSlide,\n                {\n                    x: '50vw',\n                },\n                {\n                    x: 0,\n                    ease: 'power4.inOut',\n                },\n                `-=${duration - 0.05}`,\n            );\n    }\n\n    navigateToPrev() {\n        this.navigateTo(this._getPrevIndex());\n    }\n\n    navigateToNext() {\n        this.navigateTo(this._getNextIndex());\n    }\n\n    destroy() {\n        if (this.tl) {\n            this.tl.kill();\n            this.tl = null;\n        }\n        this._hammer.destroy();\n        window.removeEventListener('resize', this._onResize);\n        this.prevSlideButton?.removeEventListener('click', this.navigateToPrev);\n        this.nextSlideButton?.removeEventListener('click', this.navigateToNext);\n        // this.slides.forEach((slide) => {\n        //     this._contentMap.delete(slide);\n        // });\n\n        if (this._paginationDelegation) {\n            this._paginationDelegation.destroy();\n        }\n\n        if (this._autoplayTimeout) {\n            clearTimeout(this._autoplayTimeout);\n        }\n    }\n\n    protected _onResize() {\n        //\n    }\n\n    protected _onSwipe(event: any) {\n        console.log('swipe');\n        if (event.deltaX < 0) {\n            this.navigateToNext();\n        } else {\n            this.navigateToPrev();\n        }\n    }\n\n    protected _generateNavigation() {\n        if (!this.navigationContainer) return;\n\n        const arrowTemplate = `\n            <svg width=\"16\" height=\"9\" viewBox=\"0 0 16 9\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M15.2 1.348a.59.59 0 00-.834-.832L8.08 6.802 2.014.516a.59.59 0 00-.833.832l6.9 7.01 7.118-7.01z\" fill=\"#fff\"/>\n            </svg>\n        `;\n        this.prevSlideButton = document.createElement('button');\n        this.prevSlideButton.className = 'main-slider-navigation-arrow main-slider-navigation-arrow--prev';\n        const prevSlideLabel = 'Предыдущий слайд';\n        this.prevSlideButton.setAttribute('aria-label', prevSlideLabel);\n        this.prevSlideButton.setAttribute('title', prevSlideLabel);\n        this.prevSlideButton.innerHTML = arrowTemplate;\n        this.prevSlideButton.addEventListener('click', this.navigateToPrev);\n\n        this.nextSlideButton = document.createElement('button');\n        this.nextSlideButton.className = 'main-slider-navigation-arrow main-slider-navigation-arrow--next';\n        const nextSlideLabel = 'Следующий слайд';\n        this.nextSlideButton.setAttribute('aria-label', nextSlideLabel);\n        this.nextSlideButton.setAttribute('title', nextSlideLabel);\n        this.nextSlideButton.innerHTML = arrowTemplate;\n        this.nextSlideButton.addEventListener('click', this.navigateToNext);\n\n        const fragment = document.createDocumentFragment();\n        fragment.appendChild(this.prevSlideButton);\n        fragment.appendChild(this.nextSlideButton);\n\n        this.navigationContainer.appendChild(fragment);\n    }\n\n    protected _generatePagination() {\n        if (!this.paginationContainer) return;\n\n        const loaderTemplate = `\n            <svg viewBox=\"0 0 37 37\" class=\"main-slider-pagination__loading-svg\" preserveAspectRatio=\"none\">\n                <circle class=\"main-slider-pagination__loading-path\" cx=\"19\" cy=\"19\" r=\"18.5\" style=\"--path-length:115.49px;\"></circle>\n            </svg>\n        `;\n\n        this.paginationButtons = [];\n        const ul = document.createElement('ul');\n        ul.className = 'list-unstyled main-slider-pagination-list';\n\n        for (let i = 0; i < this.total; i++) {\n            const li = document.createElement('li');\n            li.className = 'main-slider-pagination-list__item';\n            ul.appendChild(li);\n            const button = document.createElement('button');\n            button.className = 'main-slider-pagination-btn js-main-slider-pagination-btn';\n            const buttonLabel = `Перейти на слайд ${i + 1}`;\n            button.setAttribute('aria-label', buttonLabel);\n            button.setAttribute('title', buttonLabel);\n            button.setAttribute('data-slide-index', `${i}`);\n            if (this.activeIndex === i) {\n                button.classList.add('is-active');\n            }\n            this.paginationButtons.push(button);\n            li.appendChild(button);\n            button.innerHTML += loaderTemplate;\n        }\n\n        this.paginationContainer.appendChild(ul);\n\n        this._paginationDelegation = delegate(\n            this.paginationContainer,\n            '.js-main-slider-pagination-btn',\n            'click',\n            (event: any) => {\n                this.navigateTo(parseInt(event.delegateTarget.dataset.slideIndex, 10));\n            },\n        );\n    }\n\n    protected _getPrevIndex(index = this.activeIndex) {\n        return (index - 1 + this.total) % this.total;\n    }\n\n    protected _getNextIndex(index = this.activeIndex) {\n        return (index + 1) % this.total;\n    }\n}\n","import Stats from 'three/examples/jsm/libs/stats.module';\nimport * as dat from 'three/examples/jsm/libs/dat.gui.module';\n\ntype Experiment = (data: {\n    canvas: HTMLCanvasElement;\n    onRender: () => void;\n    gui: any;\n    sizes: { width: number; height: number };\n}) => void;\n\nexport function baseExperiment(name: string, fn: Experiment) {\n    return () => {\n        const canvas = document.querySelector<HTMLCanvasElement>(`.js-canvas[data-experiment=\"${name}\"]`);\n\n        if (!canvas) {\n            return;\n        }\n\n        let canvasRect = canvas.getBoundingClientRect();\n\n        const sizes = {\n            width: canvasRect.width,\n            height: canvasRect.height,\n        };\n\n        const stats = new Stats();\n        document.body.appendChild(stats.domElement);\n\n        const gui = new dat.GUI();\n        gui.addFolder();\n\n        function onRender() {\n            stats.update();\n        }\n\n        fn({ sizes, gui, canvas, onRender });\n\n        window.addEventListener('resize', () => {\n            canvasRect = canvas.getBoundingClientRect();\n            sizes.width = canvasRect.width;\n            sizes.height = canvasRect.height;\n        });\n    };\n}\n","/* global PUBLIC_PATH */\nasync function register() {\n    if ('serviceWorker' in navigator) {\n        try {\n            await navigator.serviceWorker.register(`${PUBLIC_PATH}service-worker.js`);\n        } catch (err) {\n            console.log('SW registration failed: ', err);\n        }\n    }\n}\n\nasync function unregister() {\n    if ('serviceWorker' in navigator) {\n        const registrations = await navigator.serviceWorker.getRegistrations();\n        registrations.forEach((registration) => {\n            registration.unregister();\n        });\n    }\n}\n\nconst _module = { register, unregister };\n\nexport default _module;\n","// import * as Cookies from 'js-cookie';\n\nexport function registerCustomElements() {\n    // if (Cookies.get('COOKIES_USAGE_ACCEPTED') !== 'true') {\n    //     import(/* webpackChunkName: \"CookiesAgreement\" */ './CookiesAgreement/CookiesAgreement').then(\n    //         ({ CookiesAgreement }) => {\n    //             window.customElements.define('x-cookies-agreement', CookiesAgreement);\n    //         },\n    //     );\n    // }\n}\n","import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { baseExperiment } from '../base';\n\nexport const createParticlesBasic = baseExperiment('particles-basic', ({ canvas, sizes, onRender, gui }) => {\n    let rAF: number;\n    const renderer = new THREE.WebGLRenderer({ canvas });\n    renderer.outputEncoding = THREE.sRGBEncoding;\n    renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n    renderer.setSize(sizes.width, sizes.height);\n\n    const camera = new THREE.PerspectiveCamera(45, sizes.width / sizes.height, 0.1, 1000);\n    camera.position.z = 3;\n\n    const scene = new THREE.Scene();\n    const textureLoader = new THREE.TextureLoader();\n\n    const particleTexture = textureLoader.load(`${PUBLIC_PATH}img/particles/8.png`);\n\n    const particlesGeometry = new THREE.BufferGeometry();\n    const particlesCount = 20000;\n    const positions = new Float32Array(particlesCount * 3);\n\n    for (let i = 0; i < particlesCount * 3; i++) {\n        positions[i] = (Math.random() - 0.5) * 4;\n    }\n\n    particlesGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n\n    const sphere = new THREE.Points(\n        particlesGeometry,\n        new THREE.PointsMaterial({\n            color: 0xffffff,\n            map: particleTexture,\n            size: 0.05,\n            sizeAttenuation: true,\n            depthWrite: false,\n            blending: THREE.AdditiveBlending,\n        }),\n    );\n    scene.add(sphere);\n\n    const controls = new OrbitControls(camera, canvas);\n    controls.enableDamping = true;\n\n    function render() {\n        onRender();\n        controls.update();\n        renderer.render(scene, camera);\n    }\n\n    function animate() {\n        render();\n        rAF = requestAnimationFrame(animate);\n    }\n\n    function destroy() {\n        cancelAnimationFrame(rAF);\n        renderer.dispose();\n    }\n\n    animate();\n\n    window.addEventListener('resize', () => {\n        camera.aspect = sizes.width / sizes.height;\n        camera.updateProjectionMatrix();\n        renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n        renderer.setSize(sizes.width, sizes.height);\n    });\n\n    module.hot?.addDisposeHandler(destroy);\n});\n","import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { baseExperiment } from '../../base';\nimport vertexShader from './shaders/vertex.glsl';\nimport fragmentShader from './shaders/fragment.glsl';\nimport { disposeMesh } from '../../../utils';\nimport texture from './russia.png';\n\nexport const createParticlesPathTrailing = baseExperiment(\n    'particles-path-trailing',\n    ({ canvas, sizes, onRender, gui }) => {\n        let rAF: number;\n        const renderer = new THREE.WebGLRenderer({ canvas });\n        renderer.outputEncoding = THREE.sRGBEncoding;\n        renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n        renderer.setSize(sizes.width, sizes.height);\n\n        const camera = new THREE.PerspectiveCamera(45, sizes.width / sizes.height, 0.1, 100);\n        camera.position.z = 10;\n\n        const scene = new THREE.Scene();\n        // const clock = new THREE.Clock();\n\n        const svg = document.querySelector<SVGElement>('svg.js-russia-svg');\n\n        if (!svg) {\n            throw new Error('svg not found');\n        }\n\n        const svgBBox = svg.getBBox();\n        svg.style.display = 'none';\n        const svgTexture = new THREE.TextureLoader().load(texture);\n\n        const params = {\n            mapColor: 0x7071a,\n            // particlesColor: 0x040a14,\n            particlesColor: 0x110800,\n            // pointsAmountFactor: 0.4,\n            pointsAmountFactor: 0.9,\n            // maxPointsToRender: 50,\n            maxPointsToRender: 200,\n            // pointsToRenderFactor: 0.2,\n            pointsToRenderFactor: 0.5,\n            particlesSpeed: 1,\n            // opacityFactor: 0.2,\n            opacityFactor: 0.3,\n            // particleSize: 30,\n            particleSize: 20,\n        };\n        gui?.add(params, 'particlesSpeed').min(0).max(10).step(1);\n        gui?.add(params, 'opacityFactor').min(0).max(1).step(0.001);\n\n        let pathsData: any[] = [];\n        let maxPoints = 0;\n        let positions: Float32Array | null;\n        let opacity: Float32Array | null;\n\n        const particlesGeometry = new THREE.BufferGeometry();\n\n        function initScene() {\n            pathsData = Array.from(svg!.querySelectorAll<SVGPathElement>('.land')).map((path) => {\n                const pathLength = path.getTotalLength();\n                const pointsAmount = Math.floor(pathLength * params.pointsAmountFactor);\n                const points: THREE.Vector3[] = [];\n\n                for (let i = 0; i < pointsAmount; i++) {\n                    const pointAt = (pathLength / pointsAmount) * i;\n                    const point = path.getPointAtLength(pointAt);\n                    const normalizedPoint = {\n                        x: (point.x - svgBBox.width / 2) * 0.01 + Math.random() * 0.02,\n                        y: (point.y - svgBBox.height / 2) * 0.01 + Math.random() * 0.02,\n                        z: 0,\n                    };\n                    points.push(new THREE.Vector3(normalizedPoint.x, normalizedPoint.y, normalizedPoint.z));\n                }\n\n                return {\n                    length: pathLength,\n                    points,\n                    pointsToRender: Math.min(\n                        params.maxPointsToRender,\n                        Math.floor(pointsAmount * params.pointsToRenderFactor),\n                    ),\n                    currentPosition: 0,\n                };\n            });\n            maxPoints = pathsData.reduce((acc, pathData) => acc + pathData.pointsToRender, 0);\n\n            positions = new Float32Array(maxPoints * 3);\n            opacity = new Float32Array(maxPoints);\n\n            for (let i = 0; i < maxPoints * 3; i++) {\n                positions[i] = 0;\n            }\n\n            for (let i = 0; i < maxPoints; i++) {\n                opacity[i] = Math.random() * params.opacityFactor;\n            }\n\n            particlesGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n            particlesGeometry.setAttribute('opacity', new THREE.BufferAttribute(opacity, 1));\n        }\n\n        initScene();\n        gui?.add(params, 'pointsToRenderFactor').min(0).max(1).step(0.01).onFinishChange(initScene);\n        gui?.add(params, 'pointsAmountFactor').min(0).max(3).step(0.01).onFinishChange(initScene);\n        gui?.add(params, 'maxPointsToRender').min(0).max(500).step(1).onFinishChange(initScene);\n\n        const particlesMaterial = new THREE.ShaderMaterial({\n            uniforms: {\n                uParticleSize: { value: params.particleSize * renderer.getPixelRatio() },\n                uTime: { value: 0 },\n                uColor: { value: new THREE.Color(params.particlesColor) },\n            },\n            vertexShader,\n            fragmentShader,\n            transparent: true,\n            depthWrite: false,\n            blending: THREE.AdditiveBlending,\n        });\n        gui?.addColor(params, 'particlesColor').onChange(() => {\n            particlesMaterial.uniforms.uColor.value = new THREE.Color(params.particlesColor);\n        });\n        gui?.add(params, 'particleSize')\n            .min(0)\n            .max(100)\n            .step(0.01)\n            .onChange(() => {\n                particlesMaterial.uniforms.uParticleSize.value = params.particleSize;\n            });\n\n        const particles = new THREE.Points(particlesGeometry, particlesMaterial);\n        particles.position.y = 0.33;\n        scene.add(particles);\n\n        const plane = new THREE.Mesh(\n            new THREE.PlaneBufferGeometry(svgBBox.width * 0.01, svgBBox.height * 0.01, 1, 1),\n            new THREE.MeshBasicMaterial({\n                color: params.mapColor,\n                map: svgTexture,\n            }),\n        );\n        scene.add(plane);\n        gui?.addColor(params, 'mapColor').onChange(() => {\n            plane.material.color = new THREE.Color(params.mapColor);\n        });\n\n        const dummyMat4 = new THREE.Matrix4();\n\n        const controls = new OrbitControls(camera, canvas);\n        controls.enableDamping = true;\n\n        function render() {\n            // const elapsedTime = clock.getElapsedTime();\n\n            onRender();\n            // particlesMaterial.uniforms.uTime.value = elapsedTime;\n            let k = 0;\n\n            for (let i = 0; i < pathsData.length; i++) {\n                pathsData[i].currentPosition =\n                    (pathsData[i].currentPosition + params.particlesSpeed) % pathsData[i].points.length;\n\n                for (let j = 0; j < pathsData[i].pointsToRender; j++) {\n                    const point = pathsData[i].points[(j + pathsData[i].currentPosition) % pathsData[i].points.length];\n                    positions?.set([point.x, point.y, point.z], k * 3);\n\n                    if (opacity) {\n                        opacity[k] = j / (pathsData[i].pointsToRender / params.opacityFactor);\n                    }\n\n                    k++;\n                }\n            }\n\n            particlesGeometry.attributes.position.array = positions;\n            particlesGeometry.applyMatrix4(dummyMat4.makeScale(1, -1, 1));\n            particlesGeometry.attributes.opacity.array = opacity;\n            particlesGeometry.attributes.position.needsUpdate = true;\n            particlesGeometry.attributes.opacity.needsUpdate = true;\n\n            controls.update();\n            renderer.render(scene, camera);\n        }\n\n        function animate() {\n            render();\n            rAF = requestAnimationFrame(animate);\n        }\n\n        function destroy() {\n            if (svg) {\n                svg.style.display = 'block';\n            }\n\n            cancelAnimationFrame(rAF);\n            scene.remove(particles);\n            disposeMesh(particles);\n            renderer.dispose();\n            gui.destroy();\n        }\n\n        animate();\n\n        window.addEventListener('resize', () => {\n            camera.aspect = sizes.width / sizes.height;\n            camera.updateProjectionMatrix();\n            renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n            renderer.setSize(sizes.width, sizes.height);\n        });\n\n        module.hot?.addDisposeHandler(destroy);\n    },\n);\n","export default \"#define GLSLIFY 1\\nuniform float uParticleSize;\\n\\nattribute float opacity;\\n\\nvarying float vOpacity;\\n\\nvoid main() {\\n    vOpacity = opacity;\\n\\n    vec4 mvPosition = modelViewMatrix * vec4(position, 1.);\\n\\n    gl_PointSize = uParticleSize * (-1. / mvPosition.z);\\n    gl_Position = projectionMatrix * mvPosition;\\n}\";","export default \"#define GLSLIFY 1\\nuniform vec3 uColor;\\n\\nvarying float vOpacity;\\n\\nvoid main() {\\n    vec2 uv = vec2(gl_PointCoord.x, 1. - gl_PointCoord.y);\\n    vec2 centerUv = uv - 0.5;\\n\\n    vec4 color = vec4(0.08 / length(centerUv));\\n    color.rgb = min(vec3(10.), color.rgb);\\n    color.rgb *= uColor * 100.;\\n    color *= vOpacity;\\n    color.a = min(1., color.a);\\n\\n    gl_FragColor = vec4(color.rgb, 1.);\\n}\";","export default __webpack_public_path__ + \"img/russia.png\";","import * as THREE from 'three';\nimport Stats from 'three/examples/jsm/libs/stats.module';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport * as dat from 'three/examples/jsm/libs/dat.gui.module';\nimport * as CANNON from 'cannon-es';\n\nexport function createPhysicsWorker() {\n    const canvas = document.querySelector<HTMLCanvasElement>('.js-canvas[data-experiment=\"physics-worker\"]');\n    let rAF: number;\n\n    if (!canvas) return;\n\n    let canvasRect = canvas.getBoundingClientRect();\n\n    const sizes = {\n        width: canvasRect.width,\n        height: canvasRect.height,\n    };\n\n    const gui = new dat.GUI();\n    gui.addFolder('');\n\n    const renderer = new THREE.WebGLRenderer({ canvas });\n    renderer.shadowMap.enabled = true;\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n    renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n    renderer.setSize(sizes.width, sizes.height);\n\n    const camera = new THREE.PerspectiveCamera(45, sizes.width / sizes.height, 0.1, 1000);\n    camera.position.set(-5, 7, 12);\n    const scene = new THREE.Scene();\n\n    const objects: any[] = [];\n    const world = new CANNON.World();\n    world.gravity.set(0, -9.82, 0);\n\n    const defaultMaterial = new CANNON.Material('default');\n    const defaultContactMaterial = new CANNON.ContactMaterial(defaultMaterial, defaultMaterial, {\n        friction: 0.1,\n        restitution: 0.7,\n    });\n\n    world.addContactMaterial(defaultContactMaterial);\n    world.defaultContactMaterial = defaultContactMaterial;\n\n    const plane = new THREE.Mesh(new THREE.PlaneBufferGeometry(25, 25, 25), new THREE.MeshStandardMaterial());\n    plane.receiveShadow = true;\n    // plane.rotation.x = -Math.PI / 2;\n    scene.add(plane);\n\n    const floorShape = new CANNON.Plane();\n    const floorBody = new CANNON.Body({ material: defaultMaterial });\n    floorBody.mass = 0;\n    floorBody.addShape(floorShape);\n    // floorBody.quaternion.setFromAxisAngle(new CANNON.Vec3(-1, 0, 0), Math.PI * 0.5);\n    world.addBody(floorBody);\n\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.35);\n    scene.add(ambientLight);\n\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.5);\n    directionalLight.position.set(0.3, 0.5, 0.5);\n    directionalLight.target = plane;\n    directionalLight.castShadow = true;\n    scene.add(directionalLight);\n    gui.add(directionalLight.position, 'x').min(-10).max(10).step(0.001);\n    gui.add(directionalLight.position, 'y').min(-10).max(10).step(0.001);\n    gui.add(directionalLight.position, 'z').min(-10).max(10).step(0.001);\n\n    const boxGeometry = new THREE.BoxBufferGeometry(1, 1, 1);\n    const boxMaterial = new THREE.MeshStandardMaterial({\n        metalness: 0.5,\n        roughness: 0.45,\n    });\n\n    function createBox(size = 1, position: { x: number; y: number; z: number }) {\n        const mesh = new THREE.Mesh(boxGeometry, boxMaterial);\n        mesh.castShadow = true;\n        mesh.scale.set(size, size, size);\n        mesh.position.x = position.x;\n        mesh.position.y = position.y;\n        mesh.position.z = position.z;\n        scene.add(mesh);\n\n        const shape = new CANNON.Box(new CANNON.Vec3(position.x, position.y, position.z));\n        const body = new CANNON.Body({\n            mass: 1,\n            position: new CANNON.Vec3(position.x, position.y, position.z),\n            shape,\n        });\n\n        world.addBody(body);\n        objects.push({ mesh, body });\n        // body.applyLocalForce(new CANNON.Vec3(150, 0, 0), new CANNON.Vec3(0, 0, 0));\n    }\n\n    createBox(1, { x: 0, y: 3, z: 0 });\n\n    const clock = new THREE.Clock();\n    let oldElapsedTime = 0;\n\n    const controls = new OrbitControls(camera, canvas);\n    controls.enableDamping = true;\n\n    const stats = new Stats();\n    document.body.appendChild(stats.domElement);\n\n    function render() {\n        const elapsedTime = clock.getElapsedTime();\n        const deltaTime = elapsedTime - oldElapsedTime;\n        oldElapsedTime = elapsedTime;\n\n        // Update physics world\n        world.step(1 / 60, deltaTime, 3);\n\n        for (let i = 0; i < objects.length; i++) {\n            objects[i].mesh.position.copy(objects[i].body.position);\n        }\n\n        controls.update();\n        stats.update();\n\n        renderer.render(scene, camera);\n    }\n\n    function animate() {\n        render();\n        rAF = requestAnimationFrame(animate);\n    }\n\n    function destroy() {\n        cancelAnimationFrame(rAF);\n        gui.destroy();\n        boxGeometry.dispose();\n        boxMaterial.dispose();\n        renderer.dispose();\n    }\n\n    animate();\n\n    window.addEventListener('resize', () => {\n        canvasRect = canvas.getBoundingClientRect();\n        sizes.width = canvasRect.width;\n        sizes.height = canvasRect.height;\n        camera.aspect = sizes.width / sizes.height;\n        camera.updateProjectionMatrix();\n        renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n        renderer.setSize(sizes.width, sizes.height);\n    });\n\n    module.hot?.addDisposeHandler(destroy);\n}\n","import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { baseExperiment } from '../../base';\nimport vertexShader from './shaders/vertex.glsl';\nimport fragmentShader from './shaders/fragment.glsl';\nimport { disposeMesh } from '../../../utils';\n\nexport const createShadersPatterns = baseExperiment('shaders-patterns', ({ canvas, sizes, onRender, gui }) => {\n    let rAF: number;\n    const renderer = new THREE.WebGLRenderer({ canvas });\n    renderer.outputEncoding = THREE.sRGBEncoding;\n    renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n    renderer.setSize(sizes.width, sizes.height);\n\n    const camera = new THREE.PerspectiveCamera(45, sizes.width / sizes.height, 0.1, 100);\n    camera.position.z = 10;\n\n    const scene = new THREE.Scene();\n    const clock = new THREE.Clock();\n\n    // const params = {\n    //     mapColor: 0x7071a,\n    //     // particlesColor: 0x040a14,\n    //     particlesColor: 0x110800,\n    //     // pointsAmountFactor: 0.4,\n    //     pointsAmountFactor: 0.9,\n    //     // maxPointsToRender: 50,\n    //     maxPointsToRender: 200,\n    //     // pointsToRenderFactor: 0.2,\n    //     pointsToRenderFactor: 0.5,\n    //     particlesSpeed: 1,\n    //     // opacityFactor: 0.2,\n    //     opacityFactor: 0.3,\n    //     // particleSize: 30,\n    //     particleSize: 20,\n    // };\n\n    const geometry = new THREE.PlaneBufferGeometry(6, 6, 256, 256);\n\n    const material = new THREE.ShaderMaterial({\n        defines: {\n            PI: Math.PI,\n        },\n        uniforms: {\n            uTime: { value: 0 },\n        },\n        vertexShader,\n        fragmentShader,\n        transparent: true,\n    });\n\n    const mesh = new THREE.Mesh(geometry, material);\n    mesh.position.y = 0.33;\n    scene.add(mesh);\n\n    const controls = new OrbitControls(camera, canvas);\n    controls.enableDamping = true;\n\n    function render() {\n        const elapsedTime = clock.getElapsedTime();\n\n        onRender();\n        material.uniforms.uTime.value = elapsedTime;\n\n        controls.update();\n        renderer.render(scene, camera);\n    }\n\n    function animate() {\n        render();\n        rAF = requestAnimationFrame(animate);\n    }\n\n    function destroy() {\n        cancelAnimationFrame(rAF);\n        scene.remove(mesh);\n        disposeMesh(mesh);\n        renderer.dispose();\n        gui.destroy();\n    }\n\n    animate();\n\n    window.addEventListener('resize', () => {\n        camera.aspect = sizes.width / sizes.height;\n        camera.updateProjectionMatrix();\n        renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n        renderer.setSize(sizes.width, sizes.height);\n    });\n\n    module.hot?.addDisposeHandler(destroy);\n});\n","export default \"#define GLSLIFY 1\\n//\\n// GLSL textureless classic 3D noise \\\"cnoise\\\",\\n// with an RSL-style periodic variant \\\"pnoise\\\".\\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\\n// Version: 2011-10-11\\n//\\n// Many thanks to Ian McEwan of Ashima Arts for the\\n// ideas for permutation and gradient selection.\\n//\\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\\n// Distributed under the MIT license. See LICENSE file.\\n// https://github.com/ashima/webgl-noise\\n//\\n\\nvec3 mod289(vec3 x)\\n{\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 mod289(vec4 x)\\n{\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 permute(vec4 x)\\n{\\n  return mod289(((x*34.0)+1.0)*x);\\n}\\n\\nvec4 taylorInvSqrt(vec4 r)\\n{\\n  return 1.79284291400159 - 0.85373472095314 * r;\\n}\\n\\nvec3 fade(vec3 t) {\\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\\n}\\n\\n// Classic Perlin noise\\nfloat cnoise(vec3 P)\\n{\\n  vec3 Pi0 = floor(P); // Integer part for indexing\\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\\n  Pi0 = mod289(Pi0);\\n  Pi1 = mod289(Pi1);\\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\\n  vec4 iz0 = Pi0.zzzz;\\n  vec4 iz1 = Pi1.zzzz;\\n\\n  vec4 ixy = permute(permute(ix) + iy);\\n  vec4 ixy0 = permute(ixy + iz0);\\n  vec4 ixy1 = permute(ixy + iz1);\\n\\n  vec4 gx0 = ixy0 * (1.0 / 7.0);\\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\\n  gx0 = fract(gx0);\\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\\n  vec4 sz0 = step(gz0, vec4(0.0));\\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\\n\\n  vec4 gx1 = ixy1 * (1.0 / 7.0);\\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\\n  gx1 = fract(gx1);\\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\\n  vec4 sz1 = step(gz1, vec4(0.0));\\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\\n\\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\\n\\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\\n  g000 *= norm0.x;\\n  g010 *= norm0.y;\\n  g100 *= norm0.z;\\n  g110 *= norm0.w;\\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\\n  g001 *= norm1.x;\\n  g011 *= norm1.y;\\n  g101 *= norm1.z;\\n  g111 *= norm1.w;\\n\\n  float n000 = dot(g000, Pf0);\\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\\n  float n111 = dot(g111, Pf1);\\n\\n  vec3 fade_xyz = fade(Pf0);\\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\\n  return 2.2 * n_xyz;\\n}\\n\\nuniform float uTime;\\n\\nvarying vec2 vUv;\\nvarying float vElevation;\\n\\nvoid main() {\\n    vec4 modelPosition = modelMatrix * vec4(position, 1.0);\\n    modelPosition.z += cnoise(modelPosition.xyz * sin(uTime)) * 0.7;\\n    float elevation = modelPosition.z;\\n\\n    vUv = uv;\\n    vElevation = elevation;\\n\\n    gl_Position = projectionMatrix * viewMatrix * modelPosition;\\n}\\n\\n// varying vec2 vUv;\\n\\n// void main() {\\n//     vUv = uv;\\n//     vec4 mvPosition = modelViewMatrix * vec4(position, 1.);\\n//     gl_Position = projectionMatrix * mvPosition;\\n// }\";","export default \"#define GLSLIFY 1\\nuniform float uTime;\\n\\nvarying vec2 vUv;\\nvarying float vElevation;\\n\\nvoid main() {\\n    vec3 color = vec3(distance(vUv, vec2(0.5)));\\n    \\n    gl_FragColor = vec4(mix(vec3(0.2), color, clamp(vElevation, 0., 1.)), 1.0);\\n}\\n\";","import './styles.scss';\nimport Aladino from 'aladino';\nimport { baseExperiment } from '../../base';\nimport vertexShader from './shaders/vertex.glsl';\nimport fragmentShader from './shaders/fragment.glsl';\nimport postprocessingShader from './shaders/postprocessing.glsl';\n\nexport const createShadersPixelated = baseExperiment('shaders-pixelated', ({ canvas, sizes, onRender, gui }) => {\n    let rAF: number;\n    const sliderAladino = new Aladino({\n        density: 1,\n        dpr: Math.min(devicePixelRatio, 2),\n        canvas,\n        post: {\n            fragment: postprocessingShader,\n            uniforms: {\n                pixelSize: 50,\n            },\n        },\n    });\n\n    const material = sliderAladino.material({\n        vertex: vertexShader,\n        fragment: fragmentShader,\n    });\n\n    const img = document.querySelector('img') as HTMLImageElement;\n\n    const carpet = sliderAladino.carpet(img, {\n        material,\n        uniforms: {\n            image: sliderAladino.texture(img.currentSrc),\n        },\n    });\n\n    function render() {\n        if (sliderAladino.post.uniforms.pixelSize > 1) {\n            sliderAladino.post.uniforms.pixelSize -= 0.5;\n        }\n    }\n\n    function animate() {\n        render();\n        rAF = requestAnimationFrame(animate);\n    }\n\n    function destroy() {\n        cancelAnimationFrame(rAF);\n        carpet.destroy();\n        sliderAladino.destroy();\n        gui.destroy();\n    }\n\n    animate();\n\n    window.addEventListener('resize', () => {\n        carpet.resize();\n    });\n\n    module.hot?.addDisposeHandler(destroy);\n});\n","export default \"#define GLSLIFY 1\\nattribute vec2 position;\\nattribute vec2 uv;\\n\\nuniform mat4 projection;\\n\\nvarying vec2 vUv;\\n\\nfloat parabola(float x, float k) {\\n  return pow(4.0 * x * (1.0 - x), k);\\n}\\n\\nvoid main() {\\n  vUv = uv;\\n\\n  vec4 pos = vec4(position, 0.0, 1.0);\\n//   float spee = speed * 2.0;\\n//   pos.x += parabola(uv.y, 1.0) * spee;\\n//   vec4 pp = projection * vec4(position, 0.0, 1.0);\\n//   float yy = ((pp / pp.w).x + 1.0) / 2.0;\\n//   pos.z = parabola(clamp(yy, 0.0, 1.0), 2.4) * speed2 * 160.0;\\n//   pos.z = clamp(pos.z, -6.0, 6.0);\\n\\n  gl_Position = projection * pos;\\n}\";","export default \"precision highp float;\\n#define GLSLIFY 1\\n\\nuniform vec2 size;\\nuniform vec2 sizeImage;\\nuniform sampler2D image;\\n\\nvarying vec2 vUv;\\n\\nvec4 coverTexture(sampler2D tex, vec2 imgSize, vec2 ouv) {\\n  vec2 s = size;\\n  vec2 i = imgSize;\\n  float rs = s.x / s.y;\\n  float ri = i.x / i.y;\\n  vec2 new = rs < ri ? vec2(i.x * s.y / i.y, s.y) : vec2(s.x, i.y * s.x / i.x);\\n  vec2 offset = (rs < ri ? vec2((new.x - s.x) / 2.0, 0.0) : vec2(0.0, (new.y - s.y) / 2.0)) / new;\\n  vec2 uv = ouv * s / new + offset;\\n\\n  return texture2D(tex, uv);\\n}\\n\\nvoid main() {\\n  gl_FragColor = coverTexture(image, sizeImage, vUv);\\n}\\n\";","export default \"precision highp float;\\n#define GLSLIFY 1\\n    \\n// uniform float time;\\n// uniform float speed;\\n// uniform vec2 viewport;\\n// uniform sampler2D image;\\n\\n// float parabola(float x, float k) {\\n//     return pow(4.0 * x * (1.0 - x), k);\\n// }\\n\\n// float random(vec2 co) {\\n//     return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\\n// }\\n\\n// void main() {\\n//     vec2 uv = gl_FragCoord.xy / viewport;\\n//     float spe = speed * 300.0;\\n//     float p = parabola(uv.x, 1.4);\\n\\n//     float r = texture2D(image, uv + vec2(0.000 * spe, 0.0) * p).r;\\n//     float g = texture2D(image, uv + vec2(0.01 * spe, 0.0) * p).g;\\n//     float b = texture2D(image, uv + vec2(0.02 * spe, 0.0) * p).b;\\n//     float a = texture2D(image, uv + vec2(0.000 * spe, 0.0) * p).w;\\n\\n//     gl_FragColor = vec4(r, g, b, a);\\n    \\n//     // Film grain effect\\n//     float n = random(uv + mod(time, 3.0));\\n//     gl_FragColor.rgb *= 1.0 - (n * 0.2);\\n// }\\n\\nuniform sampler2D image;\\nuniform vec2 viewport;\\nuniform vec2 resolution;\\nuniform float pixelSize;\\n\\n// varying vec2 vUv;\\n\\n// vec3 bg(vec2 uv) {\\n//    return texture2D(image, uv).rgb;\\n// }\\n\\n// vec3 effect(vec2 uv, vec3 col) {\\n//    float granularity = floor(intensity*20.+10.);\\n\\n//    if (mod(granularity,2.) > 0.) {\\n//        granularity += 1.0;\\n//    };\\n\\n//    if (granularity > 0.0) {\\n//        float dx = granularity / viewport.x;\\n//        float dy = granularity / viewport.y;\\n//        uv = vec2(dx*(floor(uv.x/dx) + 0.5),dy*(floor(uv.y/dy) + 0.5));\\n//        return bg(uv);\\n//    };\\n\\n//    return col;\\n// }\\n\\nvoid main() {\\n    vec2 uv = gl_FragCoord.xy / viewport;\\n    // vec3 tex = bg(uv);\\n    // vec3 col = effect(uv,tex);\\n    // gl_FragColor = vec4( col, 1. );\\n\\n    vec2 dxy = pixelSize / viewport;\\n    vec2 coord = dxy * floor( uv / dxy );\\n    gl_FragColor = texture2D(image, coord);\\n}\\n\";","import './styles.scss';\nimport Flickity from 'flickity';\nimport Aladino from 'aladino';\nimport lerp from 'lerp';\nimport { baseExperiment } from '../../base';\nimport vertexShader from './shaders/vertex.glsl';\nimport fragmentShader from './shaders/fragment.glsl';\nimport postprocessingShader from './shaders/postprocessing.glsl';\n\nexport const createSliders1 = baseExperiment('sliders-1', ({ canvas, sizes, onRender, gui }) => {\n    let rAF: number;\n    const sliderAladino = new Aladino({\n        density: 16,\n        dpr: Math.min(devicePixelRatio, 2),\n        canvas,\n        post: {\n            fragment: postprocessingShader,\n            uniforms: {\n                speed: 0.0,\n            },\n        },\n    });\n\n    const material = sliderAladino.material({\n        vertex: vertexShader,\n        fragment: fragmentShader,\n        uniforms: {\n            speed: 0,\n            speed2: 0,\n        },\n    });\n\n    const cells = [...document.querySelectorAll('.slider-el')];\n    const carpets = [];\n    cells.forEach((cell) => {\n        const carpet = sliderAladino.carpet(cell, {\n            material,\n            uniforms: {\n                image: sliderAladino.texture(cell.currentSrc),\n            },\n        });\n\n        carpets.push(carpet);\n    });\n\n    let oldProgress = 0;\n    let speed = 0;\n    const freeScroll = true;\n\n    const slider = new Flickity(document.querySelector('.carousel')!, {\n        accessibility: true,\n        freeScroll,\n        dragThreshold: freeScroll ? 0 : 30,\n        // dragThreshold: 30,\n        freeScrollFriction: 0.07,\n        prevNextButtons: false,\n        pageDots: false,\n        // wrapAround: true,\n    });\n\n    const observer = new IntersectionObserver((entries) => {\n        entries.forEach((entry) => {\n            const exactCarpet = carpets.find((carpet) => entry.target === carpet.dom);\n            if (exactCarpet) {\n                exactCarpet.active = entry.isIntersecting;\n            }\n        });\n    });\n\n    cells.forEach((cell) => {\n        observer.observe(cell);\n    });\n\n    slider.on('scroll', (progress) => {\n        // The way flickity works doesn't allow an easy use of the position,\n        // So it can be optimised, as here we're recalculating dom boundingbox each time\n        carpets.forEach((carpet) => {\n            carpet.resize();\n        });\n\n        speed = oldProgress - progress;\n        oldProgress = progress;\n    });\n\n    function render() {\n        material.uniforms.speed = lerp(material.uniforms.speed, speed, 0.6);\n        material.uniforms.speed2 = lerp(material.uniforms.speed2, speed, 0.1);\n        sliderAladino.post.uniforms.speed = lerp(sliderAladino.post.uniforms.speed, speed, 0.1);\n    }\n\n    function animate() {\n        render();\n        rAF = requestAnimationFrame(animate);\n    }\n\n    function destroy() {\n        cancelAnimationFrame(rAF);\n        carpets.forEach((carpet) => {\n            carpet.destroy();\n        });\n        carpets = [];\n        sliderAladino.destroy();\n        slider.destroy();\n        gui.destroy();\n    }\n\n    animate();\n\n    window.addEventListener('resize', () => {\n        carpets.forEach((carpet) => {\n            carpet.resize();\n        });\n    });\n\n    module.hot?.addDisposeHandler(destroy);\n});\n","export default \"#define GLSLIFY 1\\nattribute vec2 position;\\nattribute vec2 uv;\\nuniform mat4 projection;\\nuniform float speed;\\nuniform float speed2;\\nvarying vec2 vUv;\\n\\nfloat parabola(float x, float k) {\\n  return pow(4.0 * x * (1.0 - x), k);\\n}\\n\\nvoid main() {\\n  vUv = uv;\\n\\n  vec4 pos = vec4(position, 0.0, 1.0);\\n  float spee = speed * 2.0;\\n  pos.x += parabola(uv.y, 1.0) * spee;\\n  vec4 pp = projection * vec4(position, 0.0, 1.0);\\n  float yy = ((pp / pp.w).x + 1.0) / 2.0;\\n  pos.z = parabola(clamp(yy, 0.0, 1.0), 2.4) * speed2 * 160.0;\\n  pos.z = clamp(pos.z, -6.0, 6.0);\\n\\n  gl_Position = projection * pos;\\n}\";","export default \"precision highp float;\\n#define GLSLIFY 1\\n\\nuniform vec2 size;\\nuniform vec2 sizeImage;\\nuniform sampler2D image;\\n\\nvarying vec2 vUv;\\n\\nvec4 coverTexture(sampler2D tex, vec2 imgSize, vec2 ouv) {\\n  vec2 s = size;\\n  vec2 i = imgSize;\\n  float rs = s.x / s.y;\\n  float ri = i.x / i.y;\\n  vec2 new = rs < ri ? vec2(i.x * s.y / i.y, s.y) : vec2(s.x, i.y * s.x / i.x);\\n  vec2 offset = (rs < ri ? vec2((new.x - s.x) / 2.0, 0.0) : vec2(0.0, (new.y - s.y) / 2.0)) / new;\\n  vec2 uv = ouv * s / new + offset;\\n\\n  return texture2D(tex, uv);\\n}\\n\\nvoid main() {\\n  gl_FragColor = coverTexture(image, sizeImage, vUv);\\n}\\n\";","export default \"precision highp float;\\n#define GLSLIFY 1\\n    \\nuniform float time;\\nuniform float speed;\\nuniform vec2 viewport;\\nuniform sampler2D image;\\n\\nfloat parabola(float x, float k) {\\n    return pow(4.0 * x * (1.0 - x), k);\\n}\\n\\nfloat random(vec2 co) {\\n    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\\n}\\n\\nvoid main() {\\n    vec2 uv = gl_FragCoord.xy / viewport;\\n    float spe = speed * 300.0;\\n    float p = parabola(uv.x, 1.4);\\n\\n    float r = texture2D(image, uv + vec2(0.000 * spe, 0.0) * p).r;\\n    float g = texture2D(image, uv + vec2(0.01 * spe, 0.0) * p).g;\\n    float b = texture2D(image, uv + vec2(0.02 * spe, 0.0) * p).b;\\n    float a = texture2D(image, uv + vec2(0.000 * spe, 0.0) * p).w;\\n\\n    gl_FragColor = vec4(r, g, b, a);\\n    \\n    // Film grain effect\\n    float n = random(uv + mod(time, 3.0));\\n    gl_FragColor.rgb *= 1.0 - (n * 0.2);\\n}\";","import './styles.scss';\nimport { baseExperiment } from '../../base';\n// import postprocessingShader from './shaders/postprocessing.glsl';\nimport MainSlider from './main-slider';\nimport MainWebglSlider from './main-slider/webgl-slider';\nimport { isWebGLAvailable } from '../../../utils/webgl';\n\nconst _isWebGLAvailable = isWebGLAvailable();\n\nexport const createSlidersFullscreen = baseExperiment('sliders-fullscreen', ({ canvas, sizes, onRender, gui }) => {\n    const mainSliderContainer = document.querySelector('.js-main-slider');\n    let mainSlider: any;\n    if (mainSliderContainer) {\n        const MainSliderConstructor = _isWebGLAvailable ? MainWebglSlider : MainSlider;\n        mainSlider = new MainSliderConstructor(mainSliderContainer, {\n            duration: 2500,\n            autoplay: true,\n            delay: 5000,\n            // paused: true,\n            canvas,\n        });\n    }\n\n    // function render() {\n    //     console.log('render');\n    //     // material.uniforms.speed = lerp(material.uniforms.speed, speed, 0.6);\n    //     // material.uniforms.speed2 = lerp(material.uniforms.speed2, speed, 0.1);\n    //     // sliderAladino.post.uniforms.speed = lerp(sliderAladino.post.uniforms.speed, speed, 0.1);\n    // }\n\n    // function animate() {\n    //     render();\n    //     this.rAF = requestAnimationFrame(animate);\n    // }\n\n    function destroy() {\n        cancelAnimationFrame(this.rAF);\n\n        if (mainSlider) {\n            mainSlider.destroy();\n            mainSlider = null;\n        }\n\n        gui.destroy();\n    }\n\n    // animate();\n\n    module.hot?.addDisposeHandler(destroy);\n});\n"],"sourceRoot":""}