{"version":3,"sources":["webpack:///./src/js/experiments/base.ts","webpack:///./src/js/utils/index.ts","webpack:///./src/js/sw.ts","webpack:///./src/js/custom-elements/index.ts","webpack:///./src/js/experiments/particles/particles-basic.ts","webpack:///./src/js/experiments/particles/path-trailing/index.ts","webpack:///./src/js/experiments/particles/path-trailing/shaders/vertex.glsl","webpack:///./src/js/experiments/particles/path-trailing/shaders/fragment.glsl","webpack:///./src/js/experiments/particles/path-trailing/russia.png","webpack:///./src/js/experiments/physics/physics-worker.ts","webpack:///./src/js/experiments/shaders/patterns/index.ts","webpack:///./src/js/experiments/shaders/patterns/shaders/vertex.glsl","webpack:///./src/js/experiments/shaders/patterns/shaders/fragment.glsl","webpack:///./src/js/app.ts","webpack:///./src/js/polyfills.ts"],"names":["baseExperiment","name","fn","canvas","document","querySelector","canvasRect","getBoundingClientRect","sizes","width","height","stats","Stats","body","appendChild","domElement","gui","dat","addFolder","onRender","update","window","addEventListener","disposeMesh","mesh","geometry","dispose","material","Array","i","length","unregister","navigator","value","serviceWorker","getRegistrations","then","registrations","forEach","registration","direct","Promise","resolve","result","f","args","arguments","apply","e","reject","_module","register","recover","PUBLIC_PATH","err","console","log","registerCustomElements","createParticlesBasic","rAF","renderer","THREE","outputEncoding","setPixelRatio","Math","min","devicePixelRatio","setSize","camera","position","z","scene","particleTexture","load","particlesGeometry","positions","Float32Array","particlesCount","random","setAttribute","sphere","color","map","size","sizeAttenuation","depthWrite","blending","add","controls","OrbitControls","enableDamping","animate","render","requestAnimationFrame","aspect","updateProjectionMatrix","module","hot","addDisposeHandler","cancelAnimationFrame","createParticlesPathTrailing","svg","Error","svgBBox","getBBox","style","display","svgTexture","texture","params","mapColor","particlesColor","pointsAmountFactor","maxPointsToRender","pointsToRenderFactor","particlesSpeed","opacityFactor","particleSize","max","step","opacity","pathsData","maxPoints","initScene","from","querySelectorAll","path","pathLength","getTotalLength","pointsAmount","floor","points","pointAt","point","getPointAtLength","normalizedPoint","x","y","push","pointsToRender","currentPosition","reduce","acc","pathData","onFinishChange","particlesMaterial","uniforms","uParticleSize","uTime","uColor","vertexShader","fragmentShader","transparent","addColor","onChange","particles","plane","dummyMat4","k","j","set","attributes","array","applyMatrix4","makeScale","needsUpdate","remove","destroy","createPhysicsWorker","shadowMap","enabled","type","objects","world","CANNON","gravity","defaultMaterial","defaultContactMaterial","friction","restitution","addContactMaterial","receiveShadow","floorShape","floorBody","mass","addShape","addBody","ambientLight","directionalLight","target","castShadow","boxGeometry","boxMaterial","metalness","roughness","scale","shape","createBox","clock","oldElapsedTime","elapsedTime","getElapsedTime","deltaTime","copy","createShadersPatterns","defines","PI","sw","accept"],"mappings":"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","file":"js/modern/app.e7d2b3ac.js","sourcesContent":["import Stats from 'three/examples/jsm/libs/stats.module';\nimport * as dat from 'three/examples/jsm/libs/dat.gui.module';\n\ntype Experiment = (data: {\n    canvas: HTMLCanvasElement;\n    onRender: () => void;\n    gui: any;\n    sizes: { width: number; height: number };\n}) => void;\n\nexport function baseExperiment(name: string, fn: Experiment) {\n    return () => {\n        const canvas = document.querySelector<HTMLCanvasElement>(`.js-canvas[data-experiment=\"${name}\"]`);\n\n        if (!canvas) {\n            return;\n        }\n\n        let canvasRect = canvas.getBoundingClientRect();\n\n        const sizes = {\n            width: canvasRect.width,\n            height: canvasRect.height,\n        };\n\n        const stats = new Stats();\n        document.body.appendChild(stats.domElement);\n\n        const gui = new dat.GUI();\n        gui.addFolder();\n\n        function onRender() {\n            stats.update();\n        }\n\n        fn({ sizes, gui, canvas, onRender });\n\n        window.addEventListener('resize', () => {\n            canvasRect = canvas.getBoundingClientRect();\n            sizes.width = canvasRect.width;\n            sizes.height = canvasRect.height;\n        });\n    };\n}\n","import { BackSide, FrontSide, Group, Material, Mesh, Points } from 'three';\n\nexport function disposeMesh(mesh: Mesh | Points) {\n    mesh.geometry?.dispose();\n    if (mesh.material) {\n        if (mesh.material instanceof Array) {\n            for (let i = 0; i < mesh.material.length; ++i) {\n                mesh.material[i].dispose();\n            }\n        } else {\n            mesh.material.dispose();\n        }\n    }\n}\n\nexport function separateCullingPass(mesh: Mesh): Group {\n    const group = new Group();\n\n    [BackSide, FrontSide].forEach((side, i) => {\n        const newMesh = mesh.clone();\n        newMesh.name = `${newMesh.name}__clone${i + 1}`;\n\n        if (mesh.material instanceof Material) {\n            const material = mesh.material.clone();\n            newMesh.material = material;\n            material.transparent = true;\n            material.side = side;\n        }\n\n        group.add(newMesh);\n\n        if (mesh.parent) {\n            mesh.parent.add(group);\n            mesh.parent.remove(mesh);\n            disposeMesh(mesh);\n        }\n    });\n\n    return group;\n}\n","/* global PUBLIC_PATH */\nasync function register() {\n    if ('serviceWorker' in navigator) {\n        try {\n            await navigator.serviceWorker.register(`${PUBLIC_PATH}service-worker.js`);\n        } catch (err) {\n            console.log('SW registration failed: ', err);\n        }\n    }\n}\n\nasync function unregister() {\n    if ('serviceWorker' in navigator) {\n        const registrations = await navigator.serviceWorker.getRegistrations();\n        registrations.forEach((registration) => {\n            registration.unregister();\n        });\n    }\n}\n\nconst _module = { register, unregister };\n\nexport default _module;\n","// import * as Cookies from 'js-cookie';\n\nexport function registerCustomElements() {\n    // if (Cookies.get('COOKIES_USAGE_ACCEPTED') !== 'true') {\n    //     import(/* webpackChunkName: \"CookiesAgreement\" */ './CookiesAgreement/CookiesAgreement').then(\n    //         ({ CookiesAgreement }) => {\n    //             window.customElements.define('x-cookies-agreement', CookiesAgreement);\n    //         },\n    //     );\n    // }\n}\n","import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { baseExperiment } from '../base';\n\nexport const createParticlesBasic = baseExperiment('particles-basic', ({ canvas, sizes, onRender, gui }) => {\n    let rAF: number;\n    const renderer = new THREE.WebGLRenderer({ canvas });\n    renderer.outputEncoding = THREE.sRGBEncoding;\n    renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n    renderer.setSize(sizes.width, sizes.height);\n\n    const camera = new THREE.PerspectiveCamera(45, sizes.width / sizes.height, 0.1, 1000);\n    camera.position.z = 3;\n\n    const scene = new THREE.Scene();\n    const textureLoader = new THREE.TextureLoader();\n\n    const particleTexture = textureLoader.load(`${PUBLIC_PATH}img/particles/8.png`);\n\n    const particlesGeometry = new THREE.BufferGeometry();\n    const particlesCount = 20000;\n    const positions = new Float32Array(particlesCount * 3);\n\n    for (let i = 0; i < particlesCount * 3; i++) {\n        positions[i] = (Math.random() - 0.5) * 4;\n    }\n\n    particlesGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n\n    const sphere = new THREE.Points(\n        particlesGeometry,\n        new THREE.PointsMaterial({\n            color: 0xffffff,\n            map: particleTexture,\n            size: 0.05,\n            sizeAttenuation: true,\n            depthWrite: false,\n            blending: THREE.AdditiveBlending,\n        }),\n    );\n    scene.add(sphere);\n\n    const controls = new OrbitControls(camera, canvas);\n    controls.enableDamping = true;\n\n    function render() {\n        onRender();\n        controls.update();\n        renderer.render(scene, camera);\n    }\n\n    function animate() {\n        render();\n        rAF = requestAnimationFrame(animate);\n    }\n\n    function destroy() {\n        cancelAnimationFrame(rAF);\n        renderer.dispose();\n    }\n\n    animate();\n\n    window.addEventListener('resize', () => {\n        camera.aspect = sizes.width / sizes.height;\n        camera.updateProjectionMatrix();\n        renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n        renderer.setSize(sizes.width, sizes.height);\n    });\n\n    module.hot?.addDisposeHandler(destroy);\n});\n","import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { baseExperiment } from '../../base';\nimport vertexShader from './shaders/vertex.glsl';\nimport fragmentShader from './shaders/fragment.glsl';\nimport { disposeMesh } from '../../../utils';\nimport texture from './russia.png';\n\nexport const createParticlesPathTrailing = baseExperiment(\n    'particles-path-trailing',\n    ({ canvas, sizes, onRender, gui }) => {\n        let rAF: number;\n        const renderer = new THREE.WebGLRenderer({ canvas });\n        renderer.outputEncoding = THREE.sRGBEncoding;\n        renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n        renderer.setSize(sizes.width, sizes.height);\n\n        const camera = new THREE.PerspectiveCamera(45, sizes.width / sizes.height, 0.1, 100);\n        camera.position.z = 10;\n\n        const scene = new THREE.Scene();\n        // const clock = new THREE.Clock();\n\n        const svg = document.querySelector<SVGElement>('svg.js-russia-svg');\n\n        if (!svg) {\n            throw new Error('svg not found');\n        }\n\n        const svgBBox = svg.getBBox();\n        svg.style.display = 'none';\n        const svgTexture = new THREE.TextureLoader().load(texture);\n\n        const params = {\n            mapColor: 0x7071a,\n            // particlesColor: 0x040a14,\n            particlesColor: 0x110800,\n            // pointsAmountFactor: 0.4,\n            pointsAmountFactor: 0.9,\n            // maxPointsToRender: 50,\n            maxPointsToRender: 200,\n            // pointsToRenderFactor: 0.2,\n            pointsToRenderFactor: 0.5,\n            particlesSpeed: 1,\n            // opacityFactor: 0.2,\n            opacityFactor: 0.3,\n            // particleSize: 30,\n            particleSize: 20,\n        };\n        gui?.add(params, 'particlesSpeed').min(0).max(10).step(1);\n        gui?.add(params, 'opacityFactor').min(0).max(1).step(0.001);\n\n        let pathsData: any[] = [];\n        let maxPoints = 0;\n        let positions: Float32Array | null;\n        let opacity: Float32Array | null;\n\n        const particlesGeometry = new THREE.BufferGeometry();\n\n        function initScene() {\n            pathsData = Array.from(svg!.querySelectorAll<SVGPathElement>('.land')).map((path) => {\n                const pathLength = path.getTotalLength();\n                const pointsAmount = Math.floor(pathLength * params.pointsAmountFactor);\n                const points: THREE.Vector3[] = [];\n\n                for (let i = 0; i < pointsAmount; i++) {\n                    const pointAt = (pathLength / pointsAmount) * i;\n                    const point = path.getPointAtLength(pointAt);\n                    const normalizedPoint = {\n                        x: (point.x - svgBBox.width / 2) * 0.01 + Math.random() * 0.02,\n                        y: (point.y - svgBBox.height / 2) * 0.01 + Math.random() * 0.02,\n                        z: 0,\n                    };\n                    points.push(new THREE.Vector3(normalizedPoint.x, normalizedPoint.y, normalizedPoint.z));\n                }\n\n                return {\n                    length: pathLength,\n                    points,\n                    pointsToRender: Math.min(\n                        params.maxPointsToRender,\n                        Math.floor(pointsAmount * params.pointsToRenderFactor),\n                    ),\n                    currentPosition: 0,\n                };\n            });\n            maxPoints = pathsData.reduce((acc, pathData) => acc + pathData.pointsToRender, 0);\n\n            positions = new Float32Array(maxPoints * 3);\n            opacity = new Float32Array(maxPoints);\n\n            for (let i = 0; i < maxPoints * 3; i++) {\n                positions[i] = 0;\n            }\n\n            for (let i = 0; i < maxPoints; i++) {\n                opacity[i] = Math.random() * params.opacityFactor;\n            }\n\n            particlesGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n            particlesGeometry.setAttribute('opacity', new THREE.BufferAttribute(opacity, 1));\n        }\n\n        initScene();\n        gui?.add(params, 'pointsToRenderFactor').min(0).max(1).step(0.01).onFinishChange(initScene);\n        gui?.add(params, 'pointsAmountFactor').min(0).max(3).step(0.01).onFinishChange(initScene);\n        gui?.add(params, 'maxPointsToRender').min(0).max(500).step(1).onFinishChange(initScene);\n\n        const particlesMaterial = new THREE.ShaderMaterial({\n            uniforms: {\n                uParticleSize: { value: params.particleSize },\n                uTime: { value: 0 },\n                uColor: { value: new THREE.Color(params.particlesColor) },\n            },\n            vertexShader,\n            fragmentShader,\n            transparent: true,\n            depthWrite: false,\n            blending: THREE.AdditiveBlending,\n        });\n        gui?.addColor(params, 'particlesColor').onChange(() => {\n            particlesMaterial.uniforms.uColor.value = new THREE.Color(params.particlesColor);\n        });\n        gui?.add(params, 'particleSize')\n            .min(0)\n            .max(100)\n            .step(0.01)\n            .onChange(() => {\n                particlesMaterial.uniforms.uParticleSize.value = params.particleSize;\n            });\n\n        const particles = new THREE.Points(particlesGeometry, particlesMaterial);\n        particles.position.y = 0.33;\n        scene.add(particles);\n\n        const plane = new THREE.Mesh(\n            new THREE.PlaneBufferGeometry(svgBBox.width * 0.01, svgBBox.height * 0.01, 1, 1),\n            new THREE.MeshBasicMaterial({\n                color: params.mapColor,\n                map: svgTexture,\n            }),\n        );\n        scene.add(plane);\n        gui?.addColor(params, 'mapColor').onChange(() => {\n            plane.material.color = new THREE.Color(params.mapColor);\n        });\n\n        const dummyMat4 = new THREE.Matrix4();\n\n        const controls = new OrbitControls(camera, canvas);\n        controls.enableDamping = true;\n\n        function render() {\n            // const elapsedTime = clock.getElapsedTime();\n\n            onRender();\n            // particlesMaterial.uniforms.uTime.value = elapsedTime;\n            let k = 0;\n\n            for (let i = 0; i < pathsData.length; i++) {\n                pathsData[i].currentPosition =\n                    (pathsData[i].currentPosition + params.particlesSpeed) % pathsData[i].points.length;\n\n                for (let j = 0; j < pathsData[i].pointsToRender; j++) {\n                    const point = pathsData[i].points[(j + pathsData[i].currentPosition) % pathsData[i].points.length];\n                    positions?.set([point.x, point.y, point.z], k * 3);\n\n                    if (opacity) {\n                        opacity[k] = j / (pathsData[i].pointsToRender / params.opacityFactor);\n                    }\n\n                    k++;\n                }\n            }\n\n            particlesGeometry.attributes.position.array = positions;\n            particlesGeometry.applyMatrix4(dummyMat4.makeScale(1, -1, 1));\n            particlesGeometry.attributes.opacity.array = opacity;\n            particlesGeometry.attributes.position.needsUpdate = true;\n            particlesGeometry.attributes.opacity.needsUpdate = true;\n\n            controls.update();\n            renderer.render(scene, camera);\n        }\n\n        function animate() {\n            render();\n            rAF = requestAnimationFrame(animate);\n        }\n\n        function destroy() {\n            if (svg) {\n                svg.style.display = 'block';\n            }\n\n            cancelAnimationFrame(rAF);\n            scene.remove(particles);\n            disposeMesh(particles);\n            renderer.dispose();\n            gui.destroy();\n        }\n\n        animate();\n\n        window.addEventListener('resize', () => {\n            camera.aspect = sizes.width / sizes.height;\n            camera.updateProjectionMatrix();\n            renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n            renderer.setSize(sizes.width, sizes.height);\n        });\n\n        module.hot?.addDisposeHandler(destroy);\n    },\n);\n","export default \"#define GLSLIFY 1\\nuniform float uParticleSize;\\n\\nattribute float opacity;\\n\\nvarying float vOpacity;\\n\\nvoid main() {\\n    vOpacity = opacity;\\n\\n    vec4 mvPosition = modelViewMatrix * vec4(position, 1.);\\n\\n    gl_PointSize = uParticleSize * (-1. / mvPosition.z);\\n    gl_Position = projectionMatrix * mvPosition;\\n}\";","export default \"#define GLSLIFY 1\\nuniform vec3 uColor;\\n\\nvarying float vOpacity;\\n\\nvoid main() {\\n    vec2 uv = vec2(gl_PointCoord.x, 1. - gl_PointCoord.y);\\n    vec2 centerUv = uv - 0.5;\\n\\n    vec4 color = vec4(0.08 / length(centerUv));\\n    color.rgb = min(vec3(10.), color.rgb);\\n    color.rgb *= uColor * 100.;\\n    color *= vOpacity;\\n    color.a = min(1., color.a);\\n\\n    gl_FragColor = vec4(color.rgb, 1.);\\n}\";","export default __webpack_public_path__ + \"img/russia.png\";","import * as THREE from 'three';\nimport Stats from 'three/examples/jsm/libs/stats.module';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport * as dat from 'three/examples/jsm/libs/dat.gui.module';\nimport * as CANNON from 'cannon-es';\n\nexport function createPhysicsWorker() {\n    const canvas = document.querySelector<HTMLCanvasElement>('.js-canvas[data-experiment=\"physics-worker\"]');\n    let rAF: number;\n\n    if (!canvas) return;\n\n    let canvasRect = canvas.getBoundingClientRect();\n\n    const sizes = {\n        width: canvasRect.width,\n        height: canvasRect.height,\n    };\n\n    const gui = new dat.GUI();\n    gui.addFolder('');\n\n    const renderer = new THREE.WebGLRenderer({ canvas });\n    renderer.shadowMap.enabled = true;\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n    renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n    renderer.setSize(sizes.width, sizes.height);\n\n    const camera = new THREE.PerspectiveCamera(45, sizes.width / sizes.height, 0.1, 1000);\n    camera.position.set(-5, 7, 12);\n    const scene = new THREE.Scene();\n\n    const objects: any[] = [];\n    const world = new CANNON.World();\n    world.gravity.set(0, -9.82, 0);\n\n    const defaultMaterial = new CANNON.Material('default');\n    const defaultContactMaterial = new CANNON.ContactMaterial(defaultMaterial, defaultMaterial, {\n        friction: 0.1,\n        restitution: 0.7,\n    });\n\n    world.addContactMaterial(defaultContactMaterial);\n    world.defaultContactMaterial = defaultContactMaterial;\n\n    const plane = new THREE.Mesh(new THREE.PlaneBufferGeometry(25, 25, 25), new THREE.MeshStandardMaterial());\n    plane.receiveShadow = true;\n    // plane.rotation.x = -Math.PI / 2;\n    scene.add(plane);\n\n    const floorShape = new CANNON.Plane();\n    const floorBody = new CANNON.Body({ material: defaultMaterial });\n    floorBody.mass = 0;\n    floorBody.addShape(floorShape);\n    // floorBody.quaternion.setFromAxisAngle(new CANNON.Vec3(-1, 0, 0), Math.PI * 0.5);\n    world.addBody(floorBody);\n\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.35);\n    scene.add(ambientLight);\n\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.5);\n    directionalLight.position.set(0.3, 0.5, 0.5);\n    directionalLight.target = plane;\n    directionalLight.castShadow = true;\n    scene.add(directionalLight);\n    gui.add(directionalLight.position, 'x').min(-10).max(10).step(0.001);\n    gui.add(directionalLight.position, 'y').min(-10).max(10).step(0.001);\n    gui.add(directionalLight.position, 'z').min(-10).max(10).step(0.001);\n\n    const boxGeometry = new THREE.BoxBufferGeometry(1, 1, 1);\n    const boxMaterial = new THREE.MeshStandardMaterial({\n        metalness: 0.5,\n        roughness: 0.45,\n    });\n\n    function createBox(size = 1, position: { x: number; y: number; z: number }) {\n        const mesh = new THREE.Mesh(boxGeometry, boxMaterial);\n        mesh.castShadow = true;\n        mesh.scale.set(size, size, size);\n        mesh.position.x = position.x;\n        mesh.position.y = position.y;\n        mesh.position.z = position.z;\n        scene.add(mesh);\n\n        const shape = new CANNON.Box(new CANNON.Vec3(position.x, position.y, position.z));\n        const body = new CANNON.Body({\n            mass: 1,\n            position: new CANNON.Vec3(position.x, position.y, position.z),\n            shape,\n        });\n\n        world.addBody(body);\n        objects.push({ mesh, body });\n        // body.applyLocalForce(new CANNON.Vec3(150, 0, 0), new CANNON.Vec3(0, 0, 0));\n    }\n\n    createBox(1, { x: 0, y: 3, z: 0 });\n\n    const clock = new THREE.Clock();\n    let oldElapsedTime = 0;\n\n    const controls = new OrbitControls(camera, canvas);\n    controls.enableDamping = true;\n\n    const stats = new Stats();\n    document.body.appendChild(stats.domElement);\n\n    function render() {\n        const elapsedTime = clock.getElapsedTime();\n        const deltaTime = elapsedTime - oldElapsedTime;\n        oldElapsedTime = elapsedTime;\n\n        // Update physics world\n        world.step(1 / 60, deltaTime, 3);\n\n        for (let i = 0; i < objects.length; i++) {\n            objects[i].mesh.position.copy(objects[i].body.position);\n        }\n\n        controls.update();\n        stats.update();\n\n        renderer.render(scene, camera);\n    }\n\n    function animate() {\n        render();\n        rAF = requestAnimationFrame(animate);\n    }\n\n    function destroy() {\n        cancelAnimationFrame(rAF);\n        gui.destroy();\n        boxGeometry.dispose();\n        boxMaterial.dispose();\n        renderer.dispose();\n    }\n\n    animate();\n\n    window.addEventListener('resize', () => {\n        canvasRect = canvas.getBoundingClientRect();\n        sizes.width = canvasRect.width;\n        sizes.height = canvasRect.height;\n        camera.aspect = sizes.width / sizes.height;\n        camera.updateProjectionMatrix();\n        renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n        renderer.setSize(sizes.width, sizes.height);\n    });\n\n    module.hot?.addDisposeHandler(destroy);\n}\n","import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { baseExperiment } from '../../base';\nimport vertexShader from './shaders/vertex.glsl';\nimport fragmentShader from './shaders/fragment.glsl';\nimport { disposeMesh } from '../../../utils';\n\nexport const createShadersPatterns = baseExperiment('shaders-patterns', ({ canvas, sizes, onRender, gui }) => {\n    let rAF: number;\n    const renderer = new THREE.WebGLRenderer({ canvas });\n    renderer.outputEncoding = THREE.sRGBEncoding;\n    renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n    renderer.setSize(sizes.width, sizes.height);\n\n    const camera = new THREE.PerspectiveCamera(45, sizes.width / sizes.height, 0.1, 100);\n    camera.position.z = 10;\n\n    const scene = new THREE.Scene();\n    // const clock = new THREE.Clock();\n\n    // const params = {\n    //     mapColor: 0x7071a,\n    //     // particlesColor: 0x040a14,\n    //     particlesColor: 0x110800,\n    //     // pointsAmountFactor: 0.4,\n    //     pointsAmountFactor: 0.9,\n    //     // maxPointsToRender: 50,\n    //     maxPointsToRender: 200,\n    //     // pointsToRenderFactor: 0.2,\n    //     pointsToRenderFactor: 0.5,\n    //     particlesSpeed: 1,\n    //     // opacityFactor: 0.2,\n    //     opacityFactor: 0.3,\n    //     // particleSize: 30,\n    //     particleSize: 20,\n    // };\n\n    const geometry = new THREE.PlaneBufferGeometry(6, 6, 1, 1);\n\n    const material = new THREE.ShaderMaterial({\n        defines: {\n            PI: Math.PI,\n        },\n        uniforms: {\n            uTime: { value: 0 },\n        },\n        vertexShader,\n        fragmentShader,\n        transparent: true,\n    });\n\n    const mesh = new THREE.Mesh(geometry, material);\n    mesh.position.y = 0.33;\n    scene.add(mesh);\n\n    const controls = new OrbitControls(camera, canvas);\n    controls.enableDamping = true;\n\n    function render() {\n        onRender();\n\n        controls.update();\n        renderer.render(scene, camera);\n    }\n\n    function animate() {\n        render();\n        rAF = requestAnimationFrame(animate);\n    }\n\n    function destroy() {\n        cancelAnimationFrame(rAF);\n        scene.remove(mesh);\n        disposeMesh(mesh);\n        renderer.dispose();\n        gui.destroy();\n    }\n\n    animate();\n\n    window.addEventListener('resize', () => {\n        camera.aspect = sizes.width / sizes.height;\n        camera.updateProjectionMatrix();\n        renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n        renderer.setSize(sizes.width, sizes.height);\n    });\n\n    module.hot?.addDisposeHandler(destroy);\n});\n","export default \"#define GLSLIFY 1\\nvarying vec2 vUv;\\n\\nvoid main() {\\n    vUv = uv;\\n    vec4 mvPosition = modelViewMatrix * vec4(position, 1.);\\n    gl_Position = projectionMatrix * mvPosition;\\n}\";","export default \"#define GLSLIFY 1\\n// #define PI 3.1415926535897932384626433832795\\n\\nvec2 rotate(vec2 uv, float rotation, vec2 mid) {\\n    return vec2(\\n      cos(rotation) * (uv.x - mid.x) + sin(rotation) * (uv.y - mid.y) + mid.x,\\n      cos(rotation) * (uv.y - mid.y) - sin(rotation) * (uv.x - mid.x) + mid.y\\n    );\\n}\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n    // vec2 rotatedUv = rotate(vUv, PI / 4., vec2(0.5));\\n\\n    vec3 color = vec3(distance(vUv, vec2(0.5)));\\n\\n    // gl_FragColor = vec4(rotatedUv, 0., 1.);\\n    gl_FragColor = vec4(color, 1.);\\n}\";","/* global USE_SERVICE_WORKER */\nimport './webpack-imports';\nimport './sentry';\nimport './polyfills';\n\nimport sw from './sw';\nimport { registerCustomElements } from './custom-elements';\nimport { createParticlesBasic } from './experiments/particles/particles-basic';\nimport { createParticlesPathTrailing } from './experiments/particles/path-trailing';\nimport { createPhysicsWorker } from './experiments/physics/physics-worker';\nimport { createShadersPatterns } from './experiments/shaders/patterns';\n\nregisterCustomElements();\n\ncreateParticlesBasic();\ncreateParticlesPathTrailing();\ncreatePhysicsWorker();\ncreateShadersPatterns();\n\n// Service Worker\nif (USE_SERVICE_WORKER) {\n    window.addEventListener('load', () => sw.register());\n} else {\n    sw.unregister();\n}\n\nmodule.hot?.accept();\n","/* global BUILD_TYPE */\n/* eslint global-require: \"off\" */\nimport 'focus-visible';\n// import 'intersection-observer';\n\nif (BUILD_TYPE === 'legacy') {\n    require('core-js/es/symbol');\n    require('core-js/es/promise/finally');\n    require('document-register-element/build/document-register-element');\n    // require('element-matches-polyfill');\n    require('whatwg-fetch');\n}\n"],"sourceRoot":""}