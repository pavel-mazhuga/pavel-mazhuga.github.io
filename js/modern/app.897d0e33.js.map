{"version":3,"sources":["webpack:///./src/js/experiments/base.ts","webpack:///./src/js/sw.ts","webpack:///./src/js/custom-elements/index.ts","webpack:///./src/js/experiments/particles/particles-basic.ts","webpack:///./src/js/experiments/particles/path-trailing/index.ts","webpack:///./src/js/experiments/particles/path-trailing/shaders/vertex.glsl","webpack:///./src/js/experiments/particles/path-trailing/shaders/fragment.glsl","webpack:///./src/js/utils/index.ts","webpack:///./src/js/experiments/particles/path-trailing/russia.png","webpack:///./src/js/experiments/physics/physics-worker.ts","webpack:///./src/js/app.ts","webpack:///./src/js/polyfills.ts"],"names":["baseExperiment","name","fn","canvas","document","querySelector","canvasRect","getBoundingClientRect","sizes","width","height","stats","Stats","body","appendChild","domElement","gui","dat","addFolder","onRender","update","window","addEventListener","unregister","navigator","value","serviceWorker","getRegistrations","then","registrations","forEach","registration","direct","Promise","resolve","result","f","args","i","arguments","length","apply","e","reject","_module","register","recover","PUBLIC_PATH","err","console","log","registerCustomElements","createParticlesBasic","rAF","renderer","THREE","outputEncoding","setPixelRatio","Math","min","devicePixelRatio","setSize","camera","position","z","scene","particleTexture","load","particlesGeometry","positions","Float32Array","particlesCount","random","setAttribute","sphere","color","map","size","sizeAttenuation","depthWrite","blending","add","controls","OrbitControls","enableDamping","animate","render","requestAnimationFrame","aspect","updateProjectionMatrix","module","hot","addDisposeHandler","cancelAnimationFrame","dispose","createParticlesPathTrailing","svg","Error","svgBBox","getBBox","style","display","svgTexture","texture","params","mapColor","particlesColor","pointsAmountFactor","maxPointsToRender","pointsToRenderFactor","particlesSpeed","opacityFactor","particleSize","max","step","opacity","pathsData","maxPoints","initScene","Array","from","querySelectorAll","path","pathLength","getTotalLength","pointsAmount","floor","points","pointAt","point","getPointAtLength","normalizedPoint","x","y","push","pointsToRender","currentPosition","reduce","acc","pathData","onFinishChange","particlesMaterial","uniforms","uParticleSize","uTime","uColor","vertexShader","fragmentShader","transparent","addColor","onChange","particles","plane","material","dummyMat4","k","j","set","attributes","array","applyMatrix4","makeScale","needsUpdate","remove","disposeMesh","destroy","mesh","geometry","createPhysicsWorker","shadowMap","enabled","type","objects","world","CANNON","gravity","defaultMaterial","defaultContactMaterial","friction","restitution","addContactMaterial","receiveShadow","floorShape","floorBody","mass","addShape","addBody","ambientLight","directionalLight","target","castShadow","boxGeometry","boxMaterial","metalness","roughness","scale","shape","createBox","clock","oldElapsedTime","elapsedTime","getElapsedTime","deltaTime","copy","sw","accept"],"mappings":"+GAAA,sDAUO,SAASA,EAAeC,EAAcC,GACzC,MAAO,KACH,IAAMC,EAASC,SAASC,cAAT,+BAAyEJ,EAAzE,MAEf,GAAKE,EAAL,CAIA,IAAIG,EAAaH,EAAOI,wBAElBC,EAAQ,CACVC,MAAOH,EAAWG,MAClBC,OAAQJ,EAAWI,QAGjBC,EAAQ,IAAIC,IAClBR,SAASS,KAAKC,YAAYH,EAAMI,YAEhC,IAAMC,EAAM,IAAIC,IAChBD,EAAIE,YAMJhB,EAAG,CAAEM,QAAOQ,MAAKb,SAAQgB,SAJzB,WACIR,EAAMS,YAKVC,OAAOC,iBAAiB,UAAU,KAC9BhB,EAAaH,EAAOI,wBACpBC,EAAMC,MAAQH,EAAWG,MACzBD,EAAME,OAASJ,EAAWI,c,gCCwjB/B,c,IArlBQa,E,cAAa,wBACpB,kBAAmBC,UADC,OAyELC,EAvEaD,UAAUE,cAAcC,mBAuE9BC,EAzEF,SAEdC,GACNA,EAAcC,SAASC,IACnBA,EAAaR,iBAsEpBS,EACIJ,EAAOA,EAAKH,GAASA,GAExBA,GAAUA,EAAMG,OACpBH,EAAQQ,QAAQC,QAAQT,IAElBG,EAAOH,EAAMG,KAAKA,GAAQH,GAP3B,IAAgBA,EAAOG,EAAMI,QAsd7B,WAAwBnB,GAC9B,IAAIsB,EAAStB,IACb,GAAIsB,GAAUA,EAAOP,KACpB,OAAOO,EAAOP,KAAP,GAveF,WAAgBQ,GACtB,OAAO,WACN,IAAK,IAAIC,EAAO,GAAIC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAChDD,EAAKC,GAAKC,UAAUD,GAErB,IACC,OAAOL,QAAQC,QAAQE,EAAEK,MAAM,KAAMJ,IACpC,MAAMK,GACP,OAAOT,QAAQU,OAAOD,KA1DzB,IAAME,EAAU,CAAEC,S,cAnBQ,wBAClB,kBAAmBrB,UADD,OA0GnB,SAA0BC,GAChC,GAAIA,GAASA,EAAMG,KAClB,OAAOH,EAAMG,KAAN,GA5GiB,CAijBnB,SAAgBf,EAAMiC,GAC5B,IACC,IAAIX,EAAStB,IACZ,MAAM6B,GACP,OAAOI,EAAQJ,GAEhB,GAAIP,GAAUA,EAAOP,KACpB,OAAOO,EAAOP,UAAK,EAAQkB,GAE5B,OAAOX,EA1jBkB,aAEd,OA4FL,SAAuBV,EAAOO,GACpC,IAAKA,EACJ,OAAOP,GAASA,EAAMG,KAAOH,EAAMG,KAAN,GAAqBK,QAAQC,UA9FhD,CACMV,UAAUE,cAAcmB,SAAYE,0BAH5B,SAITC,GACLC,QAAQC,IAAI,2BAA4BF,aAcxBzB,cAEbqB,O,gCCpBR,SAASO,KAFhB,mC,kICIaC,EAAuBpD,YAAe,mBAAoB,IAAqC,MACpGqD,GAD+D,OAAElD,EAAF,MAAUK,EAAV,SAAiBW,EAAjB,IAA2BH,GAAU,EAElGsC,EAAW,IAAIC,IAAoB,CAAEpD,WAC3CmD,EAASE,eAAiBD,IAC1BD,EAASG,cAAcC,KAAKC,IAAI,EAAGtC,OAAOuC,mBAC1CN,EAASO,QAAQrD,EAAMC,MAAOD,EAAME,QAEpC,IAAMoD,EAAS,IAAIP,IAAwB,GAAI/C,EAAMC,MAAQD,EAAME,OAAQ,GAAK,KAChFoD,EAAOC,SAASC,EAAI,EAWpB,IATA,IAAMC,EAAQ,IAAIV,IAGZW,GAFgB,IAAIX,KAEYY,KAAQpB,wBAExCqB,EAAoB,IAAIb,IAExBc,EAAY,IAAIC,aAAaC,KAE1BjC,EAAI,EAAGA,EAAIiC,IAAoBjC,IACpC+B,EAAU/B,GAA6B,GAAvBoB,KAAKc,SAAW,IAGpCJ,EAAkBK,aAAa,WAAY,IAAIlB,IAAsBc,EAAW,IAEhF,IAAMK,EAAS,IAAInB,IACfa,EACA,IAAIb,IAAqB,CACrBoB,MAAO,SACPC,IAAKV,EACLW,KAAM,IACNC,iBAAiB,EACjBC,YAAY,EACZC,SAAUzB,OAGlBU,EAAMgB,IAAIP,GAEV,IAAMQ,EAAW,IAAIC,IAAcrB,EAAQ3D,GAC3C+E,EAASE,eAAgB,EAQzB,SAASC,IALLlE,IACA+D,EAAS9D,SACTkC,EAASgC,OAAOrB,EAAOH,GAKvBT,EAAMkC,sBAAsBF,GAQhCA,GAEAhE,OAAOC,iBAAiB,UAAU,KAC9BwC,EAAO0B,OAAShF,EAAMC,MAAQD,EAAME,OACpCoD,EAAO2B,yBACPnC,EAASG,cAAcC,KAAKC,IAAI,EAAGtC,OAAOuC,mBAC1CN,EAASO,QAAQrD,EAAMC,MAAOD,EAAME,WAGxC,SAAAgF,EAAOC,MAAP,EAAYC,mBAdZ,WACIC,qBAAqBxC,GACrBC,EAASwC,kB,8LClDJC,EAA8B/F,YACvC,2BACC,IAAqC,MAC9BqD,GADP,OAAElD,EAAF,MAAUK,EAAV,SAAiBW,EAAjB,IAA2BH,GAAU,EAE5BsC,EAAW,IAAIC,IAAoB,CAAEpD,WAC3CmD,EAASE,eAAiBD,IAC1BD,EAASG,cAAcC,KAAKC,IAAI,EAAGtC,OAAOuC,mBAC1CN,EAASO,QAAQrD,EAAMC,MAAOD,EAAME,QAEpC,IAAMoD,EAAS,IAAIP,IAAwB,GAAI/C,EAAMC,MAAQD,EAAME,OAAQ,GAAK,KAChFoD,EAAOC,SAASC,EAAI,GAEpB,IAAMC,EAAQ,IAAIV,IAGZyC,EAAM5F,SAASC,cAA0B,qBAE/C,IAAK2F,EACD,MAAM,IAAIC,MAAM,iBAGpB,IAAMC,EAAUF,EAAIG,UACpBH,EAAII,MAAMC,QAAU,OACpB,IAAMC,GAAa,IAAI/C,KAAsBY,KAAKoC,KAE5CC,EAAS,CACXC,SAAU,OAEVC,eAAgB,QAEhBC,mBAAoB,GAEpBC,kBAAmB,IAEnBC,qBAAsB,GACtBC,eAAgB,EAEhBC,cAAe,GAEfC,aAAc,IAEf,MAAHhG,KAAKiE,IAAIuB,EAAQ,kBAAkB7C,IAAI,GAAGsD,IAAI,IAAIC,KAAK,GACpD,MAAHlG,KAAKiE,IAAIuB,EAAQ,iBAAiB7C,IAAI,GAAGsD,IAAI,GAAGC,KAAK,MAErD,IAEI7C,EACA8C,EAHAC,EAAmB,GACnBC,EAAY,EAIVjD,EAAoB,IAAIb,IAE9B,SAAS+D,IACLF,EAAYG,MAAMC,KAAKxB,EAAKyB,iBAAiC,UAAU7C,KAAK8C,IAKxE,IAJA,IAAMC,EAAaD,EAAKE,iBAClBC,EAAenE,KAAKoE,MAAMH,EAAanB,EAAOG,oBAC9CoB,EAA0B,GAEvBzF,EAAI,EAAGA,EAAIuF,EAAcvF,IAAK,CACnC,IAAM0F,EAAWL,EAAaE,EAAgBvF,EACxC2F,EAAQP,EAAKQ,iBAAiBF,GAC9BG,EAAkB,CACpBC,EAAmC,KAA/BH,EAAMG,EAAIlC,EAAQzF,MAAQ,GAA4B,IAAhBiD,KAAKc,SAC/C6D,EAAoC,KAAhCJ,EAAMI,EAAInC,EAAQxF,OAAS,GAA4B,IAAhBgD,KAAKc,SAChDR,EAAG,GAEP+D,EAAOO,KAAK,IAAI/E,IAAc4E,EAAgBC,EAAGD,EAAgBE,EAAGF,EAAgBnE,IAGxF,MAAO,CACHxB,OAAQmF,EACRI,SACAQ,eAAgB7E,KAAKC,IACjB6C,EAAOI,kBACPlD,KAAKoE,MAAMD,EAAerB,EAAOK,uBAErC2B,gBAAiB,MAGzBnB,EAAYD,EAAUqB,QAAO,CAACC,EAAKC,IAAaD,EAAMC,EAASJ,gBAAgB,GAE/ElE,EAAY,IAAIC,aAAyB,EAAZ+C,GAC7BF,EAAU,IAAI7C,aAAa+C,GAE3B,IAAK,IAAI/E,EAAI,EAAGA,EAAgB,EAAZ+E,EAAe/E,IAC/B+B,EAAU/B,GAAK,EAGnB,IAAK,IAAIA,EAAI,EAAGA,EAAI+E,EAAW/E,IAC3B6E,EAAQ7E,GAAKoB,KAAKc,SAAWgC,EAAOO,cAGxC3C,EAAkBK,aAAa,WAAY,IAAIlB,IAAsBc,EAAW,IAChFD,EAAkBK,aAAa,UAAW,IAAIlB,IAAsB4D,EAAS,IAGjFG,IACG,MAAHtG,KAAKiE,IAAIuB,EAAQ,wBAAwB7C,IAAI,GAAGsD,IAAI,GAAGC,KAAK,KAAM0B,eAAetB,GAC9E,MAAHtG,KAAKiE,IAAIuB,EAAQ,sBAAsB7C,IAAI,GAAGsD,IAAI,GAAGC,KAAK,KAAM0B,eAAetB,GAC5E,MAAHtG,KAAKiE,IAAIuB,EAAQ,qBAAqB7C,IAAI,GAAGsD,IAAI,KAAKC,KAAK,GAAG0B,eAAetB,GAE7E,IAAMuB,EAAoB,IAAItF,IAAqB,CAC/CuF,SAAU,CACNC,cAAe,CAAEtH,MAAO+E,EAAOQ,cAC/BgC,MAAO,CAAEvH,MAAO,GAChBwH,OAAQ,CAAExH,MAAO,IAAI8B,IAAYiD,EAAOE,kBAE5CwC,iBACAC,mBACAC,aAAa,EACbrE,YAAY,EACZC,SAAUzB,MAEX,MAAHvC,KAAKqI,SAAS7C,EAAQ,kBAAkB8C,UAAS,KAC7CT,EAAkBC,SAASG,OAAOxH,MAAQ,IAAI8B,IAAYiD,EAAOE,mBAElE,MAAH1F,KAAKiE,IAAIuB,EAAQ,gBACZ7C,IAAI,GACJsD,IAAI,KACJC,KAAK,KACLoC,UAAS,KACNT,EAAkBC,SAASC,cAActH,MAAQ+E,EAAOQ,gBAGhE,IAAMuC,EAAY,IAAIhG,IAAaa,EAAmByE,GACtDU,EAAUxF,SAASsE,EAAI,IACvBpE,EAAMgB,IAAIsE,GAEV,IAAMC,EAAQ,IAAIjG,IACd,IAAIA,IAA0C,IAAhB2C,EAAQzF,MAA+B,IAAjByF,EAAQxF,OAAe,EAAG,GAC9E,IAAI6C,IAAwB,CACxBoB,MAAO6B,EAAOC,SACd7B,IAAK0B,KAGbrC,EAAMgB,IAAIuE,GACP,MAAHxI,KAAKqI,SAAS7C,EAAQ,YAAY8C,UAAS,KACvCE,EAAMC,SAAS9E,MAAQ,IAAIpB,IAAYiD,EAAOC,aAGlD,IAAMiD,EAAY,IAAInG,IAEhB2B,EAAW,IAAIC,IAAcrB,EAAQ3D,GAC3C+E,EAASE,eAAgB,EAmCzB,SAASC,KAjCT,WAGIlE,IAIA,IAFA,IAAIwI,EAAI,EAECrH,EAAI,EAAGA,EAAI8E,EAAU5E,OAAQF,IAAK,CACvC8E,EAAU9E,GAAGkG,iBACRpB,EAAU9E,GAAGkG,gBAAkBhC,EAAOM,gBAAkBM,EAAU9E,GAAGyF,OAAOvF,OAEjF,IAAK,IAAIoH,EAAI,EAAGA,EAAIxC,EAAU9E,GAAGiG,eAAgBqB,IAAK,OAC5C3B,EAAQb,EAAU9E,GAAGyF,QAAQ6B,EAAIxC,EAAU9E,GAAGkG,iBAAmBpB,EAAU9E,GAAGyF,OAAOvF,QAClF,OAAT,EAAA6B,IAAA,EAAWwF,IAAI,CAAC5B,EAAMG,EAAGH,EAAMI,EAAGJ,EAAMjE,GAAQ,EAAJ2F,GAExCxC,IACAA,EAAQwC,GAAKC,GAAKxC,EAAU9E,GAAGiG,eAAiB/B,EAAOO,gBAG3D4C,KAIRvF,EAAkB0F,WAAW/F,SAASgG,MAAQ1F,EAC9CD,EAAkB4F,aAAaN,EAAUO,UAAU,GAAI,EAAG,IAC1D7F,EAAkB0F,WAAW3C,QAAQ4C,MAAQ5C,EAC7C/C,EAAkB0F,WAAW/F,SAASmG,aAAc,EACpD9F,EAAkB0F,WAAW3C,QAAQ+C,aAAc,EAEnDhF,EAAS9D,SACTkC,EAASgC,OAAOrB,EAAOH,GAIvBwB,GACAjC,EAAMkC,sBAAsBF,GAehCA,GAEAhE,OAAOC,iBAAiB,UAAU,KAC9BwC,EAAO0B,OAAShF,EAAMC,MAAQD,EAAME,OACpCoD,EAAO2B,yBACPnC,EAASG,cAAcC,KAAKC,IAAI,EAAGtC,OAAOuC,mBAC1CN,EAASO,QAAQrD,EAAMC,MAAOD,EAAME,WAGxC,SAAAgF,EAAOC,MAAP,EAAYC,mBArBZ,WACQI,IACAA,EAAII,MAAMC,QAAU,SAGxBR,qBAAqBxC,GACrBY,EAAMkG,OAAOZ,GACba,YAAYb,GACZjG,EAASwC,UACT9E,EAAIqJ,kB,qDCvMD,wU,gCCAA,6Z,gCCAf,uCAEO,SAASD,EAAYE,GAAqB,MAE7C,GADA,SAAAA,EAAKC,WAAL,EAAezE,UACXwE,EAAKb,SACL,GAAIa,EAAKb,oBAAoBlC,MACzB,IAAK,IAAIjF,EAAI,EAAGA,EAAIgI,EAAKb,SAASjH,SAAUF,EACxCgI,EAAKb,SAASnH,GAAGwD,eAGrBwE,EAAKb,SAAS3D,Y,gCCVX,QAA0B,kB,iCCAzC,wFAMO,SAAS0E,IAAsB,MAE9BnH,EADElD,EAASC,SAASC,cAAiC,gDAGzD,GAAKF,EAAL,CAEA,IAAIG,EAAaH,EAAOI,wBAElBC,EAAQ,CACVC,MAAOH,EAAWG,MAClBC,OAAQJ,EAAWI,QAGjBM,EAAM,IAAIC,IAChBD,EAAIE,UAAU,IAEd,IAAMoC,EAAW,IAAIC,IAAoB,CAAEpD,WAC3CmD,EAASmH,UAAUC,SAAU,EAC7BpH,EAASmH,UAAUE,KAAOpH,IAC1BD,EAASG,cAAcC,KAAKC,IAAI,EAAGtC,OAAOuC,mBAC1CN,EAASO,QAAQrD,EAAMC,MAAOD,EAAME,QAEpC,IAAMoD,EAAS,IAAIP,IAAwB,GAAI/C,EAAMC,MAAQD,EAAME,OAAQ,GAAK,KAChFoD,EAAOC,SAAS8F,KAAK,EAAG,EAAG,IAC3B,IAAM5F,EAAQ,IAAIV,IAEZqH,EAAiB,GACjBC,EAAQ,IAAIC,IAClBD,EAAME,QAAQlB,IAAI,GAAI,KAAM,GAE5B,IAAMmB,EAAkB,IAAIF,IAAgB,WACtCG,EAAyB,IAAIH,IAAuBE,EAAiBA,EAAiB,CACxFE,SAAU,GACVC,YAAa,KAGjBN,EAAMO,mBAAmBH,GACzBJ,EAAMI,uBAAyBA,EAE/B,IAAMzB,EAAQ,IAAIjG,IAAW,IAAIA,IAA0B,GAAI,GAAI,IAAK,IAAIA,KAC5EiG,EAAM6B,eAAgB,EAEtBpH,EAAMgB,IAAIuE,GAEV,IAAM8B,EAAa,IAAIR,IACjBS,EAAY,IAAIT,IAAY,CAAErB,SAAUuB,IAC9CO,EAAUC,KAAO,EACjBD,EAAUE,SAASH,GAEnBT,EAAMa,QAAQH,GAEd,IAAMI,EAAe,IAAIpI,IAAmB,SAAU,KACtDU,EAAMgB,IAAI0G,GAEV,IAAMC,EAAmB,IAAIrI,IAAuB,SAAU,IAC9DqI,EAAiB7H,SAAS8F,IAAI,GAAK,GAAK,IACxC+B,EAAiBC,OAASrC,EAC1BoC,EAAiBE,YAAa,EAC9B7H,EAAMgB,IAAI2G,GACV5K,EAAIiE,IAAI2G,EAAiB7H,SAAU,KAAKJ,KAAK,IAAIsD,IAAI,IAAIC,KAAK,MAC9DlG,EAAIiE,IAAI2G,EAAiB7H,SAAU,KAAKJ,KAAK,IAAIsD,IAAI,IAAIC,KAAK,MAC9DlG,EAAIiE,IAAI2G,EAAiB7H,SAAU,KAAKJ,KAAK,IAAIsD,IAAI,IAAIC,KAAK,MAE9D,IAAM6E,EAAc,IAAIxI,IAAwB,EAAG,EAAG,GAChDyI,EAAc,IAAIzI,IAA2B,CAC/C0I,UAAW,GACXC,UAAW,OAGf,SAAmBrH,EAAUd,QAA+C,IAAzDc,MAAO,GACtB,IAAMyF,EAAO,IAAI/G,IAAWwI,EAAaC,GACzC1B,EAAKwB,YAAa,EAClBxB,EAAK6B,MAAMtC,IAAIhF,EAAMA,EAAMA,GAC3ByF,EAAKvG,SAASqE,EAAIrE,EAASqE,EAC3BkC,EAAKvG,SAASsE,EAAItE,EAASsE,EAC3BiC,EAAKvG,SAASC,EAAID,EAASC,EAC3BC,EAAMgB,IAAIqF,GAEV,IAAM8B,EAAQ,IAAItB,IAAW,IAAIA,IAAY/G,EAASqE,EAAGrE,EAASsE,EAAGtE,EAASC,IACxEnD,EAAO,IAAIiK,IAAY,CACzBU,KAAM,EACNzH,SAAU,IAAI+G,IAAY/G,EAASqE,EAAGrE,EAASsE,EAAGtE,EAASC,GAC3DoI,UAGJvB,EAAMa,QAAQ7K,GACd+J,EAAQtC,KAAK,CAAEgC,OAAMzJ,SAIzBwL,CAAU,EAAG,CAAEjE,EAAG,EAAGC,EAAG,EAAGrE,EAAG,IAE9B,IAAMsI,EAAQ,IAAI/I,IACdgJ,EAAiB,EAEfrH,EAAW,IAAIC,IAAcrB,EAAQ3D,GAC3C+E,EAASE,eAAgB,EAEzB,IAAMzE,EAAQ,IAAIC,IAClBR,SAASS,KAAKC,YAAYH,EAAMI,YAoBhC,SAASsE,KAlBT,WACI,IAAMmH,EAAcF,EAAMG,iBACpBC,EAAYF,EAAcD,EAChCA,EAAiBC,EAGjB3B,EAAM3D,KAAK,EAAI,GAAIwF,EAAW,GAE9B,IAAK,IAAIpK,EAAI,EAAGA,EAAIsI,EAAQpI,OAAQF,IAChCsI,EAAQtI,GAAGgI,KAAKvG,SAAS4I,KAAK/B,EAAQtI,GAAGzB,KAAKkD,UAGlDmB,EAAS9D,SACTT,EAAMS,SAENkC,EAASgC,OAAOrB,EAAOH,GAIvBwB,GACAjC,EAAMkC,sBAAsBF,GAWhCA,GAEAhE,OAAOC,iBAAiB,UAAU,KAC9BhB,EAAaH,EAAOI,wBACpBC,EAAMC,MAAQH,EAAWG,MACzBD,EAAME,OAASJ,EAAWI,OAC1BoD,EAAO0B,OAAShF,EAAMC,MAAQD,EAAME,OACpCoD,EAAO2B,yBACPnC,EAASG,cAAcC,KAAKC,IAAI,EAAGtC,OAAOuC,mBAC1CN,EAASO,QAAQrD,EAAMC,MAAOD,EAAME,WAGxC,SAAAgF,EAAOC,MAAP,EAAYC,mBApBZ,WACIC,qBAAqBxC,GACrBrC,EAAIqJ,UACJ0B,EAAYjG,UACZkG,EAAYlG,UACZxC,EAASwC,iB,yIC5HjB3C,cAEAC,cACA2C,cACAyE,cAIInJ,OAAOC,iBAAiB,QAAQ,IAAMsL,IAAG/J,aAK7C,SAAA6C,EAAOC,MAAP,EAAYkH,U,0ECxBZ,Q","file":"js/modern/app.897d0e33.js","sourcesContent":["import Stats from 'three/examples/jsm/libs/stats.module';\nimport * as dat from 'three/examples/jsm/libs/dat.gui.module';\n\ntype Experiment = (data: {\n    canvas: HTMLCanvasElement;\n    onRender: () => void;\n    gui: any;\n    sizes: { width: number; height: number };\n}) => void;\n\nexport function baseExperiment(name: string, fn: Experiment) {\n    return () => {\n        const canvas = document.querySelector<HTMLCanvasElement>(`.js-canvas[data-experiment=\"${name}\"]`);\n\n        if (!canvas) {\n            return;\n        }\n\n        let canvasRect = canvas.getBoundingClientRect();\n\n        const sizes = {\n            width: canvasRect.width,\n            height: canvasRect.height,\n        };\n\n        const stats = new Stats();\n        document.body.appendChild(stats.domElement);\n\n        const gui = new dat.GUI();\n        gui.addFolder();\n\n        function onRender() {\n            stats.update();\n        }\n\n        fn({ sizes, gui, canvas, onRender });\n\n        window.addEventListener('resize', () => {\n            canvasRect = canvas.getBoundingClientRect();\n            sizes.width = canvasRect.width;\n            sizes.height = canvasRect.height;\n        });\n    };\n}\n","/* global PUBLIC_PATH */\nasync function register() {\n    if ('serviceWorker' in navigator) {\n        try {\n            await navigator.serviceWorker.register(`${PUBLIC_PATH}service-worker.js`);\n        } catch (err) {\n            console.log('SW registration failed: ', err);\n        }\n    }\n}\n\nasync function unregister() {\n    if ('serviceWorker' in navigator) {\n        const registrations = await navigator.serviceWorker.getRegistrations();\n        registrations.forEach((registration) => {\n            registration.unregister();\n        });\n    }\n}\n\nconst _module = { register, unregister };\n\nexport default _module;\n","// import * as Cookies from 'js-cookie';\n\nexport function registerCustomElements() {\n    // if (Cookies.get('COOKIES_USAGE_ACCEPTED') !== 'true') {\n    //     import(/* webpackChunkName: \"CookiesAgreement\" */ './CookiesAgreement/CookiesAgreement').then(\n    //         ({ CookiesAgreement }) => {\n    //             window.customElements.define('x-cookies-agreement', CookiesAgreement);\n    //         },\n    //     );\n    // }\n}\n","import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { baseExperiment } from '../base';\n\nexport const createParticlesBasic = baseExperiment('particles-basic', ({ canvas, sizes, onRender, gui }) => {\n    let rAF: number;\n    const renderer = new THREE.WebGLRenderer({ canvas });\n    renderer.outputEncoding = THREE.sRGBEncoding;\n    renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n    renderer.setSize(sizes.width, sizes.height);\n\n    const camera = new THREE.PerspectiveCamera(45, sizes.width / sizes.height, 0.1, 1000);\n    camera.position.z = 3;\n\n    const scene = new THREE.Scene();\n    const textureLoader = new THREE.TextureLoader();\n\n    const particleTexture = textureLoader.load(`${PUBLIC_PATH}img/particles/8.png`);\n\n    const particlesGeometry = new THREE.BufferGeometry();\n    const particlesCount = 20000;\n    const positions = new Float32Array(particlesCount * 3);\n\n    for (let i = 0; i < particlesCount * 3; i++) {\n        positions[i] = (Math.random() - 0.5) * 4;\n    }\n\n    particlesGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n\n    const sphere = new THREE.Points(\n        particlesGeometry,\n        new THREE.PointsMaterial({\n            color: 0xffffff,\n            map: particleTexture,\n            size: 0.05,\n            sizeAttenuation: true,\n            depthWrite: false,\n            blending: THREE.AdditiveBlending,\n        }),\n    );\n    scene.add(sphere);\n\n    const controls = new OrbitControls(camera, canvas);\n    controls.enableDamping = true;\n\n    function render() {\n        onRender();\n        controls.update();\n        renderer.render(scene, camera);\n    }\n\n    function animate() {\n        render();\n        rAF = requestAnimationFrame(animate);\n    }\n\n    function destroy() {\n        cancelAnimationFrame(rAF);\n        renderer.dispose();\n    }\n\n    animate();\n\n    window.addEventListener('resize', () => {\n        camera.aspect = sizes.width / sizes.height;\n        camera.updateProjectionMatrix();\n        renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n        renderer.setSize(sizes.width, sizes.height);\n    });\n\n    module.hot?.addDisposeHandler(destroy);\n});\n","import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { baseExperiment } from '../../base';\nimport vertexShader from './shaders/vertex.glsl';\nimport fragmentShader from './shaders/fragment.glsl';\nimport { disposeMesh } from '../../../utils';\nimport texture from './russia.png';\n\nexport const createParticlesPathTrailing = baseExperiment(\n    'particles-path-trailing',\n    ({ canvas, sizes, onRender, gui }) => {\n        let rAF: number;\n        const renderer = new THREE.WebGLRenderer({ canvas });\n        renderer.outputEncoding = THREE.sRGBEncoding;\n        renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n        renderer.setSize(sizes.width, sizes.height);\n\n        const camera = new THREE.PerspectiveCamera(45, sizes.width / sizes.height, 0.1, 100);\n        camera.position.z = 10;\n\n        const scene = new THREE.Scene();\n        // const clock = new THREE.Clock();\n\n        const svg = document.querySelector<SVGElement>('svg.js-russia-svg');\n\n        if (!svg) {\n            throw new Error('svg not found');\n        }\n\n        const svgBBox = svg.getBBox();\n        svg.style.display = 'none';\n        const svgTexture = new THREE.TextureLoader().load(texture);\n\n        const params = {\n            mapColor: 0x7071a,\n            // particlesColor: 0x040a14,\n            particlesColor: 0x110800,\n            // pointsAmountFactor: 0.4,\n            pointsAmountFactor: 0.9,\n            // maxPointsToRender: 50,\n            maxPointsToRender: 200,\n            // pointsToRenderFactor: 0.2,\n            pointsToRenderFactor: 0.5,\n            particlesSpeed: 1,\n            // opacityFactor: 0.2,\n            opacityFactor: 0.3,\n            // particleSize: 30,\n            particleSize: 20,\n        };\n        gui?.add(params, 'particlesSpeed').min(0).max(10).step(1);\n        gui?.add(params, 'opacityFactor').min(0).max(1).step(0.001);\n\n        let pathsData: any[] = [];\n        let maxPoints = 0;\n        let positions: Float32Array | null;\n        let opacity: Float32Array | null;\n\n        const particlesGeometry = new THREE.BufferGeometry();\n\n        function initScene() {\n            pathsData = Array.from(svg!.querySelectorAll<SVGPathElement>('.land')).map((path) => {\n                const pathLength = path.getTotalLength();\n                const pointsAmount = Math.floor(pathLength * params.pointsAmountFactor);\n                const points: THREE.Vector3[] = [];\n\n                for (let i = 0; i < pointsAmount; i++) {\n                    const pointAt = (pathLength / pointsAmount) * i;\n                    const point = path.getPointAtLength(pointAt);\n                    const normalizedPoint = {\n                        x: (point.x - svgBBox.width / 2) * 0.01 + Math.random() * 0.02,\n                        y: (point.y - svgBBox.height / 2) * 0.01 + Math.random() * 0.02,\n                        z: 0,\n                    };\n                    points.push(new THREE.Vector3(normalizedPoint.x, normalizedPoint.y, normalizedPoint.z));\n                }\n\n                return {\n                    length: pathLength,\n                    points,\n                    pointsToRender: Math.min(\n                        params.maxPointsToRender,\n                        Math.floor(pointsAmount * params.pointsToRenderFactor),\n                    ),\n                    currentPosition: 0,\n                };\n            });\n            maxPoints = pathsData.reduce((acc, pathData) => acc + pathData.pointsToRender, 0);\n\n            positions = new Float32Array(maxPoints * 3);\n            opacity = new Float32Array(maxPoints);\n\n            for (let i = 0; i < maxPoints * 3; i++) {\n                positions[i] = 0;\n            }\n\n            for (let i = 0; i < maxPoints; i++) {\n                opacity[i] = Math.random() * params.opacityFactor;\n            }\n\n            particlesGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n            particlesGeometry.setAttribute('opacity', new THREE.BufferAttribute(opacity, 1));\n        }\n\n        initScene();\n        gui?.add(params, 'pointsToRenderFactor').min(0).max(1).step(0.01).onFinishChange(initScene);\n        gui?.add(params, 'pointsAmountFactor').min(0).max(3).step(0.01).onFinishChange(initScene);\n        gui?.add(params, 'maxPointsToRender').min(0).max(500).step(1).onFinishChange(initScene);\n\n        const particlesMaterial = new THREE.ShaderMaterial({\n            uniforms: {\n                uParticleSize: { value: params.particleSize },\n                uTime: { value: 0 },\n                uColor: { value: new THREE.Color(params.particlesColor) },\n            },\n            vertexShader,\n            fragmentShader,\n            transparent: true,\n            depthWrite: false,\n            blending: THREE.AdditiveBlending,\n        });\n        gui?.addColor(params, 'particlesColor').onChange(() => {\n            particlesMaterial.uniforms.uColor.value = new THREE.Color(params.particlesColor);\n        });\n        gui?.add(params, 'particleSize')\n            .min(0)\n            .max(100)\n            .step(0.01)\n            .onChange(() => {\n                particlesMaterial.uniforms.uParticleSize.value = params.particleSize;\n            });\n\n        const particles = new THREE.Points(particlesGeometry, particlesMaterial);\n        particles.position.y = 0.33;\n        scene.add(particles);\n\n        const plane = new THREE.Mesh(\n            new THREE.PlaneBufferGeometry(svgBBox.width * 0.01, svgBBox.height * 0.01, 1, 1),\n            new THREE.MeshBasicMaterial({\n                color: params.mapColor,\n                map: svgTexture,\n            }),\n        );\n        scene.add(plane);\n        gui?.addColor(params, 'mapColor').onChange(() => {\n            plane.material.color = new THREE.Color(params.mapColor);\n        });\n\n        const dummyMat4 = new THREE.Matrix4();\n\n        const controls = new OrbitControls(camera, canvas);\n        controls.enableDamping = true;\n\n        function render() {\n            // const elapsedTime = clock.getElapsedTime();\n\n            onRender();\n            // particlesMaterial.uniforms.uTime.value = elapsedTime;\n            let k = 0;\n\n            for (let i = 0; i < pathsData.length; i++) {\n                pathsData[i].currentPosition =\n                    (pathsData[i].currentPosition + params.particlesSpeed) % pathsData[i].points.length;\n\n                for (let j = 0; j < pathsData[i].pointsToRender; j++) {\n                    const point = pathsData[i].points[(j + pathsData[i].currentPosition) % pathsData[i].points.length];\n                    positions?.set([point.x, point.y, point.z], k * 3);\n\n                    if (opacity) {\n                        opacity[k] = j / (pathsData[i].pointsToRender / params.opacityFactor);\n                    }\n\n                    k++;\n                }\n            }\n\n            particlesGeometry.attributes.position.array = positions;\n            particlesGeometry.applyMatrix4(dummyMat4.makeScale(1, -1, 1));\n            particlesGeometry.attributes.opacity.array = opacity;\n            particlesGeometry.attributes.position.needsUpdate = true;\n            particlesGeometry.attributes.opacity.needsUpdate = true;\n\n            controls.update();\n            renderer.render(scene, camera);\n        }\n\n        function animate() {\n            render();\n            rAF = requestAnimationFrame(animate);\n        }\n\n        function destroy() {\n            if (svg) {\n                svg.style.display = 'block';\n            }\n\n            cancelAnimationFrame(rAF);\n            scene.remove(particles);\n            disposeMesh(particles);\n            renderer.dispose();\n            gui.destroy();\n        }\n\n        animate();\n\n        window.addEventListener('resize', () => {\n            camera.aspect = sizes.width / sizes.height;\n            camera.updateProjectionMatrix();\n            renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n            renderer.setSize(sizes.width, sizes.height);\n        });\n\n        module.hot?.addDisposeHandler(destroy);\n    },\n);\n","export default \"#define GLSLIFY 1\\nuniform float uParticleSize;\\n\\nattribute float opacity;\\n\\nvarying float vOpacity;\\n\\nvoid main() {\\n    vOpacity = opacity;\\n\\n    vec4 mvPosition = modelViewMatrix * vec4(position, 1.);\\n\\n    gl_PointSize = uParticleSize * (-1. / mvPosition.z);\\n    gl_Position = projectionMatrix * mvPosition;\\n}\";","export default \"#define GLSLIFY 1\\nuniform vec3 uColor;\\n\\nvarying float vOpacity;\\n\\nvoid main() {\\n    vec2 uv = vec2(gl_PointCoord.x, 1. - gl_PointCoord.y);\\n    vec2 centerUv = uv - 0.5;\\n\\n    vec4 color = vec4(0.08 / length(centerUv));\\n    color.rgb = min(vec3(10.), color.rgb);\\n    color.rgb *= uColor * 100.;\\n    color *= vOpacity;\\n    color.a = min(1., color.a);\\n\\n    gl_FragColor = vec4(color.rgb, 1.);\\n}\";","import { BackSide, FrontSide, Group, Material, Mesh, Points } from 'three';\n\nexport function disposeMesh(mesh: Mesh | Points) {\n    mesh.geometry?.dispose();\n    if (mesh.material) {\n        if (mesh.material instanceof Array) {\n            for (let i = 0; i < mesh.material.length; ++i) {\n                mesh.material[i].dispose();\n            }\n        } else {\n            mesh.material.dispose();\n        }\n    }\n}\n\nexport function separateCullingPass(mesh: Mesh): Group {\n    const group = new Group();\n\n    [BackSide, FrontSide].forEach((side, i) => {\n        const newMesh = mesh.clone();\n        newMesh.name = `${newMesh.name}__clone${i + 1}`;\n\n        if (mesh.material instanceof Material) {\n            const material = mesh.material.clone();\n            newMesh.material = material;\n            material.transparent = true;\n            material.side = side;\n        }\n\n        group.add(newMesh);\n\n        if (mesh.parent) {\n            mesh.parent.add(group);\n            mesh.parent.remove(mesh);\n            disposeMesh(mesh);\n        }\n    });\n\n    return group;\n}\n","export default __webpack_public_path__ + \"img/russia.png\";","import * as THREE from 'three';\nimport Stats from 'three/examples/jsm/libs/stats.module';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport * as dat from 'three/examples/jsm/libs/dat.gui.module';\nimport * as CANNON from 'cannon-es';\n\nexport function createPhysicsWorker() {\n    const canvas = document.querySelector<HTMLCanvasElement>('.js-canvas[data-experiment=\"physics-worker\"]');\n    let rAF: number;\n\n    if (!canvas) return;\n\n    let canvasRect = canvas.getBoundingClientRect();\n\n    const sizes = {\n        width: canvasRect.width,\n        height: canvasRect.height,\n    };\n\n    const gui = new dat.GUI();\n    gui.addFolder('');\n\n    const renderer = new THREE.WebGLRenderer({ canvas });\n    renderer.shadowMap.enabled = true;\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n    renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n    renderer.setSize(sizes.width, sizes.height);\n\n    const camera = new THREE.PerspectiveCamera(45, sizes.width / sizes.height, 0.1, 1000);\n    camera.position.set(-5, 7, 12);\n    const scene = new THREE.Scene();\n\n    const objects: any[] = [];\n    const world = new CANNON.World();\n    world.gravity.set(0, -9.82, 0);\n\n    const defaultMaterial = new CANNON.Material('default');\n    const defaultContactMaterial = new CANNON.ContactMaterial(defaultMaterial, defaultMaterial, {\n        friction: 0.1,\n        restitution: 0.7,\n    });\n\n    world.addContactMaterial(defaultContactMaterial);\n    world.defaultContactMaterial = defaultContactMaterial;\n\n    const plane = new THREE.Mesh(new THREE.PlaneBufferGeometry(25, 25, 25), new THREE.MeshStandardMaterial());\n    plane.receiveShadow = true;\n    // plane.rotation.x = -Math.PI / 2;\n    scene.add(plane);\n\n    const floorShape = new CANNON.Plane();\n    const floorBody = new CANNON.Body({ material: defaultMaterial });\n    floorBody.mass = 0;\n    floorBody.addShape(floorShape);\n    // floorBody.quaternion.setFromAxisAngle(new CANNON.Vec3(-1, 0, 0), Math.PI * 0.5);\n    world.addBody(floorBody);\n\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.35);\n    scene.add(ambientLight);\n\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.5);\n    directionalLight.position.set(0.3, 0.5, 0.5);\n    directionalLight.target = plane;\n    directionalLight.castShadow = true;\n    scene.add(directionalLight);\n    gui.add(directionalLight.position, 'x').min(-10).max(10).step(0.001);\n    gui.add(directionalLight.position, 'y').min(-10).max(10).step(0.001);\n    gui.add(directionalLight.position, 'z').min(-10).max(10).step(0.001);\n\n    const boxGeometry = new THREE.BoxBufferGeometry(1, 1, 1);\n    const boxMaterial = new THREE.MeshStandardMaterial({\n        metalness: 0.5,\n        roughness: 0.45,\n    });\n\n    function createBox(size = 1, position: { x: number; y: number; z: number }) {\n        const mesh = new THREE.Mesh(boxGeometry, boxMaterial);\n        mesh.castShadow = true;\n        mesh.scale.set(size, size, size);\n        mesh.position.x = position.x;\n        mesh.position.y = position.y;\n        mesh.position.z = position.z;\n        scene.add(mesh);\n\n        const shape = new CANNON.Box(new CANNON.Vec3(position.x, position.y, position.z));\n        const body = new CANNON.Body({\n            mass: 1,\n            position: new CANNON.Vec3(position.x, position.y, position.z),\n            shape,\n        });\n\n        world.addBody(body);\n        objects.push({ mesh, body });\n        // body.applyLocalForce(new CANNON.Vec3(150, 0, 0), new CANNON.Vec3(0, 0, 0));\n    }\n\n    createBox(1, { x: 0, y: 3, z: 0 });\n\n    const clock = new THREE.Clock();\n    let oldElapsedTime = 0;\n\n    const controls = new OrbitControls(camera, canvas);\n    controls.enableDamping = true;\n\n    const stats = new Stats();\n    document.body.appendChild(stats.domElement);\n\n    function render() {\n        const elapsedTime = clock.getElapsedTime();\n        const deltaTime = elapsedTime - oldElapsedTime;\n        oldElapsedTime = elapsedTime;\n\n        // Update physics world\n        world.step(1 / 60, deltaTime, 3);\n\n        for (let i = 0; i < objects.length; i++) {\n            objects[i].mesh.position.copy(objects[i].body.position);\n        }\n\n        controls.update();\n        stats.update();\n\n        renderer.render(scene, camera);\n    }\n\n    function animate() {\n        render();\n        rAF = requestAnimationFrame(animate);\n    }\n\n    function destroy() {\n        cancelAnimationFrame(rAF);\n        gui.destroy();\n        boxGeometry.dispose();\n        boxMaterial.dispose();\n        renderer.dispose();\n    }\n\n    animate();\n\n    window.addEventListener('resize', () => {\n        canvasRect = canvas.getBoundingClientRect();\n        sizes.width = canvasRect.width;\n        sizes.height = canvasRect.height;\n        camera.aspect = sizes.width / sizes.height;\n        camera.updateProjectionMatrix();\n        renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n        renderer.setSize(sizes.width, sizes.height);\n    });\n\n    module.hot?.addDisposeHandler(destroy);\n}\n","/* global USE_SERVICE_WORKER */\nimport './webpack-imports';\nimport './sentry';\nimport './polyfills';\n\nimport sw from './sw';\nimport { registerCustomElements } from './custom-elements';\nimport { createParticlesBasic } from './experiments/particles/particles-basic';\nimport { createParticlesPathTrailing } from './experiments/particles/path-trailing';\nimport { createPhysicsWorker } from './experiments/physics/physics-worker';\n\nregisterCustomElements();\n\ncreateParticlesBasic();\ncreateParticlesPathTrailing();\ncreatePhysicsWorker();\n\n// Service Worker\nif (USE_SERVICE_WORKER) {\n    window.addEventListener('load', () => sw.register());\n} else {\n    sw.unregister();\n}\n\nmodule.hot?.accept();\n","/* global BUILD_TYPE */\n/* eslint global-require: \"off\" */\nimport 'focus-visible';\n// import 'intersection-observer';\n\nif (BUILD_TYPE === 'legacy') {\n    require('core-js/es/symbol');\n    require('core-js/es/promise/finally');\n    require('document-register-element/build/document-register-element');\n    // require('element-matches-polyfill');\n    require('whatwg-fetch');\n}\n"],"sourceRoot":""}