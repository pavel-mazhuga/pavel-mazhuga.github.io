{"version":3,"sources":["webpack:///./src/js/experiments/base.ts","webpack:///./src/js/sw.ts","webpack:///./src/js/custom-elements/index.ts","webpack:///./src/js/experiments/particles/particles-basic.ts","webpack:///./src/js/experiments/particles/path-trailing/index.ts","webpack:///./src/js/experiments/particles/path-trailing/shaders/vertex.glsl","webpack:///./src/js/experiments/particles/path-trailing/shaders/fragment.glsl","webpack:///./src/js/experiments/particles/path-trailing/russia.png","webpack:///./src/js/experiments/physics/physics-worker.ts","webpack:///./src/js/experiments/shaders/patterns/index.ts","webpack:///./src/js/experiments/shaders/patterns/shaders/vertex.glsl","webpack:///./src/js/experiments/shaders/patterns/shaders/fragment.glsl","webpack:///./src/js/experiments/shaders/pixelated/index.ts","webpack:///./src/js/experiments/shaders/pixelated/shaders/vertex.glsl","webpack:///./src/js/experiments/shaders/pixelated/shaders/fragment.glsl","webpack:///./src/js/experiments/shaders/pixelated/shaders/postprocessing.glsl","webpack:///./src/js/experiments/sliders/1/index.ts","webpack:///./src/js/experiments/sliders/1/shaders/vertex.glsl","webpack:///./src/js/experiments/sliders/1/shaders/fragment.glsl","webpack:///./src/js/experiments/sliders/1/shaders/postprocessing.glsl","webpack:///./src/js/experiments/sliders/fullscreen/index.ts","webpack:///./src/js/utils/webgl.ts","webpack:///./src/js/experiments/text/text-basic.ts","webpack:///./src/js/experiments/text/shaders/vertex.glsl","webpack:///./src/js/experiments/text/shaders/fragment.glsl","webpack:///./src/js/experiments/sliders/fullscreen/main-slider/webgl-slider.ts","webpack:///./src/js/experiments/sliders/fullscreen/main-slider/shaders/vertex.glsl","webpack:///./src/js/experiments/sliders/fullscreen/main-slider/shaders/fragment.glsl","webpack:///./src/js/app.ts","webpack:///./src/js/polyfills.ts","webpack:///./src/js/utils/index.ts","webpack:///./src/js/experiments/sliders/fullscreen/main-slider/index.ts"],"names":["baseExperiment","name","fn","canvas","document","querySelector","canvasRect","getBoundingClientRect","sizes","width","height","stats","Stats","body","appendChild","domElement","gui","dat","addFolder","onRender","update","window","addEventListener","module","hot","addDisposeHandler","destroy","unregister","navigator","value","serviceWorker","getRegistrations","then","registrations","forEach","registration","direct","Promise","resolve","result","f","args","i","arguments","length","apply","e","reject","_module","register","recover","PUBLIC_PATH","err","console","log","registerCustomElements","createParticlesBasic","rAF","renderer","THREE","outputEncoding","setPixelRatio","Math","min","devicePixelRatio","setSize","camera","position","z","scene","particleTexture","load","particlesGeometry","positions","Float32Array","particlesCount","random","setAttribute","sphere","color","map","size","sizeAttenuation","depthWrite","blending","add","controls","OrbitControls","enableDamping","animate","render","requestAnimationFrame","aspect","updateProjectionMatrix","cancelAnimationFrame","dispose","createParticlesPathTrailing","svg","Error","svgBBox","getBBox","style","display","svgTexture","texture","params","mapColor","particlesColor","pointsAmountFactor","maxPointsToRender","pointsToRenderFactor","particlesSpeed","opacityFactor","particleSize","max","step","opacity","pathsData","maxPoints","initScene","Array","from","querySelectorAll","path","pathLength","getTotalLength","pointsAmount","floor","points","pointAt","point","getPointAtLength","normalizedPoint","x","y","push","pointsToRender","currentPosition","reduce","acc","pathData","onFinishChange","particlesMaterial","uniforms","uParticleSize","getPixelRatio","uTime","uColor","vertexShader","fragmentShader","transparent","addColor","onChange","particles","plane","material","dummyMat4","k","j","set","attributes","array","applyMatrix4","makeScale","needsUpdate","remove","disposeMesh","createPhysicsWorker","shadowMap","enabled","type","objects","world","CANNON","gravity","defaultMaterial","defaultContactMaterial","friction","restitution","addContactMaterial","receiveShadow","floorShape","floorBody","mass","addShape","addBody","ambientLight","directionalLight","target","castShadow","boxGeometry","boxMaterial","metalness","roughness","mesh","scale","shape","createBox","clock","oldElapsedTime","elapsedTime","getElapsedTime","deltaTime","copy","createShadersPatterns","geometry","defines","PI","createShadersPixelated","sliderAladino","Aladino","density","dpr","post","fragment","postprocessingShader","pixelSize","vertex","img","carpet","image","currentSrc","resize","createSliders1","speed","speed2","cells","carpets","cell","oldProgress","slider","Flickity","accessibility","freeScroll","dragThreshold","freeScrollFriction","prevNextButtons","pageDots","observer","IntersectionObserver","entries","entry","exactCarpet","find","dom","active","isIntersecting","observe","on","progress","lerp","_isWebGLAvailable","isWebGLAvailable","createSlidersFullscreen","mainSlider","mainSliderContainer","MainSliderConstructor","MainWebglSlider","MainSlider","duration","autoplay","delay","this","createElement","WebGLRenderingContext","getContext","createMultilineText","ctx","textToWrite","maxWidth","text","futureText","wordsInCurrent","wordArrayLength","currentText","replace","subWidth","maxLineWidth","wordArray","split","measureText","createTextCanvas","el","textContent","styles","getComputedStyle","textArr","fontSize","parseFloat","lineHeight","font","fontFamily","textAlign","textBaseline","fillStyle","fillText","createTextBasic","aladino","textEl","generateTexture","toBlob","blob","newImg","Image","hidden","url","URL","createObjectURL","onload","removeChild","setTimeout","revokeObjectURL","src","gsap","to","ease","_await","WebglMainSlider","container","options","_onVisibilityChange","bind","isAnimating","isWebglInitialized","_init","displacementTexture","textures","images","currentImage","activeIndex","nextImage","nextIndex","disp","dispPower","intensity","textureFactor","classList","setTextureFactor","index","factor","rect","rectRatio","imageRatio","removeEventListener","disconnect","navigateTo","onComplete","_onResize","sw","accept","require","defaultOptions","paused","navigateToNext","navigateToPrev","_onSwipe","slides","total","slidesContainer","navigationContainer","paginationContainer","_getNextIndex","prevSlideButton","nextSlideButton","paginationButtons","_paginationDelegation","_autoplayTimeout","tl","_hammer","Hammer","get","direction","DIRECTION_HORIZONTAL","eventName","once","off","resume","clearTimeout","_getPrevIndex","timeline","defaults","clearProps","autoAlpha","fromTo","nextContent","content","matchMedia","matches","label","cloneSlide","kill","event","deltaX","_generateNavigation","arrowTemplate","className","prevSlideLabel","innerHTML","nextSlideLabel","createDocumentFragment","_generatePagination","ul","li","button","buttonLabel","delegate","parseInt","delegateTarget","dataset","slideIndex"],"mappings":"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","file":"js/legacy/app.773d36e2.js","sourcesContent":["import Stats from 'three/examples/jsm/libs/stats.module';\nimport * as dat from 'three/examples/jsm/libs/dat.gui.module';\n\ntype Experiment = (data: {\n    canvas: HTMLCanvasElement;\n    onRender: () => void;\n    gui: any;\n    sizes: { width: number; height: number };\n}) => void;\n\nexport function baseExperiment(name: string, fn: Experiment) {\n    return () => {\n        const canvas = document.querySelector<HTMLCanvasElement>(`.js-canvas[data-experiment=\"${name}\"]`);\n\n        if (!canvas) {\n            return;\n        }\n\n        let canvasRect = canvas.getBoundingClientRect();\n\n        const sizes = {\n            width: canvasRect.width,\n            height: canvasRect.height,\n        };\n\n        const stats = new Stats();\n        document.body.appendChild(stats.domElement);\n\n        const gui = new dat.GUI();\n        gui.addFolder();\n\n        function onRender() {\n            stats.update();\n        }\n\n        fn({ sizes, gui, canvas, onRender });\n\n        window.addEventListener('resize', () => {\n            canvasRect = canvas.getBoundingClientRect();\n            sizes.width = canvasRect.width;\n            sizes.height = canvasRect.height;\n        });\n\n        function destroy() {\n            gui?.destroy();\n        }\n\n        module.hot?.addDisposeHandler(destroy);\n    };\n}\n","/* global PUBLIC_PATH */\nasync function register() {\n    if ('serviceWorker' in navigator) {\n        try {\n            await navigator.serviceWorker.register(`${PUBLIC_PATH}service-worker.js`);\n        } catch (err) {\n            console.log('SW registration failed: ', err);\n        }\n    }\n}\n\nasync function unregister() {\n    if ('serviceWorker' in navigator) {\n        const registrations = await navigator.serviceWorker.getRegistrations();\n        registrations.forEach((registration) => {\n            registration.unregister();\n        });\n    }\n}\n\nconst _module = { register, unregister };\n\nexport default _module;\n","// import * as Cookies from 'js-cookie';\n\nexport function registerCustomElements() {\n    // if (Cookies.get('COOKIES_USAGE_ACCEPTED') !== 'true') {\n    //     import(/* webpackChunkName: \"CookiesAgreement\" */ './CookiesAgreement/CookiesAgreement').then(\n    //         ({ CookiesAgreement }) => {\n    //             window.customElements.define('x-cookies-agreement', CookiesAgreement);\n    //         },\n    //     );\n    // }\n}\n","import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { baseExperiment } from '../base';\n\nexport const createParticlesBasic = baseExperiment('particles-basic', ({ canvas, sizes, onRender, gui }) => {\n    let rAF: number;\n    const renderer = new THREE.WebGLRenderer({ canvas });\n    renderer.outputEncoding = THREE.sRGBEncoding;\n    renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n    renderer.setSize(sizes.width, sizes.height);\n\n    const camera = new THREE.PerspectiveCamera(45, sizes.width / sizes.height, 0.1, 1000);\n    camera.position.z = 3;\n\n    const scene = new THREE.Scene();\n    const textureLoader = new THREE.TextureLoader();\n\n    const particleTexture = textureLoader.load(`${PUBLIC_PATH}img/particles/8.png`);\n\n    const particlesGeometry = new THREE.BufferGeometry();\n    const particlesCount = 20000;\n    const positions = new Float32Array(particlesCount * 3);\n\n    for (let i = 0; i < particlesCount * 3; i++) {\n        positions[i] = (Math.random() - 0.5) * 4;\n    }\n\n    particlesGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n\n    const sphere = new THREE.Points(\n        particlesGeometry,\n        new THREE.PointsMaterial({\n            color: 0xffffff,\n            map: particleTexture,\n            size: 0.05,\n            sizeAttenuation: true,\n            depthWrite: false,\n            blending: THREE.AdditiveBlending,\n        }),\n    );\n    scene.add(sphere);\n\n    const controls = new OrbitControls(camera, canvas);\n    controls.enableDamping = true;\n\n    function render() {\n        onRender();\n        controls.update();\n        renderer.render(scene, camera);\n    }\n\n    function animate() {\n        render();\n        rAF = requestAnimationFrame(animate);\n    }\n\n    function destroy() {\n        cancelAnimationFrame(rAF);\n        renderer.dispose();\n    }\n\n    animate();\n\n    window.addEventListener('resize', () => {\n        camera.aspect = sizes.width / sizes.height;\n        camera.updateProjectionMatrix();\n        renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n        renderer.setSize(sizes.width, sizes.height);\n    });\n\n    module.hot?.addDisposeHandler(destroy);\n});\n","import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { baseExperiment } from '../../base';\nimport vertexShader from './shaders/vertex.glsl';\nimport fragmentShader from './shaders/fragment.glsl';\nimport { disposeMesh } from '../../../utils';\nimport texture from './russia.png';\n\nexport const createParticlesPathTrailing = baseExperiment(\n    'particles-path-trailing',\n    ({ canvas, sizes, onRender, gui }) => {\n        let rAF: number;\n        const renderer = new THREE.WebGLRenderer({ canvas });\n        renderer.outputEncoding = THREE.sRGBEncoding;\n        renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n        renderer.setSize(sizes.width, sizes.height);\n\n        const camera = new THREE.PerspectiveCamera(45, sizes.width / sizes.height, 0.1, 100);\n        camera.position.z = 10;\n\n        const scene = new THREE.Scene();\n        // const clock = new THREE.Clock();\n\n        const svg = document.querySelector<SVGElement>('svg.js-russia-svg');\n\n        if (!svg) {\n            throw new Error('svg not found');\n        }\n\n        const svgBBox = svg.getBBox();\n        svg.style.display = 'none';\n        const svgTexture = new THREE.TextureLoader().load(texture);\n\n        const params = {\n            mapColor: 0x7071a,\n            // particlesColor: 0x040a14,\n            particlesColor: 0x110800,\n            // pointsAmountFactor: 0.4,\n            pointsAmountFactor: 0.9,\n            // maxPointsToRender: 50,\n            maxPointsToRender: 200,\n            // pointsToRenderFactor: 0.2,\n            pointsToRenderFactor: 0.5,\n            particlesSpeed: 1,\n            // opacityFactor: 0.2,\n            opacityFactor: 0.3,\n            // particleSize: 30,\n            particleSize: 20,\n        };\n        gui?.add(params, 'particlesSpeed').min(0).max(10).step(1);\n        gui?.add(params, 'opacityFactor').min(0).max(1).step(0.001);\n\n        let pathsData: any[] = [];\n        let maxPoints = 0;\n        let positions: Float32Array | null;\n        let opacity: Float32Array | null;\n\n        const particlesGeometry = new THREE.BufferGeometry();\n\n        function initScene() {\n            pathsData = Array.from(svg!.querySelectorAll<SVGPathElement>('.land')).map((path) => {\n                const pathLength = path.getTotalLength();\n                const pointsAmount = Math.floor(pathLength * params.pointsAmountFactor);\n                const points: THREE.Vector3[] = [];\n\n                for (let i = 0; i < pointsAmount; i++) {\n                    const pointAt = (pathLength / pointsAmount) * i;\n                    const point = path.getPointAtLength(pointAt);\n                    const normalizedPoint = {\n                        x: (point.x - svgBBox.width / 2) * 0.01 + Math.random() * 0.02,\n                        y: (point.y - svgBBox.height / 2) * 0.01 + Math.random() * 0.02,\n                        z: 0,\n                    };\n                    points.push(new THREE.Vector3(normalizedPoint.x, normalizedPoint.y, normalizedPoint.z));\n                }\n\n                return {\n                    length: pathLength,\n                    points,\n                    pointsToRender: Math.min(\n                        params.maxPointsToRender,\n                        Math.floor(pointsAmount * params.pointsToRenderFactor),\n                    ),\n                    currentPosition: 0,\n                };\n            });\n            maxPoints = pathsData.reduce((acc, pathData) => acc + pathData.pointsToRender, 0);\n\n            positions = new Float32Array(maxPoints * 3);\n            opacity = new Float32Array(maxPoints);\n\n            for (let i = 0; i < maxPoints * 3; i++) {\n                positions[i] = 0;\n            }\n\n            for (let i = 0; i < maxPoints; i++) {\n                opacity[i] = Math.random() * params.opacityFactor;\n            }\n\n            particlesGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n            particlesGeometry.setAttribute('opacity', new THREE.BufferAttribute(opacity, 1));\n        }\n\n        initScene();\n        gui?.add(params, 'pointsToRenderFactor').min(0).max(1).step(0.01).onFinishChange(initScene);\n        gui?.add(params, 'pointsAmountFactor').min(0).max(3).step(0.01).onFinishChange(initScene);\n        gui?.add(params, 'maxPointsToRender').min(0).max(500).step(1).onFinishChange(initScene);\n\n        const particlesMaterial = new THREE.ShaderMaterial({\n            uniforms: {\n                uParticleSize: { value: params.particleSize * renderer.getPixelRatio() },\n                uTime: { value: 0 },\n                uColor: { value: new THREE.Color(params.particlesColor) },\n            },\n            vertexShader,\n            fragmentShader,\n            transparent: true,\n            depthWrite: false,\n            blending: THREE.AdditiveBlending,\n        });\n        gui?.addColor(params, 'particlesColor').onChange(() => {\n            particlesMaterial.uniforms.uColor.value = new THREE.Color(params.particlesColor);\n        });\n        gui?.add(params, 'particleSize')\n            .min(0)\n            .max(100)\n            .step(0.01)\n            .onChange(() => {\n                particlesMaterial.uniforms.uParticleSize.value = params.particleSize;\n            });\n\n        const particles = new THREE.Points(particlesGeometry, particlesMaterial);\n        particles.position.y = 0.33;\n        scene.add(particles);\n\n        const plane = new THREE.Mesh(\n            new THREE.PlaneBufferGeometry(svgBBox.width * 0.01, svgBBox.height * 0.01, 1, 1),\n            new THREE.MeshBasicMaterial({\n                color: params.mapColor,\n                map: svgTexture,\n            }),\n        );\n        scene.add(plane);\n        gui?.addColor(params, 'mapColor').onChange(() => {\n            plane.material.color = new THREE.Color(params.mapColor);\n        });\n\n        const dummyMat4 = new THREE.Matrix4();\n\n        const controls = new OrbitControls(camera, canvas);\n        controls.enableDamping = true;\n\n        function render() {\n            // const elapsedTime = clock.getElapsedTime();\n\n            onRender();\n            // particlesMaterial.uniforms.uTime.value = elapsedTime;\n            let k = 0;\n\n            for (let i = 0; i < pathsData.length; i++) {\n                pathsData[i].currentPosition =\n                    (pathsData[i].currentPosition + params.particlesSpeed) % pathsData[i].points.length;\n\n                for (let j = 0; j < pathsData[i].pointsToRender; j++) {\n                    const point = pathsData[i].points[(j + pathsData[i].currentPosition) % pathsData[i].points.length];\n                    positions?.set([point.x, point.y, point.z], k * 3);\n\n                    if (opacity) {\n                        opacity[k] = j / (pathsData[i].pointsToRender / params.opacityFactor);\n                    }\n\n                    k++;\n                }\n            }\n\n            particlesGeometry.attributes.position.array = positions;\n            particlesGeometry.applyMatrix4(dummyMat4.makeScale(1, -1, 1));\n            particlesGeometry.attributes.opacity.array = opacity;\n            particlesGeometry.attributes.position.needsUpdate = true;\n            particlesGeometry.attributes.opacity.needsUpdate = true;\n\n            controls.update();\n            renderer.render(scene, camera);\n        }\n\n        function animate() {\n            render();\n            rAF = requestAnimationFrame(animate);\n        }\n\n        function destroy() {\n            if (svg) {\n                svg.style.display = 'block';\n            }\n\n            cancelAnimationFrame(rAF);\n            scene.remove(particles);\n            disposeMesh(particles);\n            renderer.dispose();\n            gui.destroy();\n        }\n\n        animate();\n\n        window.addEventListener('resize', () => {\n            camera.aspect = sizes.width / sizes.height;\n            camera.updateProjectionMatrix();\n            renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n            renderer.setSize(sizes.width, sizes.height);\n        });\n\n        module.hot?.addDisposeHandler(destroy);\n    },\n);\n","export default \"#define GLSLIFY 1\\nuniform float uParticleSize;\\n\\nattribute float opacity;\\n\\nvarying float vOpacity;\\n\\nvoid main() {\\n    vOpacity = opacity;\\n\\n    vec4 mvPosition = modelViewMatrix * vec4(position, 1.);\\n\\n    gl_PointSize = uParticleSize * (-1. / mvPosition.z);\\n    gl_Position = projectionMatrix * mvPosition;\\n}\";","export default \"#define GLSLIFY 1\\nuniform vec3 uColor;\\n\\nvarying float vOpacity;\\n\\nvoid main() {\\n    vec2 uv = vec2(gl_PointCoord.x, 1. - gl_PointCoord.y);\\n    vec2 centerUv = uv - 0.5;\\n\\n    vec4 color = vec4(0.08 / length(centerUv));\\n    color.rgb = min(vec3(10.), color.rgb);\\n    color.rgb *= uColor * 100.;\\n    color *= vOpacity;\\n    color.a = min(1., color.a);\\n\\n    gl_FragColor = vec4(color.rgb, 1.);\\n}\";","export default __webpack_public_path__ + \"img/russia.png\";","import * as THREE from 'three';\nimport Stats from 'three/examples/jsm/libs/stats.module';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport * as dat from 'three/examples/jsm/libs/dat.gui.module';\nimport * as CANNON from 'cannon-es';\n\nexport function createPhysicsWorker() {\n    const canvas = document.querySelector<HTMLCanvasElement>('.js-canvas[data-experiment=\"physics-worker\"]');\n    let rAF: number;\n\n    if (!canvas) return;\n\n    let canvasRect = canvas.getBoundingClientRect();\n\n    const sizes = {\n        width: canvasRect.width,\n        height: canvasRect.height,\n    };\n\n    const gui = new dat.GUI();\n    gui.addFolder('');\n\n    const renderer = new THREE.WebGLRenderer({ canvas });\n    renderer.shadowMap.enabled = true;\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n    renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n    renderer.setSize(sizes.width, sizes.height);\n\n    const camera = new THREE.PerspectiveCamera(45, sizes.width / sizes.height, 0.1, 1000);\n    camera.position.set(-5, 7, 12);\n    const scene = new THREE.Scene();\n\n    const objects: any[] = [];\n    const world = new CANNON.World();\n    world.gravity.set(0, -9.82, 0);\n\n    const defaultMaterial = new CANNON.Material('default');\n    const defaultContactMaterial = new CANNON.ContactMaterial(defaultMaterial, defaultMaterial, {\n        friction: 0.1,\n        restitution: 0.7,\n    });\n\n    world.addContactMaterial(defaultContactMaterial);\n    world.defaultContactMaterial = defaultContactMaterial;\n\n    const plane = new THREE.Mesh(new THREE.PlaneBufferGeometry(25, 25, 25), new THREE.MeshStandardMaterial());\n    plane.receiveShadow = true;\n    // plane.rotation.x = -Math.PI / 2;\n    scene.add(plane);\n\n    const floorShape = new CANNON.Plane();\n    const floorBody = new CANNON.Body({ material: defaultMaterial });\n    floorBody.mass = 0;\n    floorBody.addShape(floorShape);\n    // floorBody.quaternion.setFromAxisAngle(new CANNON.Vec3(-1, 0, 0), Math.PI * 0.5);\n    world.addBody(floorBody);\n\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.35);\n    scene.add(ambientLight);\n\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.5);\n    directionalLight.position.set(0.3, 0.5, 0.5);\n    directionalLight.target = plane;\n    directionalLight.castShadow = true;\n    scene.add(directionalLight);\n    gui.add(directionalLight.position, 'x').min(-10).max(10).step(0.001);\n    gui.add(directionalLight.position, 'y').min(-10).max(10).step(0.001);\n    gui.add(directionalLight.position, 'z').min(-10).max(10).step(0.001);\n\n    const boxGeometry = new THREE.BoxBufferGeometry(1, 1, 1);\n    const boxMaterial = new THREE.MeshStandardMaterial({\n        metalness: 0.5,\n        roughness: 0.45,\n    });\n\n    function createBox(size = 1, position: { x: number; y: number; z: number }) {\n        const mesh = new THREE.Mesh(boxGeometry, boxMaterial);\n        mesh.castShadow = true;\n        mesh.scale.set(size, size, size);\n        mesh.position.x = position.x;\n        mesh.position.y = position.y;\n        mesh.position.z = position.z;\n        scene.add(mesh);\n\n        const shape = new CANNON.Box(new CANNON.Vec3(position.x, position.y, position.z));\n        const body = new CANNON.Body({\n            mass: 1,\n            position: new CANNON.Vec3(position.x, position.y, position.z),\n            shape,\n        });\n\n        world.addBody(body);\n        objects.push({ mesh, body });\n        // body.applyLocalForce(new CANNON.Vec3(150, 0, 0), new CANNON.Vec3(0, 0, 0));\n    }\n\n    createBox(1, { x: 0, y: 3, z: 0 });\n\n    const clock = new THREE.Clock();\n    let oldElapsedTime = 0;\n\n    const controls = new OrbitControls(camera, canvas);\n    controls.enableDamping = true;\n\n    const stats = new Stats();\n    document.body.appendChild(stats.domElement);\n\n    function render() {\n        const elapsedTime = clock.getElapsedTime();\n        const deltaTime = elapsedTime - oldElapsedTime;\n        oldElapsedTime = elapsedTime;\n\n        // Update physics world\n        world.step(1 / 60, deltaTime, 3);\n\n        for (let i = 0; i < objects.length; i++) {\n            objects[i].mesh.position.copy(objects[i].body.position);\n        }\n\n        controls.update();\n        stats.update();\n\n        renderer.render(scene, camera);\n    }\n\n    function animate() {\n        render();\n        rAF = requestAnimationFrame(animate);\n    }\n\n    function destroy() {\n        cancelAnimationFrame(rAF);\n        gui.destroy();\n        boxGeometry.dispose();\n        boxMaterial.dispose();\n        renderer.dispose();\n    }\n\n    animate();\n\n    window.addEventListener('resize', () => {\n        canvasRect = canvas.getBoundingClientRect();\n        sizes.width = canvasRect.width;\n        sizes.height = canvasRect.height;\n        camera.aspect = sizes.width / sizes.height;\n        camera.updateProjectionMatrix();\n        renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n        renderer.setSize(sizes.width, sizes.height);\n    });\n\n    module.hot?.addDisposeHandler(destroy);\n}\n","import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { baseExperiment } from '../../base';\nimport vertexShader from './shaders/vertex.glsl';\nimport fragmentShader from './shaders/fragment.glsl';\nimport { disposeMesh } from '../../../utils';\n\nexport const createShadersPatterns = baseExperiment('shaders-patterns', ({ canvas, sizes, onRender, gui }) => {\n    let rAF: number;\n    const renderer = new THREE.WebGLRenderer({ canvas });\n    renderer.outputEncoding = THREE.sRGBEncoding;\n    renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n    renderer.setSize(sizes.width, sizes.height);\n\n    const camera = new THREE.PerspectiveCamera(45, sizes.width / sizes.height, 0.1, 100);\n    camera.position.z = 10;\n\n    const scene = new THREE.Scene();\n    const clock = new THREE.Clock();\n\n    // const params = {\n    //     mapColor: 0x7071a,\n    //     // particlesColor: 0x040a14,\n    //     particlesColor: 0x110800,\n    //     // pointsAmountFactor: 0.4,\n    //     pointsAmountFactor: 0.9,\n    //     // maxPointsToRender: 50,\n    //     maxPointsToRender: 200,\n    //     // pointsToRenderFactor: 0.2,\n    //     pointsToRenderFactor: 0.5,\n    //     particlesSpeed: 1,\n    //     // opacityFactor: 0.2,\n    //     opacityFactor: 0.3,\n    //     // particleSize: 30,\n    //     particleSize: 20,\n    // };\n\n    const geometry = new THREE.PlaneBufferGeometry(6, 6, 256, 256);\n\n    const material = new THREE.ShaderMaterial({\n        defines: {\n            PI: Math.PI,\n        },\n        uniforms: {\n            uTime: { value: 0 },\n        },\n        vertexShader,\n        fragmentShader,\n        transparent: true,\n    });\n\n    const mesh = new THREE.Mesh(geometry, material);\n    mesh.position.y = 0.33;\n    scene.add(mesh);\n\n    const controls = new OrbitControls(camera, canvas);\n    controls.enableDamping = true;\n\n    function render() {\n        const elapsedTime = clock.getElapsedTime();\n\n        onRender();\n        material.uniforms.uTime.value = elapsedTime;\n\n        controls.update();\n        renderer.render(scene, camera);\n    }\n\n    function animate() {\n        render();\n        rAF = requestAnimationFrame(animate);\n    }\n\n    function destroy() {\n        cancelAnimationFrame(rAF);\n        scene.remove(mesh);\n        disposeMesh(mesh);\n        renderer.dispose();\n        gui.destroy();\n    }\n\n    animate();\n\n    window.addEventListener('resize', () => {\n        camera.aspect = sizes.width / sizes.height;\n        camera.updateProjectionMatrix();\n        renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n        renderer.setSize(sizes.width, sizes.height);\n    });\n\n    module.hot?.addDisposeHandler(destroy);\n});\n","export default \"#define GLSLIFY 1\\n//\\n// GLSL textureless classic 3D noise \\\"cnoise\\\",\\n// with an RSL-style periodic variant \\\"pnoise\\\".\\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\\n// Version: 2011-10-11\\n//\\n// Many thanks to Ian McEwan of Ashima Arts for the\\n// ideas for permutation and gradient selection.\\n//\\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\\n// Distributed under the MIT license. See LICENSE file.\\n// https://github.com/ashima/webgl-noise\\n//\\n\\nvec3 mod289(vec3 x)\\n{\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 mod289(vec4 x)\\n{\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 permute(vec4 x)\\n{\\n  return mod289(((x*34.0)+1.0)*x);\\n}\\n\\nvec4 taylorInvSqrt(vec4 r)\\n{\\n  return 1.79284291400159 - 0.85373472095314 * r;\\n}\\n\\nvec3 fade(vec3 t) {\\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\\n}\\n\\n// Classic Perlin noise\\nfloat cnoise(vec3 P)\\n{\\n  vec3 Pi0 = floor(P); // Integer part for indexing\\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\\n  Pi0 = mod289(Pi0);\\n  Pi1 = mod289(Pi1);\\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\\n  vec4 iz0 = Pi0.zzzz;\\n  vec4 iz1 = Pi1.zzzz;\\n\\n  vec4 ixy = permute(permute(ix) + iy);\\n  vec4 ixy0 = permute(ixy + iz0);\\n  vec4 ixy1 = permute(ixy + iz1);\\n\\n  vec4 gx0 = ixy0 * (1.0 / 7.0);\\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\\n  gx0 = fract(gx0);\\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\\n  vec4 sz0 = step(gz0, vec4(0.0));\\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\\n\\n  vec4 gx1 = ixy1 * (1.0 / 7.0);\\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\\n  gx1 = fract(gx1);\\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\\n  vec4 sz1 = step(gz1, vec4(0.0));\\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\\n\\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\\n\\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\\n  g000 *= norm0.x;\\n  g010 *= norm0.y;\\n  g100 *= norm0.z;\\n  g110 *= norm0.w;\\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\\n  g001 *= norm1.x;\\n  g011 *= norm1.y;\\n  g101 *= norm1.z;\\n  g111 *= norm1.w;\\n\\n  float n000 = dot(g000, Pf0);\\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\\n  float n111 = dot(g111, Pf1);\\n\\n  vec3 fade_xyz = fade(Pf0);\\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\\n  return 2.2 * n_xyz;\\n}\\n\\nuniform float uTime;\\n\\nvarying vec2 vUv;\\nvarying float vElevation;\\n\\nvoid main() {\\n    vec4 modelPosition = modelMatrix * vec4(position, 1.0);\\n    modelPosition.z += cnoise(modelPosition.xyz * sin(uTime)) * 0.7;\\n    float elevation = modelPosition.z;\\n\\n    vUv = uv;\\n    vElevation = elevation;\\n\\n    gl_Position = projectionMatrix * viewMatrix * modelPosition;\\n}\\n\\n// varying vec2 vUv;\\n\\n// void main() {\\n//     vUv = uv;\\n//     vec4 mvPosition = modelViewMatrix * vec4(position, 1.);\\n//     gl_Position = projectionMatrix * mvPosition;\\n// }\";","export default \"#define GLSLIFY 1\\nuniform float uTime;\\n\\nvarying vec2 vUv;\\nvarying float vElevation;\\n\\nvoid main() {\\n    vec3 color = vec3(distance(vUv, vec2(0.5)));\\n    \\n    gl_FragColor = vec4(mix(vec3(0.2), color, clamp(vElevation, 0., 1.)), 1.0);\\n}\\n\";","import './styles.scss';\nimport Aladino from 'aladino';\nimport { baseExperiment } from '../../base';\nimport vertexShader from './shaders/vertex.glsl';\nimport fragmentShader from './shaders/fragment.glsl';\nimport postprocessingShader from './shaders/postprocessing.glsl';\n\nexport const createShadersPixelated = baseExperiment('shaders-pixelated', ({ canvas, sizes, onRender, gui }) => {\n    let rAF: number;\n    const sliderAladino = new Aladino({\n        density: 1,\n        dpr: Math.min(devicePixelRatio, 2),\n        canvas,\n        post: {\n            fragment: postprocessingShader,\n            uniforms: {\n                pixelSize: 50,\n            },\n        },\n    });\n\n    const material = sliderAladino.material({\n        vertex: vertexShader,\n        fragment: fragmentShader,\n    });\n\n    const img = document.querySelector('img') as HTMLImageElement;\n\n    const carpet = sliderAladino.carpet(img, {\n        material,\n        uniforms: {\n            image: sliderAladino.texture(img.currentSrc),\n        },\n    });\n\n    function render() {\n        if (sliderAladino.post.uniforms.pixelSize > 1) {\n            sliderAladino.post.uniforms.pixelSize -= 0.5;\n        }\n    }\n\n    function animate() {\n        render();\n        rAF = requestAnimationFrame(animate);\n    }\n\n    function destroy() {\n        cancelAnimationFrame(rAF);\n        carpet.destroy();\n        sliderAladino.destroy();\n        gui.destroy();\n    }\n\n    animate();\n\n    window.addEventListener('resize', () => {\n        carpet.resize();\n    });\n\n    module.hot?.addDisposeHandler(destroy);\n});\n","export default \"#define GLSLIFY 1\\nattribute vec2 position;\\nattribute vec2 uv;\\n\\nuniform mat4 projection;\\n\\nvarying vec2 vUv;\\n\\n// float parabola(float x, float k) {\\n//   return pow(4.0 * x * (1.0 - x), k);\\n// }\\n\\nvoid main() {\\n  vUv = uv;\\n\\n  vec4 pos = vec4(position, 0.0, 1.0);\\n//   float spee = speed * 2.0;\\n//   pos.x += parabola(uv.y, 1.0) * spee;\\n//   vec4 pp = projection * vec4(position, 0.0, 1.0);\\n//   float yy = ((pp / pp.w).x + 1.0) / 2.0;\\n//   pos.z = parabola(clamp(yy, 0.0, 1.0), 2.4) * speed2 * 160.0;\\n//   pos.z = clamp(pos.z, -6.0, 6.0);\\n\\n  gl_Position = projection * pos;\\n}\";","export default \"precision highp float;\\n#define GLSLIFY 1\\n\\nuniform vec2 size;\\nuniform vec2 sizeImage;\\nuniform sampler2D image;\\n\\nvarying vec2 vUv;\\n\\nvec4 coverTexture(sampler2D tex, vec2 imgSize, vec2 ouv) {\\n  vec2 s = size;\\n  vec2 i = imgSize;\\n  float rs = s.x / s.y;\\n  float ri = i.x / i.y;\\n  vec2 new = rs < ri ? vec2(i.x * s.y / i.y, s.y) : vec2(s.x, i.y * s.x / i.x);\\n  vec2 offset = (rs < ri ? vec2((new.x - s.x) / 2.0, 0.0) : vec2(0.0, (new.y - s.y) / 2.0)) / new;\\n  vec2 uv = ouv * s / new + offset;\\n\\n  return texture2D(tex, uv);\\n}\\n\\nvoid main() {\\n  gl_FragColor = coverTexture(image, sizeImage, vUv);\\n}\\n\";","export default \"precision highp float;\\n#define GLSLIFY 1\\n    \\n// uniform float time;\\n// uniform float speed;\\n// uniform vec2 viewport;\\n// uniform sampler2D image;\\n\\n// float parabola(float x, float k) {\\n//     return pow(4.0 * x * (1.0 - x), k);\\n// }\\n\\n// float random(vec2 co) {\\n//     return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\\n// }\\n\\n// void main() {\\n//     vec2 uv = gl_FragCoord.xy / viewport;\\n//     float spe = speed * 300.0;\\n//     float p = parabola(uv.x, 1.4);\\n\\n//     float r = texture2D(image, uv + vec2(0.000 * spe, 0.0) * p).r;\\n//     float g = texture2D(image, uv + vec2(0.01 * spe, 0.0) * p).g;\\n//     float b = texture2D(image, uv + vec2(0.02 * spe, 0.0) * p).b;\\n//     float a = texture2D(image, uv + vec2(0.000 * spe, 0.0) * p).w;\\n\\n//     gl_FragColor = vec4(r, g, b, a);\\n    \\n//     // Film grain effect\\n//     float n = random(uv + mod(time, 3.0));\\n//     gl_FragColor.rgb *= 1.0 - (n * 0.2);\\n// }\\n\\nuniform sampler2D image;\\nuniform vec2 viewport;\\nuniform vec2 resolution;\\nuniform float pixelSize;\\n\\n// varying vec2 vUv;\\n\\n// vec3 bg(vec2 uv) {\\n//    return texture2D(image, uv).rgb;\\n// }\\n\\n// vec3 effect(vec2 uv, vec3 col) {\\n//    float granularity = floor(intensity*20.+10.);\\n\\n//    if (mod(granularity,2.) > 0.) {\\n//        granularity += 1.0;\\n//    };\\n\\n//    if (granularity > 0.0) {\\n//        float dx = granularity / viewport.x;\\n//        float dy = granularity / viewport.y;\\n//        uv = vec2(dx*(floor(uv.x/dx) + 0.5),dy*(floor(uv.y/dy) + 0.5));\\n//        return bg(uv);\\n//    };\\n\\n//    return col;\\n// }\\n\\nvoid main() {\\n    vec2 uv = gl_FragCoord.xy / viewport;\\n    // vec3 tex = bg(uv);\\n    // vec3 col = effect(uv,tex);\\n    // gl_FragColor = vec4( col, 1. );\\n\\n    vec2 dxy = pixelSize / viewport;\\n    vec2 coord = dxy * floor( uv / dxy );\\n    gl_FragColor = texture2D(image, coord);\\n}\\n\";","import './styles.scss';\nimport Flickity from 'flickity';\nimport Aladino from 'aladino';\nimport lerp from 'lerp';\nimport { baseExperiment } from '../../base';\nimport vertexShader from './shaders/vertex.glsl';\nimport fragmentShader from './shaders/fragment.glsl';\nimport postprocessingShader from './shaders/postprocessing.glsl';\n\nexport const createSliders1 = baseExperiment('sliders-1', ({ canvas, sizes, onRender, gui }) => {\n    let rAF: number;\n    const sliderAladino = new Aladino({\n        density: 16,\n        dpr: Math.min(devicePixelRatio, 2),\n        canvas,\n        post: {\n            fragment: postprocessingShader,\n            uniforms: {\n                speed: 0.0,\n            },\n        },\n    });\n\n    const material = sliderAladino.material({\n        vertex: vertexShader,\n        fragment: fragmentShader,\n        uniforms: {\n            speed: 0,\n            speed2: 0,\n        },\n    });\n\n    const cells = [...document.querySelectorAll('.slider-el')];\n    const carpets = [];\n    cells.forEach((cell) => {\n        const carpet = sliderAladino.carpet(cell, {\n            material,\n            uniforms: {\n                image: sliderAladino.texture(cell.currentSrc),\n            },\n        });\n\n        carpets.push(carpet);\n    });\n\n    let oldProgress = 0;\n    let speed = 0;\n    const freeScroll = true;\n\n    const slider = new Flickity(document.querySelector('.carousel')!, {\n        accessibility: true,\n        freeScroll,\n        dragThreshold: freeScroll ? 0 : 30,\n        // dragThreshold: 30,\n        freeScrollFriction: 0.07,\n        prevNextButtons: false,\n        pageDots: false,\n        // wrapAround: true,\n    });\n\n    const observer = new IntersectionObserver((entries) => {\n        entries.forEach((entry) => {\n            const exactCarpet = carpets.find((carpet) => entry.target === carpet.dom);\n            if (exactCarpet) {\n                exactCarpet.active = entry.isIntersecting;\n            }\n        });\n    });\n\n    cells.forEach((cell) => {\n        observer.observe(cell);\n    });\n\n    slider.on('scroll', (progress) => {\n        // The way flickity works doesn't allow an easy use of the position,\n        // So it can be optimised, as here we're recalculating dom boundingbox each time\n        carpets.forEach((carpet) => {\n            carpet.resize();\n        });\n\n        speed = oldProgress - progress;\n        oldProgress = progress;\n    });\n\n    function render() {\n        material.uniforms.speed = lerp(material.uniforms.speed, speed, 0.6);\n        material.uniforms.speed2 = lerp(material.uniforms.speed2, speed, 0.1);\n        sliderAladino.post.uniforms.speed = lerp(sliderAladino.post.uniforms.speed, speed, 0.1);\n    }\n\n    function animate() {\n        render();\n        rAF = requestAnimationFrame(animate);\n    }\n\n    function destroy() {\n        cancelAnimationFrame(rAF);\n        carpets.forEach((carpet) => {\n            carpet.destroy();\n        });\n        carpets = [];\n        sliderAladino.destroy();\n        slider.destroy();\n        gui.destroy();\n    }\n\n    animate();\n\n    window.addEventListener('resize', () => {\n        carpets.forEach((carpet) => {\n            carpet.resize();\n        });\n    });\n\n    module.hot?.addDisposeHandler(destroy);\n});\n","export default \"#define GLSLIFY 1\\nattribute vec2 position;\\nattribute vec2 uv;\\nuniform mat4 projection;\\nuniform float speed;\\nuniform float speed2;\\nvarying vec2 vUv;\\n\\nfloat parabola(float x, float k) {\\n  return pow(4.0 * x * (1.0 - x), k);\\n}\\n\\nvoid main() {\\n  vUv = uv;\\n\\n  vec4 pos = vec4(position, 0.0, 1.0);\\n  float spee = speed * 2.0;\\n  pos.x += parabola(uv.y, 1.0) * spee;\\n  vec4 pp = projection * vec4(position, 0.0, 1.0);\\n  float yy = ((pp / pp.w).x + 1.0) / 2.0;\\n  pos.z = parabola(clamp(yy, 0.0, 1.0), 2.4) * speed2 * 160.0;\\n  pos.z = clamp(pos.z, -6.0, 6.0);\\n\\n  gl_Position = projection * pos;\\n}\";","export default \"precision highp float;\\n#define GLSLIFY 1\\n\\nuniform vec2 size;\\nuniform vec2 sizeImage;\\nuniform sampler2D image;\\n\\nvarying vec2 vUv;\\n\\nvec4 coverTexture(sampler2D tex, vec2 imgSize, vec2 ouv) {\\n  vec2 s = size;\\n  vec2 i = imgSize;\\n  float rs = s.x / s.y;\\n  float ri = i.x / i.y;\\n  vec2 new = rs < ri ? vec2(i.x * s.y / i.y, s.y) : vec2(s.x, i.y * s.x / i.x);\\n  vec2 offset = (rs < ri ? vec2((new.x - s.x) / 2.0, 0.0) : vec2(0.0, (new.y - s.y) / 2.0)) / new;\\n  vec2 uv = ouv * s / new + offset;\\n\\n  return texture2D(tex, uv);\\n}\\n\\nvoid main() {\\n  gl_FragColor = coverTexture(image, sizeImage, vUv);\\n}\\n\";","export default \"precision highp float;\\n#define GLSLIFY 1\\n    \\nuniform float time;\\nuniform float speed;\\nuniform vec2 viewport;\\nuniform sampler2D image;\\n\\nfloat parabola(float x, float k) {\\n    return pow(4.0 * x * (1.0 - x), k);\\n}\\n\\nfloat random(vec2 co) {\\n    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\\n}\\n\\nvoid main() {\\n    vec2 uv = gl_FragCoord.xy / viewport;\\n    float spe = speed * 300.0;\\n    float p = parabola(uv.x, 1.4);\\n\\n    float r = texture2D(image, uv + vec2(0.000 * spe, 0.0) * p).r;\\n    float g = texture2D(image, uv + vec2(0.01 * spe, 0.0) * p).g;\\n    float b = texture2D(image, uv + vec2(0.02 * spe, 0.0) * p).b;\\n    float a = texture2D(image, uv + vec2(0.000 * spe, 0.0) * p).w;\\n\\n    gl_FragColor = vec4(r, g, b, a);\\n    \\n    // Film grain effect\\n    float n = random(uv + mod(time, 3.0));\\n    gl_FragColor.rgb *= 1.0 - (n * 0.2);\\n}\";","import './styles.scss';\nimport { baseExperiment } from '../../base';\n// import postprocessingShader from './shaders/postprocessing.glsl';\nimport MainSlider from './main-slider';\nimport MainWebglSlider from './main-slider/webgl-slider';\nimport { isWebGLAvailable } from '../../../utils/webgl';\n\nconst _isWebGLAvailable = isWebGLAvailable();\n\nexport const createSlidersFullscreen = baseExperiment('sliders-fullscreen', ({ canvas, sizes, onRender, gui }) => {\n    const mainSliderContainer = document.querySelector('.js-main-slider');\n    let mainSlider: any;\n    if (mainSliderContainer) {\n        const MainSliderConstructor = _isWebGLAvailable ? MainWebglSlider : MainSlider;\n        mainSlider = new MainSliderConstructor(mainSliderContainer, {\n            duration: 2500,\n            autoplay: true,\n            delay: 5000,\n            // paused: true,\n            canvas,\n        });\n    }\n\n    // function render() {\n    //     console.log('render');\n    //     // material.uniforms.speed = lerp(material.uniforms.speed, speed, 0.6);\n    //     // material.uniforms.speed2 = lerp(material.uniforms.speed2, speed, 0.1);\n    //     // sliderAladino.post.uniforms.speed = lerp(sliderAladino.post.uniforms.speed, speed, 0.1);\n    // }\n\n    // function animate() {\n    //     render();\n    //     this.rAF = requestAnimationFrame(animate);\n    // }\n\n    function destroy() {\n        cancelAnimationFrame(this.rAF);\n\n        if (mainSlider) {\n            mainSlider.destroy();\n            mainSlider = null;\n        }\n\n        gui.destroy();\n    }\n\n    // animate();\n\n    module.hot?.addDisposeHandler(destroy);\n});\n","export function isWebGLAvailable() {\n    try {\n        const canvas = document.createElement('canvas');\n        return !!(\n            window.WebGLRenderingContext &&\n            (canvas.getContext('webgl') || canvas.getContext('experimental-webgl'))\n        );\n    } catch (err) {\n        return false;\n    }\n}\n\nexport function isWebGL2Available() {\n    try {\n        const canvas = document.createElement('canvas');\n        return !!(window.WebGL2RenderingContext && canvas.getContext('webgl2'));\n    } catch (e) {\n        return false;\n    }\n}\n","import './styles.scss';\nimport Aladino from 'aladino';\nimport gsap from 'gsap';\nimport { baseExperiment } from '../base';\nimport vertexShader from './shaders/vertex.glsl';\nimport fragmentShader from './shaders/fragment.glsl';\n\nfunction getPowerOfTwo(value: number, pow = 1) {\n    let _pow = pow;\n\n    while (_pow < value) {\n        _pow *= 2;\n    }\n\n    return _pow;\n}\n\nfunction createMultilineText(ctx, textToWrite, maxWidth, text) {\n    textToWrite = textToWrite.replace('\\n', ' ');\n    var currentText = textToWrite;\n    var futureText;\n    var subWidth = 0;\n    var maxLineWidth = 0;\n\n    var wordArray = textToWrite.split(' ');\n    var wordsInCurrent, wordArrayLength;\n    wordsInCurrent = wordArrayLength = wordArray.length;\n\n    // Reduce currentText until it is less than maxWidth or is a single word\n    // futureText var keeps track of text not yet written to a text line\n    while (ctx.measureText(currentText).width > maxWidth && wordsInCurrent > 1) {\n        console.log({ currentText, width: ctx.measureText(currentText).width });\n        wordsInCurrent--;\n        // let linebreak = false;\n\n        currentText = futureText = '';\n        for (let i = 0; i < wordArrayLength; i++) {\n            if (i < wordsInCurrent) {\n                currentText += wordArray[i];\n                if (i + 1 < wordsInCurrent) {\n                    currentText += ' ';\n                }\n            } else {\n                futureText += wordArray[i];\n                if (i + 1 < wordArrayLength) {\n                    futureText += ' ';\n                }\n            }\n        }\n    }\n    text.push(currentText); // Write this line of text to the array\n    maxLineWidth = ctx.measureText(currentText).width;\n\n    // If there is any text left to be written call the function again\n    if (futureText) {\n        subWidth = createMultilineText(ctx, futureText, maxWidth, text);\n        if (subWidth > maxLineWidth) {\n            maxLineWidth = subWidth;\n        }\n    }\n\n    // Return the maximum line width\n    return maxLineWidth;\n}\n\nfunction createTextCanvas(el: HTMLElement) {\n    const text = el.textContent || '';\n    const dpr = Math.min(2, window.devicePixelRatio);\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d')!;\n    const textMeasurement = ctx.measureText(text);\n    const styles = getComputedStyle(el);\n    const textArr: string[] = [];\n    const fontSize = parseFloat(styles.fontSize) * dpr;\n    const width = parseFloat(styles.width);\n    // const width = getPowerOfTwo(textMeasurement.width);\n    const height = parseFloat(styles.height);\n    const lineHeight = parseFloat(styles.lineHeight);\n    // const height = getPowerOfTwo(fontSize * 2);\n    const maxWidth = createMultilineText(ctx, text, width, textArr);\n    console.log({ maxWidth });\n\n    canvas.width = width * dpr;\n    canvas.height = height * dpr;\n\n    ctx.font = `${fontSize}px ${styles.fontFamily}`;\n    ctx.textAlign = 'center';\n    // ctx.textAlign = styles.textAlign;\n    ctx.textBaseline = 'middle';\n    ctx.fillStyle = styles.color;\n\n    // const canvasX = maxWidth;\n    const canvasX = width;\n    // const canvasX = canvas.width;\n    const canvasY = lineHeight * textArr.length;\n    // const textX = canvas.width / 2;\n    // const textX = canvasX / 2;\n    const textX = 0;\n    let textY: number;\n    const offset = (canvasY - lineHeight * (textArr.length + 1)) * 0.5;\n    console.log(textArr);\n\n    // for (let i = 0; i < textArr.length; i++) {\n    //     textY = (i + 1) * lineHeight + offset;\n    //     // textY = canvas.height / 2;\n    //     ctx.fillText(textArr[i], textX, textY);\n    //     // ctx.fillText(textArr[i], textX, textY + fontSize * 0.14);\n    // }\n    ctx.fillText(text, canvas.width / 2, canvas.height / 2 + fontSize * (0.12 / dpr));\n\n    return canvas;\n}\n\nexport const createTextBasic = baseExperiment('text-basic', async ({ canvas, sizes, onRender, gui }) => {\n    let rAF: number;\n\n    const aladino = new Aladino({\n        density: 1,\n        dpr: Math.min(devicePixelRatio, 2),\n        canvas,\n    });\n\n    Array.from(document.querySelectorAll<HTMLElement>('.js-gl-text')).forEach((textEl) => {\n        const styles = getComputedStyle(textEl);\n\n        const material = aladino.material({\n            vertex: vertexShader,\n            fragment: fragmentShader,\n            uniforms: {\n                pixelSize: 1,\n            },\n        });\n\n        textEl.addEventListener('mouseenter', () => {\n            gsap.to(material.uniforms, {\n                duration: 0.6,\n                pixelSize: parseFloat(styles.fontSize) * 0.75,\n                ease: 'steps(10)',\n            });\n        });\n\n        textEl.addEventListener('mouseleave', () => {\n            gsap.to(material.uniforms, {\n                duration: 0.6,\n                pixelSize: 1,\n                ease: 'steps(10)',\n            });\n        });\n\n        function generateTexture() {\n            return new Promise((resolve) => {\n                createTextCanvas(textEl).toBlob((blob) => {\n                    const newImg = new Image();\n                    newImg.hidden = true;\n                    const url = URL.createObjectURL(blob);\n\n                    newImg.onload = () => {\n                        document.body.removeChild(newImg);\n                        resolve(url);\n                        setTimeout(() => {\n                            URL.revokeObjectURL(url);\n                        }, 0);\n                    };\n\n                    newImg.src = url;\n                    document.body.appendChild(newImg);\n                });\n            });\n        }\n\n        let carpet;\n\n        generateTexture().then((url) => {\n            carpet = aladino.carpet(textEl, {\n                material,\n                uniforms: {\n                    image: aladino.texture(url),\n                },\n            });\n        });\n\n        window.addEventListener('resize', () => {\n            generateTexture().then((url) => {\n                if (carpet) {\n                    carpet.uniforms.image = aladino.texture(url);\n                }\n            });\n        });\n    });\n\n    function render() {\n        onRender();\n    }\n\n    function animate() {\n        render();\n        rAF = requestAnimationFrame(animate);\n    }\n\n    function destroy() {\n        cancelAnimationFrame(rAF);\n    }\n\n    animate();\n\n    module.hot?.addDisposeHandler(destroy);\n});\n","export default \"#define GLSLIFY 1\\nattribute vec2 position;\\nattribute vec2 uv;\\nuniform mat4 projection;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vUv = uv;\\n\\n  vec4 pos = vec4(position, 0.0, 1.0);\\n\\n  gl_Position = projection * pos;\\n}\\n\";","export default \"precision highp float;\\n#define GLSLIFY 1\\n\\n// uniform vec2 size;\\n// uniform vec2 sizeImage;\\nuniform vec2 viewport;\\nuniform float pixelSize;\\nuniform sampler2D image;\\nuniform float time;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vec2 uv = vUv;\\n  // uv.x += sin(uv.y * 40.0 + time * 0.01) * 0.005;\\n\\n  // gl_FragColor = texture2D(image, uv);\\n\\n  vec2 dxy = pixelSize / viewport;\\n  vec2 coord = dxy * floor(uv / dxy);\\n\\n  gl_FragColor = texture2D(image, coord);\\n}\\n\";","import Aladino from 'aladino';\nimport lerp from 'lerp';\nimport gsap from 'gsap';\nimport vertexShader from './shaders/vertex.glsl';\nimport fragmentShader from './shaders/fragment.glsl';\nimport MainSlider from './index';\nimport type { MainSliderOptions } from './types';\n\nexport default class WebglMainSlider extends MainSlider {\n    isWebglInitialized: boolean;\n\n    // width: number;\n\n    // height: number;\n\n    isAnimating: boolean;\n\n    // containerRect: DOMRect;\n\n    constructor(container: Element, options: Partial<MainSliderOptions>) {\n        super(container, options);\n        this._onVisibilityChange = this._onVisibilityChange.bind(this);\n        // this.animate = this.animate.bind(this);\n\n        this.isAnimating = false;\n        // this.containerRect = this.container.getBoundingClientRect();\n        // this.width = this.containerRect.width;\n        // this.height = this.containerRect.height;\n        this.isWebglInitialized = false;\n\n        this._init();\n    }\n\n    protected _init() {\n        this.aladino = new Aladino({\n            density: 1,\n            dpr: Math.min(devicePixelRatio, 2),\n            canvas: this.options.canvas,\n            // post: {\n            //     fragment: postprocessingShader,\n            //     uniforms: {\n            //         speed: 0.0,\n            //     },\n            // },\n        });\n\n        this.displacementTexture = this.aladino.texture(`${PUBLIC_PATH}img/sliders/displacement-map.png`);\n        this.textures = this.images.map((img) => this.aladino.texture(img.currentSrc));\n\n        this.material = this.aladino.material({\n            vertex: vertexShader,\n            fragment: fragmentShader,\n            uniforms: {\n                currentImage: this.textures[this.activeIndex],\n                nextImage: this.textures[this.nextIndex],\n                disp: this.displacementTexture,\n                dispPower: 0,\n                intensity: 0.5,\n                textureFactor: { x: 1, y: 1 },\n            },\n        });\n\n        this.carpet = this.aladino.carpet(this.images[0], {\n            material: this.material,\n            uniforms: {\n                image: this.textures[this.activeIndex],\n            },\n        });\n\n        const observer = new IntersectionObserver((entries) => {\n            entries.forEach((entry) => {\n                this.carpet.active = entry.isIntersecting;\n            });\n        });\n\n        observer.observe(this.container);\n\n        document.addEventListener('visibilitychange', this._onVisibilityChange);\n\n        // this.animate();\n\n        this.container.classList.add('webgl-initialized');\n        this.isWebglInitialized = true;\n    }\n\n    protected setTextureFactor(index: number) {\n        const { image } = this.textures[index];\n        const factor = { x: 1, y: 1 };\n        const rect = this.container.getBoundingClientRect();\n        const rectRatio = rect.width / rect.height;\n        const imageRatio = image.width / image.height;\n\n        if (rectRatio > imageRatio) {\n            factor.x = 1;\n            factor.y = (1 / rectRatio) * imageRatio;\n        } else {\n            factor.x = (1 * rectRatio) / imageRatio;\n            factor.y = 1;\n        }\n\n        return factor;\n    }\n\n    // render() {\n    //     // material.uniforms.speed = lerp(material.uniforms.speed, speed, 0.6);\n    //     // material.uniforms.speed2 = lerp(material.uniforms.speed2, speed, 0.1);\n    //     // sliderAladino.post.uniforms.speed = lerp(sliderAladino.post.uniforms.speed, speed, 0.1);\n    // }\n\n    // animate() {\n    //     this.render();\n    //     this.rAF = requestAnimationFrame(this.animate);\n    // }\n\n    async destroy() {\n        super.destroy();\n\n        cancelAnimationFrame(this.rAF);\n        document.removeEventListener('visibilitychange', this._onVisibilityChange);\n\n        if (this.observer) {\n            this.observer.disconnect();\n            this.observer = null;\n        }\n\n        this.carpet.destroy();\n        this.aladino.destroy();\n        this.container.classList.remove('webgl-initialized');\n        this.isWebglInitialized = false;\n    }\n\n    async navigateTo(index: number) {\n        super.navigateTo(index);\n\n        if (!this.isAnimating) return;\n\n        this.isAnimating = true;\n        console.log(this);\n\n        if (this.nextIndex !== index) {\n            this.material.uniforms.nextImage = this.textures[index];\n        }\n\n        const factor = this.setTextureFactor(index);\n\n        gsap.to(this.material.uniforms.dispPower, {\n            duration: this.duration / 1000,\n            value: 1,\n            ease: 'expo.inOut',\n            onComplete: () => {\n                this.material.uniforms.dispPower = 0;\n                this.material.uniforms.currentImage = this.textures[index];\n                this.material.uniforms.nextImage = this.textures[this.nextIndex];\n                this.isAnimating = false;\n                // this.activeIndex = index;\n            },\n        });\n\n        gsap.to(this.material.uniforms.textureFactor, {\n            duration: this.duration / 1000,\n            x: factor.x,\n            y: factor.y,\n            ease: 'expo.inOut',\n        });\n    }\n\n    protected async _onResize() {\n        super._onResize();\n        this.carpet.resize();\n    }\n\n    protected async _onVisibilityChange() {\n        // if (this.offscreen) {\n        //     await this.offscreen.setState({ documentVisible: document.visibilityState === 'visible' });\n        // }\n    }\n}\n","export default \"#define GLSLIFY 1\\nattribute vec2 position;\\nattribute vec2 uv;\\n\\nuniform mat4 projection;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vUv = uv;\\n\\n  gl_Position = projection * vec4(position, 0.0, 1.0);\\n}\\n\";","export default \"precision highp float;\\n#define GLSLIFY 1\\n\\nuniform vec2 size;\\nuniform vec2 sizeImage;\\nuniform sampler2D image;\\nuniform sampler2D currentImage;\\nuniform sampler2D nextImage;\\nuniform sampler2D disp;\\nuniform float dispPower;\\nuniform float intensity;\\n\\nvarying vec2 vUv;\\n\\nvec4 coverTexture(sampler2D tex, vec2 imgSize, vec2 ouv) {\\n  vec2 s = size;\\n  vec2 i = imgSize;\\n  float rs = s.x / s.y;\\n  float ri = i.x / i.y;\\n  vec2 new = rs < ri ? vec2(i.x * s.y / i.y, s.y) : vec2(s.x, i.y * s.x / i.x);\\n  vec2 offset = (rs < ri ? vec2((new.x - s.x) / 2.0, 0.0) : vec2(0.0, (new.y - s.y) / 2.0)) / new;\\n  vec2 uv = ouv * s / new + offset;\\n\\n  return texture2D(tex, uv);\\n}\\n\\nvoid main() {\\n    vec2 uv = vUv;\\n    vec4 disp = texture2D(disp, uv);\\n    vec2 dispVec = vec2(disp.x, disp.y);\\n    \\n    vec2 distPos1 = uv + (dispVec * intensity * dispPower);\\n    vec2 distPos2 = uv + (dispVec * -(intensity * (1. - dispPower)));\\n    \\n    vec4 currentImage = texture2D(currentImage, distPos1);\\n    vec4 nextImage = texture2D(nextImage, distPos2);\\n    \\n    gl_FragColor = mix(currentImage, nextImage, dispPower);\\n//   gl_FragColor = coverTexture(currentImage, sizeImage, vUv);\\n}\\n\";","/* global USE_SERVICE_WORKER */\nimport './webpack-imports';\nimport './sentry';\nimport './polyfills';\n\nimport sw from './sw';\nimport { registerCustomElements } from './custom-elements';\n\nimport { createParticlesBasic } from './experiments/particles/particles-basic';\nimport { createParticlesPathTrailing } from './experiments/particles/path-trailing';\n\nimport { createPhysicsWorker } from './experiments/physics/physics-worker';\n\nimport { createShadersPatterns } from './experiments/shaders/patterns';\nimport { createShadersPixelated } from './experiments/shaders/pixelated';\n\nimport { createSliders1 } from './experiments/sliders/1';\nimport { createSlidersFullscreen } from './experiments/sliders/fullscreen';\n\nimport { createTextBasic } from './experiments/text/text-basic';\n\nimport './experiments/distortions/1';\n\nregisterCustomElements();\n\ncreateParticlesBasic();\ncreateParticlesPathTrailing();\n\ncreatePhysicsWorker();\n\ncreateShadersPatterns();\ncreateShadersPixelated();\ncreateSliders1();\ncreateSlidersFullscreen();\n\ncreateTextBasic();\n\n// Service Worker\nif (USE_SERVICE_WORKER) {\n    window.addEventListener('load', () => sw.register());\n} else {\n    sw.unregister();\n}\n\nmodule.hot?.accept();\n","/* global BUILD_TYPE */\n/* eslint global-require: \"off\" */\nimport 'focus-visible';\n// import 'intersection-observer';\n\nif (BUILD_TYPE === 'legacy') {\n    require('core-js/es/symbol');\n    require('core-js/es/promise/finally');\n    require('document-register-element/build/document-register-element');\n    // require('element-matches-polyfill');\n    require('whatwg-fetch');\n}\n","import { BackSide, FrontSide, Group, Material, Mesh, Points } from 'three';\n\nexport function disposeMesh(mesh: Mesh | Points) {\n    mesh.geometry?.dispose();\n    if (mesh.material) {\n        if (mesh.material instanceof Array) {\n            for (let i = 0; i < mesh.material.length; ++i) {\n                mesh.material[i].dispose();\n            }\n        } else {\n            mesh.material.dispose();\n        }\n    }\n}\n\nexport function separateCullingPass(mesh: Mesh): Group {\n    const group = new Group();\n\n    [BackSide, FrontSide].forEach((side, i) => {\n        const newMesh = mesh.clone();\n        newMesh.name = `${newMesh.name}__clone${i + 1}`;\n\n        if (mesh.material instanceof Material) {\n            const material = mesh.material.clone();\n            newMesh.material = material;\n            material.transparent = true;\n            material.side = side;\n        }\n\n        group.add(newMesh);\n\n        if (mesh.parent) {\n            mesh.parent.add(group);\n            mesh.parent.remove(mesh);\n            disposeMesh(mesh);\n        }\n    });\n\n    return group;\n}\n","/* eslint-disable max-lines */\nimport delegate from 'delegate';\n// import createDispatcher from 'lit-dispatcher';\nimport gsap from 'gsap';\n// import debounce from 'lodash.debounce';\nimport Hammer from 'hammerjs';\n\nimport type { MainSliderOptions } from './types';\n\nconst defaultOptions: MainSliderOptions = {\n    duration: 1,\n    autoplay: false,\n    delay: 5000,\n    paused: false,\n};\n\nexport default class MainSlider {\n    container: Element;\n\n    options: MainSliderOptions;\n\n    slides: Element[];\n\n    slidesContainer: Element | null;\n\n    navigationContainer: Element | null;\n\n    paginationContainer: Element | null;\n\n    prevSlideButton: HTMLButtonElement | null;\n\n    nextSlideButton: HTMLButtonElement | null;\n\n    _paginationDelegation: any;\n\n    // _dispatcher: ReturnType<typeof createDispatcher>;\n\n    paginationButtons: HTMLButtonElement[];\n\n    images: HTMLImageElement[];\n\n    total: number;\n\n    activeIndex: number;\n\n    nextIndex: number;\n\n    isAnimating: boolean;\n\n    _autoplayTimeout: NodeJS.Timeout | null;\n\n    // _contentMap: WeakMap<Element, { content: Element; label: Element; name: Element; link: Element }>;\n\n    _hammer: HammerManager;\n\n    tl: gsap.core.Timeline | null;\n\n    constructor(container: Element, options: Partial<MainSliderOptions> = defaultOptions) {\n        this.navigateToNext = this.navigateToNext.bind(this);\n        this.navigateToPrev = this.navigateToPrev.bind(this);\n        this._onResize = this._onResize.bind(this);\n        this._onSwipe = this._onSwipe.bind(this);\n\n        this.options = { ...defaultOptions, ...options };\n        // this._dispatcher = createDispatcher();\n        this.isAnimating = false;\n        this.container = container;\n        this.slides = Array.from(container.querySelectorAll('.js-main-slide'));\n        this.total = this.slides.length;\n        this.slidesContainer = container.querySelector('.js-main-slides-container');\n        this.navigationContainer = container.querySelector('.js-main-slide-nav-container');\n        this.paginationContainer = container.querySelector('.js-main-slide-pagination-container');\n        this.images = Array.from(container.querySelectorAll('img.js-main-slide-img'));\n        this.activeIndex = 0;\n        this.nextIndex = this._getNextIndex();\n        this.prevSlideButton = null;\n        this.nextSlideButton = null;\n        this.paginationButtons = [];\n        this._paginationDelegation = null;\n        this._autoplayTimeout = null;\n        this.tl = null;\n\n        // this._contentMap = new WeakMap<Element, { content: Element; label: Element; name: Element; link: Element }>();\n        // this.slides.forEach((slide) => {\n        //     this._contentMap.set(slide, {\n        //         content: slide.querySelector('.js-main-slide-content')!,\n        //         label: slide.querySelector('.js-main-slide-label')!,\n        //         name: slide.querySelector('.js-main-slide-name')!,\n        //         link: slide.querySelector('.js-main-slide-link')!,\n        //     });\n        // });\n\n        // this._generateNavigation();\n        // this._generatePagination();\n\n        this._hammer = new Hammer(container as HTMLElement);\n        this._hammer.get('swipe').set({ direction: Hammer.DIRECTION_HORIZONTAL });\n        this._hammer.on('swipe', this._onSwipe);\n\n        this.slides[this.activeIndex].classList.add('is-active');\n        this.slides[this.nextIndex].classList.add('is-next');\n        // this.paginationButtons[this.activeIndex].classList.add('a-loader');\n\n        if (this.options.autoplay && !this.options.paused) {\n            this._autoplayTimeout = setTimeout(this.navigateToNext, this.options.delay);\n        }\n\n        window.addEventListener('resize', this._onResize);\n    }\n\n    on(eventName: string, fn: (data?: any) => void) {\n        // this._dispatcher.on(eventName, fn);\n    }\n\n    once(eventName: string, fn: (data?: any) => void) {\n        // this._dispatcher.once(eventName, fn);\n    }\n\n    off(eventName: string, fn: (data?: any) => void) {\n        // this._dispatcher.off(eventName, fn);\n    }\n\n    resume() {\n        this.options.paused = true;\n        this._autoplayTimeout = setTimeout(this.navigateToNext, this.options.delay);\n    }\n\n    navigateTo(index: number) {\n        console.log('adf');\n        if (this.activeIndex === index || this.isAnimating) return;\n\n        if (this._autoplayTimeout) {\n            clearTimeout(this._autoplayTimeout);\n        }\n\n        this.isAnimating = true;\n        // this._dispatcher.dispatch('change', { currentIndex: this.activeIndex, nextIndex: index });\n\n        // const activePaginationBtn = this.paginationButtons.find(\n        //     (btn) => this.paginationButtons.indexOf(btn) === this.activeIndex,\n        // );\n\n        // if (activePaginationBtn) {\n        //     activePaginationBtn.classList.remove('a-loader');\n        //     activePaginationBtn.classList.remove('is-active');\n        // }\n\n        // this.paginationButtons.find((btn) => this.paginationButtons.indexOf(btn) === index)?.classList.add('is-active');\n\n        const nextIndex = this._getNextIndex(this._getPrevIndex(index));\n        const nextAfterNextIndex = this._getNextIndex(nextIndex);\n\n        if (this.nextIndex !== nextIndex) {\n            this.slides[this.nextIndex].classList.remove('is-next');\n            this.slides[nextIndex].classList.add('is-next');\n            this.nextIndex = nextIndex;\n        }\n\n        // const currentContent = this._contentMap.get(this.slides[this.activeIndex]);\n        // const nextContent = this._contentMap.get(this.slides[index]);\n        // const nextAfterNextContent = this._contentMap.get(this.slides[nextAfterNextIndex]);\n        const duration = (this.options.duration / 1000) * 0.9;\n\n        // const cloneSlide = this.slides[nextAfterNextIndex].cloneNode(true) as Element;\n        // cloneSlide.classList.add('main-slide--clone');\n        // cloneSlide.classList.remove('is-active');\n        // cloneSlide.classList.remove('is-next');\n        // this.slidesContainer?.appendChild(cloneSlide);\n\n        this.tl = gsap.timeline({\n            defaults: { duration },\n            onComplete: () => {\n                // this.slidesContainer?.removeChild(cloneSlide);\n\n                // this.paginationButtons\n                //     .find((btn) => this.paginationButtons.indexOf(btn) === index)\n                //     ?.classList.add('a-loader');\n\n                this.slides[this.activeIndex].classList.remove('is-active');\n                this.slides[this.nextIndex].classList.remove('is-next');\n\n                this.activeIndex = index;\n                this.nextIndex = this._getNextIndex();\n\n                this.slides[this.activeIndex].classList.add('is-active');\n                this.slides[this.nextIndex].classList.add('is-next');\n\n                gsap.set(\n                    [\n                        this.slides[index],\n                        // currentContent!.link,\n                        // currentContent!.name,\n                        // currentContent!.label,\n                        // nextContent!.content,\n                        // nextContent!.name,\n                        // nextContent!.label,\n                        // nextContent!.link,\n                        // nextAfterNextContent!.name,\n                    ],\n                    { clearProps: 'all' },\n                );\n\n                this.isAnimating = false;\n                // this._dispatcher.dispatch('change-complete', {\n                //     currentIndex: this.activeIndex,\n                //     nextIndex: this.nextIndex,\n                // });\n\n                if (this.options.autoplay) {\n                    this._autoplayTimeout = setTimeout(this.navigateToNext, this.options.delay);\n                }\n            },\n        });\n\n        this.tl\n            .to(this.images[this.activeIndex], {\n                autoAlpha: 0,\n                ease: 'power4.inOut',\n            })\n            .fromTo(\n                this.images[nextIndex],\n                {\n                    autoAlpha: 0,\n                },\n                {\n                    x: 0,\n                    autoAlpha: 1,\n                    ease: 'expo.inOut',\n                },\n                `-=${duration}`,\n            )\n            .fromTo(\n                // this.slides[index],\n                nextContent!.content,\n                {\n                    x: 0,\n                },\n                {\n                    x: window.matchMedia('(max-width: 1024px)').matches ? '-100vw' : '-50vw',\n                    ease: 'power4.inOut',\n                },\n                `-=${duration - 0.05}`,\n            )\n            .to(\n                nextContent!.name,\n                {\n                    opacity: 1,\n                    ease: 'expo.inOut',\n                },\n                `-=${duration}`,\n            )\n            .fromTo(\n                nextContent!.label,\n                {\n                    x: '15vw',\n                    autoAlpha: 0,\n                },\n                {\n                    x: 0,\n                    autoAlpha: 1,\n                    ease: 'expo.inOut',\n                },\n                `-=${duration - 0.05}`,\n            )\n            .fromTo(\n                cloneSlide,\n                {\n                    x: '50vw',\n                },\n                {\n                    x: 0,\n                    ease: 'power4.inOut',\n                },\n                `-=${duration - 0.05}`,\n            );\n    }\n\n    navigateToPrev() {\n        this.navigateTo(this._getPrevIndex());\n    }\n\n    navigateToNext() {\n        this.navigateTo(this._getNextIndex());\n    }\n\n    destroy() {\n        if (this.tl) {\n            this.tl.kill();\n            this.tl = null;\n        }\n        this._hammer.destroy();\n        window.removeEventListener('resize', this._onResize);\n        this.prevSlideButton?.removeEventListener('click', this.navigateToPrev);\n        this.nextSlideButton?.removeEventListener('click', this.navigateToNext);\n        // this.slides.forEach((slide) => {\n        //     this._contentMap.delete(slide);\n        // });\n\n        if (this._paginationDelegation) {\n            this._paginationDelegation.destroy();\n        }\n\n        if (this._autoplayTimeout) {\n            clearTimeout(this._autoplayTimeout);\n        }\n    }\n\n    protected _onResize() {\n        //\n    }\n\n    protected _onSwipe(event: any) {\n        console.log('swipe');\n        if (event.deltaX < 0) {\n            this.navigateToNext();\n        } else {\n            this.navigateToPrev();\n        }\n    }\n\n    protected _generateNavigation() {\n        if (!this.navigationContainer) return;\n\n        const arrowTemplate = `\n            <svg width=\"16\" height=\"9\" viewBox=\"0 0 16 9\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M15.2 1.348a.59.59 0 00-.834-.832L8.08 6.802 2.014.516a.59.59 0 00-.833.832l6.9 7.01 7.118-7.01z\" fill=\"#fff\"/>\n            </svg>\n        `;\n        this.prevSlideButton = document.createElement('button');\n        this.prevSlideButton.className = 'main-slider-navigation-arrow main-slider-navigation-arrow--prev';\n        const prevSlideLabel = 'Предыдущий слайд';\n        this.prevSlideButton.setAttribute('aria-label', prevSlideLabel);\n        this.prevSlideButton.setAttribute('title', prevSlideLabel);\n        this.prevSlideButton.innerHTML = arrowTemplate;\n        this.prevSlideButton.addEventListener('click', this.navigateToPrev);\n\n        this.nextSlideButton = document.createElement('button');\n        this.nextSlideButton.className = 'main-slider-navigation-arrow main-slider-navigation-arrow--next';\n        const nextSlideLabel = 'Следующий слайд';\n        this.nextSlideButton.setAttribute('aria-label', nextSlideLabel);\n        this.nextSlideButton.setAttribute('title', nextSlideLabel);\n        this.nextSlideButton.innerHTML = arrowTemplate;\n        this.nextSlideButton.addEventListener('click', this.navigateToNext);\n\n        const fragment = document.createDocumentFragment();\n        fragment.appendChild(this.prevSlideButton);\n        fragment.appendChild(this.nextSlideButton);\n\n        this.navigationContainer.appendChild(fragment);\n    }\n\n    protected _generatePagination() {\n        if (!this.paginationContainer) return;\n\n        const loaderTemplate = `\n            <svg viewBox=\"0 0 37 37\" class=\"main-slider-pagination__loading-svg\" preserveAspectRatio=\"none\">\n                <circle class=\"main-slider-pagination__loading-path\" cx=\"19\" cy=\"19\" r=\"18.5\" style=\"--path-length:115.49px;\"></circle>\n            </svg>\n        `;\n\n        this.paginationButtons = [];\n        const ul = document.createElement('ul');\n        ul.className = 'list-unstyled main-slider-pagination-list';\n\n        for (let i = 0; i < this.total; i++) {\n            const li = document.createElement('li');\n            li.className = 'main-slider-pagination-list__item';\n            ul.appendChild(li);\n            const button = document.createElement('button');\n            button.className = 'main-slider-pagination-btn js-main-slider-pagination-btn';\n            const buttonLabel = `Перейти на слайд ${i + 1}`;\n            button.setAttribute('aria-label', buttonLabel);\n            button.setAttribute('title', buttonLabel);\n            button.setAttribute('data-slide-index', `${i}`);\n            if (this.activeIndex === i) {\n                button.classList.add('is-active');\n            }\n            this.paginationButtons.push(button);\n            li.appendChild(button);\n            button.innerHTML += loaderTemplate;\n        }\n\n        this.paginationContainer.appendChild(ul);\n\n        this._paginationDelegation = delegate(\n            this.paginationContainer,\n            '.js-main-slider-pagination-btn',\n            'click',\n            (event: any) => {\n                this.navigateTo(parseInt(event.delegateTarget.dataset.slideIndex, 10));\n            },\n        );\n    }\n\n    protected _getPrevIndex(index = this.activeIndex) {\n        return (index - 1 + this.total) % this.total;\n    }\n\n    protected _getNextIndex(index = this.activeIndex) {\n        return (index + 1) % this.total;\n    }\n}\n"],"sourceRoot":""}