{"version":3,"sources":["webpack:///./src/js/sw.ts","webpack:///./src/js/custom-elements/index.ts","webpack:///./src/js/experiments/particles/particles-basic.ts","webpack:///./src/js/experiments/particles/path-trailing/index.ts","webpack:///./src/js/experiments/particles/path-trailing/shaders/vertex.glsl","webpack:///./src/js/experiments/particles/path-trailing/shaders/fragment.glsl","webpack:///./src/js/experiments/particles/path-trailing/russia.png","webpack:///./src/js/experiments/physics/physics-worker.ts","webpack:///./src/js/experiments/shaders/patterns/index.ts","webpack:///./src/js/experiments/shaders/patterns/shaders/vertex.glsl","webpack:///./src/js/experiments/shaders/patterns/shaders/fragment.glsl","webpack:///./src/js/experiments/sliders/1/index.ts","webpack:///./src/js/experiments/sliders/1/shaders/vertex.glsl","webpack:///./src/js/experiments/sliders/1/shaders/fragment.glsl","webpack:///./src/js/experiments/sliders/1/shaders/postprocessing.glsl","webpack:///./src/js/app.ts","webpack:///./src/js/polyfills.ts","webpack:///./src/js/experiments/base.ts","webpack:///./src/js/utils/index.ts"],"names":["unregister","navigator","value","serviceWorker","getRegistrations","then","registrations","forEach","registration","direct","Promise","resolve","body","result","f","args","i","arguments","length","apply","e","reject","_module","register","recover","PUBLIC_PATH","err","console","log","registerCustomElements","createParticlesBasic","baseExperiment","rAF","canvas","sizes","onRender","renderer","gui","THREE","outputEncoding","setPixelRatio","Math","min","window","devicePixelRatio","setSize","width","height","camera","position","z","scene","particleTexture","load","particlesGeometry","positions","Float32Array","particlesCount","random","setAttribute","sphere","color","map","size","sizeAttenuation","depthWrite","blending","add","controls","OrbitControls","enableDamping","animate","update","render","requestAnimationFrame","addEventListener","aspect","updateProjectionMatrix","module","hot","addDisposeHandler","cancelAnimationFrame","dispose","createParticlesPathTrailing","svg","document","querySelector","Error","svgBBox","getBBox","style","display","svgTexture","texture","params","mapColor","particlesColor","pointsAmountFactor","maxPointsToRender","pointsToRenderFactor","particlesSpeed","opacityFactor","particleSize","max","step","opacity","pathsData","maxPoints","initScene","Array","from","querySelectorAll","path","pathLength","getTotalLength","pointsAmount","floor","points","pointAt","point","getPointAtLength","normalizedPoint","x","y","push","pointsToRender","currentPosition","reduce","acc","pathData","onFinishChange","particlesMaterial","uniforms","uParticleSize","getPixelRatio","uTime","uColor","vertexShader","fragmentShader","transparent","addColor","onChange","particles","plane","material","dummyMat4","k","j","set","attributes","array","applyMatrix4","makeScale","needsUpdate","remove","disposeMesh","destroy","createPhysicsWorker","canvasRect","getBoundingClientRect","dat","addFolder","shadowMap","enabled","type","objects","world","CANNON","gravity","defaultMaterial","defaultContactMaterial","friction","restitution","addContactMaterial","receiveShadow","floorShape","floorBody","mass","addShape","addBody","ambientLight","directionalLight","target","castShadow","boxGeometry","boxMaterial","metalness","roughness","mesh","scale","shape","createBox","clock","oldElapsedTime","stats","Stats","appendChild","domElement","elapsedTime","getElapsedTime","deltaTime","copy","createShadersPatterns","geometry","defines","PI","createSliders1","sliderAladino","Aladino","density","dpr","post","fragment","postprocessingShader","speed","vertex","speed2","cells","carpets","cell","carpet","image","currentSrc","oldProgress","slider","Flickity","accessibility","freeScroll","dragThreshold","freeScrollFriction","prevNextButtons","pageDots","observer","IntersectionObserver","entries","entry","exactCarpet","find","dom","active","isIntersecting","observe","on","progress","resize","lerp","sw","accept","require","name","fn"],"mappings":"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","file":"js/legacy/app.0262455c.js","sourcesContent":["/* global PUBLIC_PATH */\nasync function register() {\n    if ('serviceWorker' in navigator) {\n        try {\n            await navigator.serviceWorker.register(`${PUBLIC_PATH}service-worker.js`);\n        } catch (err) {\n            console.log('SW registration failed: ', err);\n        }\n    }\n}\n\nasync function unregister() {\n    if ('serviceWorker' in navigator) {\n        const registrations = await navigator.serviceWorker.getRegistrations();\n        registrations.forEach((registration) => {\n            registration.unregister();\n        });\n    }\n}\n\nconst _module = { register, unregister };\n\nexport default _module;\n","// import * as Cookies from 'js-cookie';\n\nexport function registerCustomElements() {\n    // if (Cookies.get('COOKIES_USAGE_ACCEPTED') !== 'true') {\n    //     import(/* webpackChunkName: \"CookiesAgreement\" */ './CookiesAgreement/CookiesAgreement').then(\n    //         ({ CookiesAgreement }) => {\n    //             window.customElements.define('x-cookies-agreement', CookiesAgreement);\n    //         },\n    //     );\n    // }\n}\n","import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { baseExperiment } from '../base';\n\nexport const createParticlesBasic = baseExperiment('particles-basic', ({ canvas, sizes, onRender, gui }) => {\n    let rAF: number;\n    const renderer = new THREE.WebGLRenderer({ canvas });\n    renderer.outputEncoding = THREE.sRGBEncoding;\n    renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n    renderer.setSize(sizes.width, sizes.height);\n\n    const camera = new THREE.PerspectiveCamera(45, sizes.width / sizes.height, 0.1, 1000);\n    camera.position.z = 3;\n\n    const scene = new THREE.Scene();\n    const textureLoader = new THREE.TextureLoader();\n\n    const particleTexture = textureLoader.load(`${PUBLIC_PATH}img/particles/8.png`);\n\n    const particlesGeometry = new THREE.BufferGeometry();\n    const particlesCount = 20000;\n    const positions = new Float32Array(particlesCount * 3);\n\n    for (let i = 0; i < particlesCount * 3; i++) {\n        positions[i] = (Math.random() - 0.5) * 4;\n    }\n\n    particlesGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n\n    const sphere = new THREE.Points(\n        particlesGeometry,\n        new THREE.PointsMaterial({\n            color: 0xffffff,\n            map: particleTexture,\n            size: 0.05,\n            sizeAttenuation: true,\n            depthWrite: false,\n            blending: THREE.AdditiveBlending,\n        }),\n    );\n    scene.add(sphere);\n\n    const controls = new OrbitControls(camera, canvas);\n    controls.enableDamping = true;\n\n    function render() {\n        onRender();\n        controls.update();\n        renderer.render(scene, camera);\n    }\n\n    function animate() {\n        render();\n        rAF = requestAnimationFrame(animate);\n    }\n\n    function destroy() {\n        cancelAnimationFrame(rAF);\n        renderer.dispose();\n    }\n\n    animate();\n\n    window.addEventListener('resize', () => {\n        camera.aspect = sizes.width / sizes.height;\n        camera.updateProjectionMatrix();\n        renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n        renderer.setSize(sizes.width, sizes.height);\n    });\n\n    module.hot?.addDisposeHandler(destroy);\n});\n","import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { baseExperiment } from '../../base';\nimport vertexShader from './shaders/vertex.glsl';\nimport fragmentShader from './shaders/fragment.glsl';\nimport { disposeMesh } from '../../../utils';\nimport texture from './russia.png';\n\nexport const createParticlesPathTrailing = baseExperiment(\n    'particles-path-trailing',\n    ({ canvas, sizes, onRender, gui }) => {\n        let rAF: number;\n        const renderer = new THREE.WebGLRenderer({ canvas });\n        renderer.outputEncoding = THREE.sRGBEncoding;\n        renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n        renderer.setSize(sizes.width, sizes.height);\n\n        const camera = new THREE.PerspectiveCamera(45, sizes.width / sizes.height, 0.1, 100);\n        camera.position.z = 10;\n\n        const scene = new THREE.Scene();\n        // const clock = new THREE.Clock();\n\n        const svg = document.querySelector<SVGElement>('svg.js-russia-svg');\n\n        if (!svg) {\n            throw new Error('svg not found');\n        }\n\n        const svgBBox = svg.getBBox();\n        svg.style.display = 'none';\n        const svgTexture = new THREE.TextureLoader().load(texture);\n\n        const params = {\n            mapColor: 0x7071a,\n            // particlesColor: 0x040a14,\n            particlesColor: 0x110800,\n            // pointsAmountFactor: 0.4,\n            pointsAmountFactor: 0.9,\n            // maxPointsToRender: 50,\n            maxPointsToRender: 200,\n            // pointsToRenderFactor: 0.2,\n            pointsToRenderFactor: 0.5,\n            particlesSpeed: 1,\n            // opacityFactor: 0.2,\n            opacityFactor: 0.3,\n            // particleSize: 30,\n            particleSize: 20,\n        };\n        gui?.add(params, 'particlesSpeed').min(0).max(10).step(1);\n        gui?.add(params, 'opacityFactor').min(0).max(1).step(0.001);\n\n        let pathsData: any[] = [];\n        let maxPoints = 0;\n        let positions: Float32Array | null;\n        let opacity: Float32Array | null;\n\n        const particlesGeometry = new THREE.BufferGeometry();\n\n        function initScene() {\n            pathsData = Array.from(svg!.querySelectorAll<SVGPathElement>('.land')).map((path) => {\n                const pathLength = path.getTotalLength();\n                const pointsAmount = Math.floor(pathLength * params.pointsAmountFactor);\n                const points: THREE.Vector3[] = [];\n\n                for (let i = 0; i < pointsAmount; i++) {\n                    const pointAt = (pathLength / pointsAmount) * i;\n                    const point = path.getPointAtLength(pointAt);\n                    const normalizedPoint = {\n                        x: (point.x - svgBBox.width / 2) * 0.01 + Math.random() * 0.02,\n                        y: (point.y - svgBBox.height / 2) * 0.01 + Math.random() * 0.02,\n                        z: 0,\n                    };\n                    points.push(new THREE.Vector3(normalizedPoint.x, normalizedPoint.y, normalizedPoint.z));\n                }\n\n                return {\n                    length: pathLength,\n                    points,\n                    pointsToRender: Math.min(\n                        params.maxPointsToRender,\n                        Math.floor(pointsAmount * params.pointsToRenderFactor),\n                    ),\n                    currentPosition: 0,\n                };\n            });\n            maxPoints = pathsData.reduce((acc, pathData) => acc + pathData.pointsToRender, 0);\n\n            positions = new Float32Array(maxPoints * 3);\n            opacity = new Float32Array(maxPoints);\n\n            for (let i = 0; i < maxPoints * 3; i++) {\n                positions[i] = 0;\n            }\n\n            for (let i = 0; i < maxPoints; i++) {\n                opacity[i] = Math.random() * params.opacityFactor;\n            }\n\n            particlesGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n            particlesGeometry.setAttribute('opacity', new THREE.BufferAttribute(opacity, 1));\n        }\n\n        initScene();\n        gui?.add(params, 'pointsToRenderFactor').min(0).max(1).step(0.01).onFinishChange(initScene);\n        gui?.add(params, 'pointsAmountFactor').min(0).max(3).step(0.01).onFinishChange(initScene);\n        gui?.add(params, 'maxPointsToRender').min(0).max(500).step(1).onFinishChange(initScene);\n\n        const particlesMaterial = new THREE.ShaderMaterial({\n            uniforms: {\n                uParticleSize: { value: params.particleSize * renderer.getPixelRatio() },\n                uTime: { value: 0 },\n                uColor: { value: new THREE.Color(params.particlesColor) },\n            },\n            vertexShader,\n            fragmentShader,\n            transparent: true,\n            depthWrite: false,\n            blending: THREE.AdditiveBlending,\n        });\n        gui?.addColor(params, 'particlesColor').onChange(() => {\n            particlesMaterial.uniforms.uColor.value = new THREE.Color(params.particlesColor);\n        });\n        gui?.add(params, 'particleSize')\n            .min(0)\n            .max(100)\n            .step(0.01)\n            .onChange(() => {\n                particlesMaterial.uniforms.uParticleSize.value = params.particleSize;\n            });\n\n        const particles = new THREE.Points(particlesGeometry, particlesMaterial);\n        particles.position.y = 0.33;\n        scene.add(particles);\n\n        const plane = new THREE.Mesh(\n            new THREE.PlaneBufferGeometry(svgBBox.width * 0.01, svgBBox.height * 0.01, 1, 1),\n            new THREE.MeshBasicMaterial({\n                color: params.mapColor,\n                map: svgTexture,\n            }),\n        );\n        scene.add(plane);\n        gui?.addColor(params, 'mapColor').onChange(() => {\n            plane.material.color = new THREE.Color(params.mapColor);\n        });\n\n        const dummyMat4 = new THREE.Matrix4();\n\n        const controls = new OrbitControls(camera, canvas);\n        controls.enableDamping = true;\n\n        function render() {\n            // const elapsedTime = clock.getElapsedTime();\n\n            onRender();\n            // particlesMaterial.uniforms.uTime.value = elapsedTime;\n            let k = 0;\n\n            for (let i = 0; i < pathsData.length; i++) {\n                pathsData[i].currentPosition =\n                    (pathsData[i].currentPosition + params.particlesSpeed) % pathsData[i].points.length;\n\n                for (let j = 0; j < pathsData[i].pointsToRender; j++) {\n                    const point = pathsData[i].points[(j + pathsData[i].currentPosition) % pathsData[i].points.length];\n                    positions?.set([point.x, point.y, point.z], k * 3);\n\n                    if (opacity) {\n                        opacity[k] = j / (pathsData[i].pointsToRender / params.opacityFactor);\n                    }\n\n                    k++;\n                }\n            }\n\n            particlesGeometry.attributes.position.array = positions;\n            particlesGeometry.applyMatrix4(dummyMat4.makeScale(1, -1, 1));\n            particlesGeometry.attributes.opacity.array = opacity;\n            particlesGeometry.attributes.position.needsUpdate = true;\n            particlesGeometry.attributes.opacity.needsUpdate = true;\n\n            controls.update();\n            renderer.render(scene, camera);\n        }\n\n        function animate() {\n            render();\n            rAF = requestAnimationFrame(animate);\n        }\n\n        function destroy() {\n            if (svg) {\n                svg.style.display = 'block';\n            }\n\n            cancelAnimationFrame(rAF);\n            scene.remove(particles);\n            disposeMesh(particles);\n            renderer.dispose();\n            gui.destroy();\n        }\n\n        animate();\n\n        window.addEventListener('resize', () => {\n            camera.aspect = sizes.width / sizes.height;\n            camera.updateProjectionMatrix();\n            renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n            renderer.setSize(sizes.width, sizes.height);\n        });\n\n        module.hot?.addDisposeHandler(destroy);\n    },\n);\n","export default \"#define GLSLIFY 1\\nuniform float uParticleSize;\\n\\nattribute float opacity;\\n\\nvarying float vOpacity;\\n\\nvoid main() {\\n    vOpacity = opacity;\\n\\n    vec4 mvPosition = modelViewMatrix * vec4(position, 1.);\\n\\n    gl_PointSize = uParticleSize * (-1. / mvPosition.z);\\n    gl_Position = projectionMatrix * mvPosition;\\n}\";","export default \"#define GLSLIFY 1\\nuniform vec3 uColor;\\n\\nvarying float vOpacity;\\n\\nvoid main() {\\n    vec2 uv = vec2(gl_PointCoord.x, 1. - gl_PointCoord.y);\\n    vec2 centerUv = uv - 0.5;\\n\\n    vec4 color = vec4(0.08 / length(centerUv));\\n    color.rgb = min(vec3(10.), color.rgb);\\n    color.rgb *= uColor * 100.;\\n    color *= vOpacity;\\n    color.a = min(1., color.a);\\n\\n    gl_FragColor = vec4(color.rgb, 1.);\\n}\";","export default __webpack_public_path__ + \"img/russia.png\";","import * as THREE from 'three';\nimport Stats from 'three/examples/jsm/libs/stats.module';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport * as dat from 'three/examples/jsm/libs/dat.gui.module';\nimport * as CANNON from 'cannon-es';\n\nexport function createPhysicsWorker() {\n    const canvas = document.querySelector<HTMLCanvasElement>('.js-canvas[data-experiment=\"physics-worker\"]');\n    let rAF: number;\n\n    if (!canvas) return;\n\n    let canvasRect = canvas.getBoundingClientRect();\n\n    const sizes = {\n        width: canvasRect.width,\n        height: canvasRect.height,\n    };\n\n    const gui = new dat.GUI();\n    gui.addFolder('');\n\n    const renderer = new THREE.WebGLRenderer({ canvas });\n    renderer.shadowMap.enabled = true;\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n    renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n    renderer.setSize(sizes.width, sizes.height);\n\n    const camera = new THREE.PerspectiveCamera(45, sizes.width / sizes.height, 0.1, 1000);\n    camera.position.set(-5, 7, 12);\n    const scene = new THREE.Scene();\n\n    const objects: any[] = [];\n    const world = new CANNON.World();\n    world.gravity.set(0, -9.82, 0);\n\n    const defaultMaterial = new CANNON.Material('default');\n    const defaultContactMaterial = new CANNON.ContactMaterial(defaultMaterial, defaultMaterial, {\n        friction: 0.1,\n        restitution: 0.7,\n    });\n\n    world.addContactMaterial(defaultContactMaterial);\n    world.defaultContactMaterial = defaultContactMaterial;\n\n    const plane = new THREE.Mesh(new THREE.PlaneBufferGeometry(25, 25, 25), new THREE.MeshStandardMaterial());\n    plane.receiveShadow = true;\n    // plane.rotation.x = -Math.PI / 2;\n    scene.add(plane);\n\n    const floorShape = new CANNON.Plane();\n    const floorBody = new CANNON.Body({ material: defaultMaterial });\n    floorBody.mass = 0;\n    floorBody.addShape(floorShape);\n    // floorBody.quaternion.setFromAxisAngle(new CANNON.Vec3(-1, 0, 0), Math.PI * 0.5);\n    world.addBody(floorBody);\n\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.35);\n    scene.add(ambientLight);\n\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.5);\n    directionalLight.position.set(0.3, 0.5, 0.5);\n    directionalLight.target = plane;\n    directionalLight.castShadow = true;\n    scene.add(directionalLight);\n    gui.add(directionalLight.position, 'x').min(-10).max(10).step(0.001);\n    gui.add(directionalLight.position, 'y').min(-10).max(10).step(0.001);\n    gui.add(directionalLight.position, 'z').min(-10).max(10).step(0.001);\n\n    const boxGeometry = new THREE.BoxBufferGeometry(1, 1, 1);\n    const boxMaterial = new THREE.MeshStandardMaterial({\n        metalness: 0.5,\n        roughness: 0.45,\n    });\n\n    function createBox(size = 1, position: { x: number; y: number; z: number }) {\n        const mesh = new THREE.Mesh(boxGeometry, boxMaterial);\n        mesh.castShadow = true;\n        mesh.scale.set(size, size, size);\n        mesh.position.x = position.x;\n        mesh.position.y = position.y;\n        mesh.position.z = position.z;\n        scene.add(mesh);\n\n        const shape = new CANNON.Box(new CANNON.Vec3(position.x, position.y, position.z));\n        const body = new CANNON.Body({\n            mass: 1,\n            position: new CANNON.Vec3(position.x, position.y, position.z),\n            shape,\n        });\n\n        world.addBody(body);\n        objects.push({ mesh, body });\n        // body.applyLocalForce(new CANNON.Vec3(150, 0, 0), new CANNON.Vec3(0, 0, 0));\n    }\n\n    createBox(1, { x: 0, y: 3, z: 0 });\n\n    const clock = new THREE.Clock();\n    let oldElapsedTime = 0;\n\n    const controls = new OrbitControls(camera, canvas);\n    controls.enableDamping = true;\n\n    const stats = new Stats();\n    document.body.appendChild(stats.domElement);\n\n    function render() {\n        const elapsedTime = clock.getElapsedTime();\n        const deltaTime = elapsedTime - oldElapsedTime;\n        oldElapsedTime = elapsedTime;\n\n        // Update physics world\n        world.step(1 / 60, deltaTime, 3);\n\n        for (let i = 0; i < objects.length; i++) {\n            objects[i].mesh.position.copy(objects[i].body.position);\n        }\n\n        controls.update();\n        stats.update();\n\n        renderer.render(scene, camera);\n    }\n\n    function animate() {\n        render();\n        rAF = requestAnimationFrame(animate);\n    }\n\n    function destroy() {\n        cancelAnimationFrame(rAF);\n        gui.destroy();\n        boxGeometry.dispose();\n        boxMaterial.dispose();\n        renderer.dispose();\n    }\n\n    animate();\n\n    window.addEventListener('resize', () => {\n        canvasRect = canvas.getBoundingClientRect();\n        sizes.width = canvasRect.width;\n        sizes.height = canvasRect.height;\n        camera.aspect = sizes.width / sizes.height;\n        camera.updateProjectionMatrix();\n        renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n        renderer.setSize(sizes.width, sizes.height);\n    });\n\n    module.hot?.addDisposeHandler(destroy);\n}\n","import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { baseExperiment } from '../../base';\nimport vertexShader from './shaders/vertex.glsl';\nimport fragmentShader from './shaders/fragment.glsl';\nimport { disposeMesh } from '../../../utils';\n\nexport const createShadersPatterns = baseExperiment('shaders-patterns', ({ canvas, sizes, onRender, gui }) => {\n    let rAF: number;\n    const renderer = new THREE.WebGLRenderer({ canvas });\n    renderer.outputEncoding = THREE.sRGBEncoding;\n    renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n    renderer.setSize(sizes.width, sizes.height);\n\n    const camera = new THREE.PerspectiveCamera(45, sizes.width / sizes.height, 0.1, 100);\n    camera.position.z = 10;\n\n    const scene = new THREE.Scene();\n    const clock = new THREE.Clock();\n\n    // const params = {\n    //     mapColor: 0x7071a,\n    //     // particlesColor: 0x040a14,\n    //     particlesColor: 0x110800,\n    //     // pointsAmountFactor: 0.4,\n    //     pointsAmountFactor: 0.9,\n    //     // maxPointsToRender: 50,\n    //     maxPointsToRender: 200,\n    //     // pointsToRenderFactor: 0.2,\n    //     pointsToRenderFactor: 0.5,\n    //     particlesSpeed: 1,\n    //     // opacityFactor: 0.2,\n    //     opacityFactor: 0.3,\n    //     // particleSize: 30,\n    //     particleSize: 20,\n    // };\n\n    const geometry = new THREE.PlaneBufferGeometry(6, 6, 256, 256);\n\n    const material = new THREE.ShaderMaterial({\n        defines: {\n            PI: Math.PI,\n        },\n        uniforms: {\n            uTime: { value: 0 },\n        },\n        vertexShader,\n        fragmentShader,\n        transparent: true,\n    });\n\n    const mesh = new THREE.Mesh(geometry, material);\n    mesh.position.y = 0.33;\n    scene.add(mesh);\n\n    const controls = new OrbitControls(camera, canvas);\n    controls.enableDamping = true;\n\n    function render() {\n        const elapsedTime = clock.getElapsedTime();\n\n        onRender();\n        material.uniforms.uTime.value = elapsedTime;\n\n        controls.update();\n        renderer.render(scene, camera);\n    }\n\n    function animate() {\n        render();\n        rAF = requestAnimationFrame(animate);\n    }\n\n    function destroy() {\n        cancelAnimationFrame(rAF);\n        scene.remove(mesh);\n        disposeMesh(mesh);\n        renderer.dispose();\n        gui.destroy();\n    }\n\n    animate();\n\n    window.addEventListener('resize', () => {\n        camera.aspect = sizes.width / sizes.height;\n        camera.updateProjectionMatrix();\n        renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n        renderer.setSize(sizes.width, sizes.height);\n    });\n\n    module.hot?.addDisposeHandler(destroy);\n});\n","export default \"#define GLSLIFY 1\\n//\\n// GLSL textureless classic 3D noise \\\"cnoise\\\",\\n// with an RSL-style periodic variant \\\"pnoise\\\".\\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\\n// Version: 2011-10-11\\n//\\n// Many thanks to Ian McEwan of Ashima Arts for the\\n// ideas for permutation and gradient selection.\\n//\\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\\n// Distributed under the MIT license. See LICENSE file.\\n// https://github.com/ashima/webgl-noise\\n//\\n\\nvec3 mod289(vec3 x)\\n{\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 mod289(vec4 x)\\n{\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 permute(vec4 x)\\n{\\n  return mod289(((x*34.0)+1.0)*x);\\n}\\n\\nvec4 taylorInvSqrt(vec4 r)\\n{\\n  return 1.79284291400159 - 0.85373472095314 * r;\\n}\\n\\nvec3 fade(vec3 t) {\\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\\n}\\n\\n// Classic Perlin noise\\nfloat cnoise(vec3 P)\\n{\\n  vec3 Pi0 = floor(P); // Integer part for indexing\\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\\n  Pi0 = mod289(Pi0);\\n  Pi1 = mod289(Pi1);\\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\\n  vec4 iz0 = Pi0.zzzz;\\n  vec4 iz1 = Pi1.zzzz;\\n\\n  vec4 ixy = permute(permute(ix) + iy);\\n  vec4 ixy0 = permute(ixy + iz0);\\n  vec4 ixy1 = permute(ixy + iz1);\\n\\n  vec4 gx0 = ixy0 * (1.0 / 7.0);\\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\\n  gx0 = fract(gx0);\\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\\n  vec4 sz0 = step(gz0, vec4(0.0));\\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\\n\\n  vec4 gx1 = ixy1 * (1.0 / 7.0);\\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\\n  gx1 = fract(gx1);\\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\\n  vec4 sz1 = step(gz1, vec4(0.0));\\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\\n\\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\\n\\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\\n  g000 *= norm0.x;\\n  g010 *= norm0.y;\\n  g100 *= norm0.z;\\n  g110 *= norm0.w;\\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\\n  g001 *= norm1.x;\\n  g011 *= norm1.y;\\n  g101 *= norm1.z;\\n  g111 *= norm1.w;\\n\\n  float n000 = dot(g000, Pf0);\\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\\n  float n111 = dot(g111, Pf1);\\n\\n  vec3 fade_xyz = fade(Pf0);\\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\\n  return 2.2 * n_xyz;\\n}\\n\\nuniform float uTime;\\n\\nvarying vec2 vUv;\\nvarying float vElevation;\\n\\nvoid main() {\\n    vec4 modelPosition = modelMatrix * vec4(position, 1.0);\\n    modelPosition.z += cnoise(modelPosition.xyz * sin(uTime)) * 0.7;\\n    float elevation = modelPosition.z;\\n\\n    vUv = uv;\\n    vElevation = elevation;\\n\\n    gl_Position = projectionMatrix * viewMatrix * modelPosition;\\n}\\n\\n// varying vec2 vUv;\\n\\n// void main() {\\n//     vUv = uv;\\n//     vec4 mvPosition = modelViewMatrix * vec4(position, 1.);\\n//     gl_Position = projectionMatrix * mvPosition;\\n// }\";","export default \"#define GLSLIFY 1\\nuniform float uTime;\\n\\nvarying vec2 vUv;\\nvarying float vElevation;\\n\\nvoid main() {\\n    vec3 color = vec3(distance(vUv, vec2(0.5)));\\n    \\n    gl_FragColor = vec4(mix(vec3(0.2), color, clamp(vElevation, 0., 1.)), 1.0);\\n}\\n\";","import './styles.scss';\nimport Flickity from 'flickity';\nimport Aladino from 'aladino';\nimport lerp from 'lerp';\nimport { baseExperiment } from '../../base';\nimport vertexShader from './shaders/vertex.glsl';\nimport fragmentShader from './shaders/fragment.glsl';\nimport postprocessingShader from './shaders/postprocessing.glsl';\n\nexport const createSliders1 = baseExperiment('sliders-1', ({ canvas, sizes, onRender, gui }) => {\n    let rAF: number;\n    const sliderAladino = new Aladino({\n        density: 16,\n        dpr: Math.min(devicePixelRatio, 2),\n        canvas,\n        post: {\n            fragment: postprocessingShader,\n            uniforms: {\n                speed: 0.0,\n            },\n        },\n    });\n\n    const material = sliderAladino.material({\n        vertex: vertexShader,\n        fragment: fragmentShader,\n        uniforms: {\n            speed: 0,\n            speed2: 0,\n        },\n    });\n\n    const cells = [...document.querySelectorAll('.slider-el')];\n    const carpets = [];\n    cells.forEach((cell) => {\n        const carpet = sliderAladino.carpet(cell, {\n            material,\n            uniforms: {\n                image: sliderAladino.texture(cell.currentSrc),\n            },\n        });\n\n        carpets.push(carpet);\n    });\n\n    let oldProgress = 0;\n    let speed = 0;\n    const freeScroll = true;\n\n    const slider = new Flickity(document.querySelector('.carousel')!, {\n        accessibility: true,\n        freeScroll,\n        dragThreshold: freeScroll ? 0 : 30,\n        // dragThreshold: 30,\n        freeScrollFriction: 0.07,\n        prevNextButtons: false,\n        pageDots: false,\n        // wrapAround: true,\n    });\n\n    const observer = new IntersectionObserver((entries) => {\n        entries.forEach((entry) => {\n            const exactCarpet = carpets.find((carpet) => entry.target === carpet.dom);\n            if (exactCarpet) {\n                exactCarpet.active = entry.isIntersecting;\n            }\n        });\n    });\n\n    cells.forEach((cell) => {\n        observer.observe(cell);\n    });\n\n    slider.on('scroll', (progress) => {\n        // The way flickity works doesn't allow an easy use of the position,\n        // So it can be optimised, as here we're recalculating dom boundingbox each time\n        carpets.forEach((carpet) => {\n            carpet.resize();\n        });\n\n        speed = oldProgress - progress;\n        oldProgress = progress;\n    });\n\n    function render() {\n        material.uniforms.speed = lerp(material.uniforms.speed, speed, 0.6);\n        material.uniforms.speed2 = lerp(material.uniforms.speed2, speed, 0.1);\n        sliderAladino.post.uniforms.speed = lerp(sliderAladino.post.uniforms.speed, speed, 0.1);\n    }\n\n    function animate() {\n        render();\n        rAF = requestAnimationFrame(animate);\n    }\n\n    function destroy() {\n        cancelAnimationFrame(rAF);\n        carpets.forEach((carpet) => {\n            carpet.destroy();\n        });\n        carpets = [];\n        sliderAladino.destroy();\n        slider.destroy();\n        gui.destroy();\n    }\n\n    animate();\n\n    window.addEventListener('resize', () => {\n        carpets.forEach((carpet) => {\n            carpet.resize();\n        });\n    });\n\n    module.hot?.addDisposeHandler(destroy);\n});\n","export default \"#define GLSLIFY 1\\nattribute vec2 position;\\nattribute vec2 uv;\\nuniform mat4 projection;\\nuniform float speed;\\nuniform float speed2;\\nvarying vec2 vUv;\\n\\nfloat parabola(float x, float k) {\\n  return pow(4.0 * x * (1.0 - x), k);\\n}\\n\\nvoid main() {\\n  vUv = uv;\\n\\n  vec4 pos = vec4(position, 0.0, 1.0);\\n  float spee = speed * 2.0;\\n  pos.x += parabola(uv.y, 1.0) * spee;\\n  vec4 pp = projection * vec4(position, 0.0, 1.0);\\n  float yy = ((pp / pp.w).x + 1.0) / 2.0;\\n  pos.z = parabola(clamp(yy, 0.0, 1.0), 2.4) * speed2 * 160.0;\\n  pos.z = clamp(pos.z, -6.0, 6.0);\\n\\n  gl_Position = projection * pos;\\n}\";","export default \"precision highp float;\\n#define GLSLIFY 1\\n\\nuniform vec2 size;\\nuniform vec2 sizeImage;\\nuniform sampler2D image;\\n\\nvarying vec2 vUv;\\n\\nvec4 coverTexture(sampler2D tex, vec2 imgSize, vec2 ouv) {\\n  vec2 s = size;\\n  vec2 i = imgSize;\\n  float rs = s.x / s.y;\\n  float ri = i.x / i.y;\\n  vec2 new = rs < ri ? vec2(i.x * s.y / i.y, s.y) : vec2(s.x, i.y * s.x / i.x);\\n  vec2 offset = (rs < ri ? vec2((new.x - s.x) / 2.0, 0.0) : vec2(0.0, (new.y - s.y) / 2.0)) / new;\\n  vec2 uv = ouv * s / new + offset;\\n\\n  return texture2D(tex, uv);\\n}\\n\\nvoid main() {\\n  gl_FragColor = coverTexture(image, sizeImage, vUv);\\n}\\n\";","export default \"precision highp float;\\n#define GLSLIFY 1\\n    \\nuniform float time;\\nuniform float speed;\\nuniform vec2 viewport;\\nuniform sampler2D image;\\n\\nfloat parabola(float x, float k) {\\n    return pow(4.0 * x * (1.0 - x), k);\\n}\\n\\nfloat random(vec2 co) {\\n    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\\n}\\n\\nvoid main() {\\n    vec2 uv = gl_FragCoord.xy / viewport;\\n    float spe = speed * 300.0;\\n    float p = parabola(uv.x, 1.4);\\n\\n    float r = texture2D(image, uv + vec2(0.000 * spe, 0.0) * p).r;\\n    float g = texture2D(image, uv + vec2(0.01 * spe, 0.0) * p).g;\\n    float b = texture2D(image, uv + vec2(0.02 * spe, 0.0) * p).b;\\n    float a = texture2D(image, uv + vec2(0.000 * spe, 0.0) * p).w;\\n\\n    gl_FragColor = vec4(r, g, b, a);\\n    \\n    // Film grain effect\\n    float n = random(uv + mod(time, 3.0));\\n    gl_FragColor.rgb *= 1.0 - (n * 0.2);\\n}\";","/* global USE_SERVICE_WORKER */\nimport './webpack-imports';\nimport './sentry';\nimport './polyfills';\n\nimport sw from './sw';\nimport { registerCustomElements } from './custom-elements';\n\nimport { createParticlesBasic } from './experiments/particles/particles-basic';\nimport { createParticlesPathTrailing } from './experiments/particles/path-trailing';\n\nimport { createPhysicsWorker } from './experiments/physics/physics-worker';\n\nimport { createShadersPatterns } from './experiments/shaders/patterns';\n\nimport { createSliders1 } from './experiments/sliders/1';\n\nregisterCustomElements();\n\ncreateParticlesBasic();\ncreateParticlesPathTrailing();\ncreatePhysicsWorker();\ncreateShadersPatterns();\ncreateSliders1();\n\n// Service Worker\nif (USE_SERVICE_WORKER) {\n    window.addEventListener('load', () => sw.register());\n} else {\n    sw.unregister();\n}\n\nmodule.hot?.accept();\n","/* global BUILD_TYPE */\n/* eslint global-require: \"off\" */\nimport 'focus-visible';\n// import 'intersection-observer';\n\nif (BUILD_TYPE === 'legacy') {\n    require('core-js/es/symbol');\n    require('core-js/es/promise/finally');\n    require('document-register-element/build/document-register-element');\n    // require('element-matches-polyfill');\n    require('whatwg-fetch');\n}\n","import Stats from 'three/examples/jsm/libs/stats.module';\nimport * as dat from 'three/examples/jsm/libs/dat.gui.module';\n\ntype Experiment = (data: {\n    canvas: HTMLCanvasElement;\n    onRender: () => void;\n    gui: any;\n    sizes: { width: number; height: number };\n}) => void;\n\nexport function baseExperiment(name: string, fn: Experiment) {\n    return () => {\n        const canvas = document.querySelector<HTMLCanvasElement>(`.js-canvas[data-experiment=\"${name}\"]`);\n\n        if (!canvas) {\n            return;\n        }\n\n        let canvasRect = canvas.getBoundingClientRect();\n\n        const sizes = {\n            width: canvasRect.width,\n            height: canvasRect.height,\n        };\n\n        const stats = new Stats();\n        document.body.appendChild(stats.domElement);\n\n        const gui = new dat.GUI();\n        gui.addFolder();\n\n        function onRender() {\n            stats.update();\n        }\n\n        fn({ sizes, gui, canvas, onRender });\n\n        window.addEventListener('resize', () => {\n            canvasRect = canvas.getBoundingClientRect();\n            sizes.width = canvasRect.width;\n            sizes.height = canvasRect.height;\n        });\n    };\n}\n","import { BackSide, FrontSide, Group, Material, Mesh, Points } from 'three';\n\nexport function disposeMesh(mesh: Mesh | Points) {\n    mesh.geometry?.dispose();\n    if (mesh.material) {\n        if (mesh.material instanceof Array) {\n            for (let i = 0; i < mesh.material.length; ++i) {\n                mesh.material[i].dispose();\n            }\n        } else {\n            mesh.material.dispose();\n        }\n    }\n}\n\nexport function separateCullingPass(mesh: Mesh): Group {\n    const group = new Group();\n\n    [BackSide, FrontSide].forEach((side, i) => {\n        const newMesh = mesh.clone();\n        newMesh.name = `${newMesh.name}__clone${i + 1}`;\n\n        if (mesh.material instanceof Material) {\n            const material = mesh.material.clone();\n            newMesh.material = material;\n            material.transparent = true;\n            material.side = side;\n        }\n\n        group.add(newMesh);\n\n        if (mesh.parent) {\n            mesh.parent.add(group);\n            mesh.parent.remove(mesh);\n            disposeMesh(mesh);\n        }\n    });\n\n    return group;\n}\n"],"sourceRoot":""}