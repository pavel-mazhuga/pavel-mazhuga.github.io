# На сервере:
# 1. ssh-keygen
# 2. Копировать приватный ключ, положить в переменную PRODUCTION_PRIVATE_KEY в gitlab
# 3. Копировать публичный ключ (~/.ssh/<KEY_NAME>.pub), добавить в ~/.ssh/authorized_keys на сервере
# 4. Добавить в переменную SSH_KNOWN_HOSTS в gitlab (ssh-keyscan -H <SERVER IP>)
# 5. Настроить права на сервере:
## chown -R chipsa:chipsa #PATH#
## find #PATH# -type d -exec chmod 775 {} \;
## find #PATH# -type f -exec chmod 664 {} \;
## где #PATH# - путь до проекта (ниже в конфиге $PROJECT_PATH)

image: alpine

# Глобальные переменные
variables: &global_variables
    GIT_DEPTH: 5
    IMAGE_FRONTEND: node:14-alpine
    FRONTEND_PATH: '.'
    # FRONTEND_PATH: './local/templates/main/frontend'
    SSH_PORT: 22

# Глобальные переменные для дева
variables: &global_variables_dev
    ENV_PRIVATE_KEY: $STAGING_PRIVATE_KEY
    PROJECT_HOST: "chipsa@91.230.210.213"
    PROJECT_PATH: "<<[PROJECT_PATH_HERE]>>"
    BRANCH_NAME: dev
    SSH_PORT: 33022


# Глобальные переменные для продакшена
variables: &global_variables_prod
    ENV_PRIVATE_KEY: $PRODUCTION_PRIVATE_KEY
    PROJECT_HOST: "<<[PROJECT_HOST_HERE]>>"
    PROJECT_PATH: "<<[PROJECT_PATH_HERE]>>"
    BRANCH_NAME: master

.before_script: &before_script
    - 'which ssh-agent || ( apk update && apk add openssh-client )'
    - eval $(ssh-agent -s)
    - echo "$ENV_PRIVATE_KEY" | ssh-add -
    - mkdir -p ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts

.install_deploy_deps: &install_deploy_deps
    # Проверяем, есть ли rsync, если нет - устанавливаем
    - which rsync || ( apk update && apk add rsync )

.deploy_frontend: &deploy_frontend
    # Создаем временные папки
    - ssh -p $SSH_PORT $PROJECT_HOST "rm -rf $PROJECT_PATH/$FRONTEND_PATH/_tmp && mkdir -p -m 775 $PROJECT_PATH/$FRONTEND_PATH/_tmp"
    - ssh -p $SSH_PORT $PROJECT_HOST "rm -rf $PROJECT_PATH/$FRONTEND_PATH/_old && mkdir -p -m 775 $PROJECT_PATH/$FRONTEND_PATH/_old"
    - ssh -p $SSH_PORT $PROJECT_HOST "rm -rf $PROJECT_PATH/$FRONTEND_PATH/_html_tmp && mkdir -p -m 775 $PROJECT_PATH/$FRONTEND_PATH/_html_tmp"
    - ssh -p $SSH_PORT $PROJECT_HOST "rm -rf $PROJECT_PATH/$FRONTEND_PATH/_html_old && mkdir -p -m 775 $PROJECT_PATH/$FRONTEND_PATH/_html_old"
    # Создаем папку build, если она не существует
    - ssh -p $SSH_PORT $PROJECT_HOST "mkdir -p -m 775 $PROJECT_PATH/$FRONTEND_PATH/build"
    # Создаем папку html, если она не существует
    - ssh -p $SSH_PORT $PROJECT_HOST "mkdir -p -m 775 $PROJECT_PATH/html"
    # Копируем билд фронтенда с сервера gitlab ci
    - rsync -zarvh -av -e "ssh -p $SSH_PORT" $FRONTEND_PATH/build $PROJECT_HOST:$PROJECT_PATH/$FRONTEND_PATH/_tmp
    # Копируем html с сервера gitlab ci
    - rsync -zarvh -av -e "ssh -p $SSH_PORT" html $PROJECT_HOST:$PROJECT_PATH/$FRONTEND_PATH/_html_tmp
    # Меняем старый и новый билды фронтенда местами
    - ssh -p $SSH_PORT $PROJECT_HOST "( ( find $PROJECT_PATH/$FRONTEND_PATH/build -mindepth 1 | read ) && mv $PROJECT_PATH/$FRONTEND_PATH/build $PROJECT_PATH/$FRONTEND_PATH/_old ) && mv $PROJECT_PATH/$FRONTEND_PATH/_tmp/build $PROJECT_PATH/$FRONTEND_PATH"
    # Меняем старый и новый html местами
    - ssh -p $SSH_PORT $PROJECT_HOST "( ( find $PROJECT_PATH/html -mindepth 1 | read ) && mv $PROJECT_PATH/html $PROJECT_PATH/$FRONTEND_PATH/_html_old ) && mv $PROJECT_PATH/$FRONTEND_PATH/_html_tmp/html $PROJECT_PATH"
    # Удаляем временные папки
    - ssh -p $SSH_PORT $PROJECT_HOST "rm -rf $PROJECT_PATH/$FRONTEND_PATH/_old"
    - ssh -p $SSH_PORT $PROJECT_HOST "rm -rf $PROJECT_PATH/$FRONTEND_PATH/_tmp"
    - ssh -p $SSH_PORT $PROJECT_HOST "rm -rf $PROJECT_PATH/$FRONTEND_PATH/_html_old"
    - ssh -p $SSH_PORT $PROJECT_HOST "rm -rf $PROJECT_PATH/$FRONTEND_PATH/_html_tmp"

.deploy_storybook: &deploy_storybook
    - rsync -zarvh -av -e "ssh -p $SSH_PORT" $FRONTEND_PATH/build/storybook $PROJECT_HOST:$PROJECT_PATH/$FRONTEND_PATH/build

.pull_repo: &pull_repo
    # Пуллим изменения из репозитория
    - ssh -p $SSH_PORT $PROJECT_HOST "cd $PROJECT_PATH/ && git checkout $BRANCH_NAME && git pull --force origin $BRANCH_NAME"

.drop_bitrix_cache: &drop_bitrix_cache
    # Ощичаем кэш битрикса
    - ssh -p $SSH_PORT $PROJECT_HOST "rm -rf $PROJECT_PATH/bitrix/cache/*"

stages:
    - install_dependencies
    - build
    - deploy
    - deploy_after

install_dependencies_frontend:
    image: $IMAGE_FRONTEND
    stage: install_dependencies
    variables:
        <<: *global_variables
    only:
        refs:
            - dev
            # - master
        changes:
            - package-lock.json
            # - local/templates/main/frontend/package-lock.json
    cache: 
        key: $CI_COMMIT_REF_SLUG-$CI_PROJECT_DIR
        paths:
            - $FRONTEND_PATH/node_modules/
    script:
        - cd $FRONTEND_PATH/
        - npm ci

build_frontend:
    image: $IMAGE_FRONTEND
    stage: build
    variables:
        <<: *global_variables
    cache: 
        key: $CI_COMMIT_REF_SLUG-$CI_PROJECT_DIR
        paths:
          - $FRONTEND_PATH/node_modules/
    artifacts:
        paths:
            - $FRONTEND_PATH/build/
    only:
        refs:
            - dev
            # - master
        # changes:
        #     - .gitlab-ci.yml
        #     - local/templates/main/frontend/**/*
    script:
        - cd $FRONTEND_PATH/
        - npm test
        - npm run build:sandbox

build_storybook:
    image: $IMAGE_FRONTEND
    stage: build
    variables:
        <<: *global_variables
    only:
        refs:
            - dev
            # - master
        changes:
            - local/templates/main/frontend/**/*
            - .gitlab-ci.yml
    cache: 
        key: $CI_COMMIT_REF_SLUG-$CI_PROJECT_DIR
        paths:
        - $FRONTEND_PATH/node_modules/
    script:
        - cd $FRONTEND_PATH/
        - npm run storybook:build
    artifacts:
        paths:
        - $FRONTEND_PATH/build/storybook/

deploy_frontend_dev:
    stage: deploy
    variables:
        <<: *global_variables
        <<: *global_variables_dev
    dependencies:
        - build_frontend
    only:
        refs:
            - dev
        # changes:
        #     - .gitlab-ci.yml
        #     - local/templates/main/frontend/**/*
    before_script:
        - *before_script
    script:
        - *install_deploy_deps
        - *deploy_frontend
        - *pull_repo
        - *drop_bitrix_cache

deploy_storybook_dev:
    stage: deploy_after
    variables:
        <<: *global_variables_dev
        <<: *global_variables
    dependencies:
        - build_storybook
    only:
        refs:
            - dev
        # changes:
        #     - .gitlab-ci.yml
        #     - local/templates/main/frontend/**/*
    before_script:
        - *before_script
    script:
        - *install_deploy_deps
        - *deploy_storybook

pull_dev:
    stage: deploy_after
    variables:
        <<: *global_variables
        <<: *global_variables_dev
    only:
        refs:
            - dev
    before_script:
        - *before_script
    script:
        - *pull_repo
        # TODO: drop bitrix cache only if non-frontend files were changed
        - *drop_bitrix_cache
