{"version":3,"sources":["webpack:///./src/js/experiments/particles/path-trailing/russia.png","webpack:///./src/js/experiments/physics/physics-worker.ts","webpack:///./src/js/experiments/shaders/patterns/index.ts","webpack:///./src/js/experiments/shaders/patterns/shaders/vertex.glsl","webpack:///./src/js/experiments/shaders/patterns/shaders/fragment.glsl","webpack:///./src/js/experiments/shaders/pixelated/index.ts","webpack:///./src/js/experiments/shaders/pixelated/shaders/vertex.glsl","webpack:///./src/js/experiments/shaders/pixelated/shaders/fragment.glsl","webpack:///./src/js/experiments/shaders/pixelated/shaders/postprocessing.glsl","webpack:///./src/js/experiments/sliders/1/index.ts","webpack:///./src/js/experiments/sliders/1/shaders/vertex.glsl","webpack:///./src/js/experiments/sliders/1/shaders/fragment.glsl","webpack:///./src/js/experiments/sliders/1/shaders/postprocessing.glsl","webpack:///./src/js/experiments/sliders/fullscreen/index.ts","webpack:///./src/js/utils/webgl.ts","webpack:///./src/js/experiments/text/text-basic.ts","webpack:///./src/js/experiments/text/shaders/vertex.glsl","webpack:///./src/js/experiments/text/shaders/fragment.glsl","webpack:///./src/js/experiments/instancing/gltf.ts","webpack:///./src/js/experiments/sliders/fullscreen/main-slider/webgl-slider.ts","webpack:///./src/js/experiments/sliders/fullscreen/main-slider/shaders/vertex.glsl","webpack:///./src/js/experiments/sliders/fullscreen/main-slider/shaders/fragment.glsl","webpack:///./src/js/sw.ts","webpack:///./src/js/app.ts","webpack:///./src/js/experiments/base.ts","webpack:///./src/js/utils/index.ts","webpack:///./src/js/experiments/sliders/fullscreen/main-slider/index.ts","webpack:///./src/js/experiments/particles/particles-basic.ts","webpack:///./src/js/experiments/particles/path-trailing/index.ts","webpack:///./src/js/experiments/particles/path-trailing/shaders/vertex.glsl","webpack:///./src/js/experiments/particles/path-trailing/shaders/fragment.glsl"],"names":["createPhysicsWorker","rAF","canvas","document","querySelector","canvasRect","getBoundingClientRect","sizes","width","height","gui","dat","addFolder","renderer","THREE","shadowMap","enabled","type","setPixelRatio","Math","min","window","devicePixelRatio","setSize","camera","position","set","scene","objects","world","CANNON","gravity","defaultMaterial","defaultContactMaterial","friction","restitution","addContactMaterial","plane","receiveShadow","add","floorShape","floorBody","material","mass","addShape","addBody","ambientLight","directionalLight","target","castShadow","max","step","boxGeometry","boxMaterial","metalness","roughness","size","mesh","scale","x","y","z","shape","body","push","createBox","clock","oldElapsedTime","controls","OrbitControls","enableDamping","stats","Stats","appendChild","domElement","animate","elapsedTime","getElapsedTime","deltaTime","i","length","copy","update","render","requestAnimationFrame","addEventListener","aspect","updateProjectionMatrix","module","hot","addDisposeHandler","cancelAnimationFrame","destroy","dispose","createShadersPatterns","baseExperiment","onRender","outputEncoding","geometry","defines","PI","uniforms","uTime","value","vertexShader","fragmentShader","transparent","remove","disposeMesh","createShadersPixelated","sliderAladino","Aladino","density","dpr","post","fragment","postprocessingShader","pixelSize","vertex","img","carpet","image","texture","currentSrc","resize","createSliders1","speed","speed2","cells","querySelectorAll","carpets","forEach","cell","oldProgress","slider","Flickity","accessibility","freeScroll","dragThreshold","freeScrollFriction","prevNextButtons","pageDots","observer","IntersectionObserver","entries","entry","exactCarpet","find","dom","active","isIntersecting","observe","on","progress","lerp","_isWebGLAvailable","isWebGLAvailable","createSlidersFullscreen","mainSlider","mainSliderContainer","MainSliderConstructor","MainWebglSlider","MainSlider","duration","autoplay","delay","this","createElement","WebGLRenderingContext","getContext","err","createMultilineText","ctx","textToWrite","maxWidth","text","futureText","wordsInCurrent","wordArrayLength","currentText","replace","subWidth","maxLineWidth","wordArray","split","measureText","console","log","createTextCanvas","el","textContent","styles","getComputedStyle","textArr","fontSize","parseFloat","lineHeight","font","fontFamily","textAlign","textBaseline","fillStyle","color","fillText","f","createTextBasic","then","direct","aladino","Array","from","textEl","generateTexture","Promise","resolve","toBlob","blob","newImg","Image","hidden","url","URL","createObjectURL","onload","removeChild","setTimeout","revokeObjectURL","src","gsap","to","ease","args","arguments","apply","e","reject","createInstancingGltf","instancedShelf","instancedTable","gltfLoader","GLTFLoader","dummy","load","PUBLIC_PATH","gltf","rotation","shelf","getObjectByName","table","name","posObj","updateMatrix","setMatrixAt","matrix","result","WebglMainSlider","constructor","container","options","super","_onVisibilityChange","bind","isAnimating","isWebglInitialized","_init","displacementTexture","textures","images","map","currentImage","activeIndex","nextImage","nextIndex","disp","dispPower","intensity","textureFactor","classList","setTextureFactor","index","factor","rect","rectRatio","imageRatio","removeEventListener","disconnect","navigateTo","onComplete","_onResize","unregister","navigator","serviceWorker","getRegistrations","registrations","registration","_module","register","recover","createParticlesBasic","createParticlesPathTrailing","sw","fn","defaultOptions","paused","navigateToNext","navigateToPrev","_onSwipe","slides","total","slidesContainer","navigationContainer","paginationContainer","_getNextIndex","prevSlideButton","nextSlideButton","paginationButtons","_paginationDelegation","_autoplayTimeout","tl","_hammer","Hammer","get","direction","DIRECTION_HORIZONTAL","eventName","once","off","resume","clearTimeout","_getPrevIndex","timeline","defaults","clearProps","autoAlpha","fromTo","nextContent","content","matchMedia","matches","opacity","label","cloneSlide","kill","event","deltaX","_generateNavigation","arrowTemplate","className","prevSlideLabel","setAttribute","innerHTML","nextSlideLabel","createDocumentFragment","_generatePagination","ul","li","button","buttonLabel","delegate","parseInt","delegateTarget","dataset","slideIndex","particleTexture","particlesGeometry","positions","Float32Array","particlesCount","random","sphere","sizeAttenuation","depthWrite","blending","svg","Error","svgBBox","getBBox","style","display","svgTexture","params","mapColor","particlesColor","pointsAmountFactor","maxPointsToRender","pointsToRenderFactor","particlesSpeed","opacityFactor","particleSize","pathsData","maxPoints","initScene","path","pathLength","getTotalLength","pointsAmount","floor","points","pointAt","point","getPointAtLength","normalizedPoint","pointsToRender","currentPosition","reduce","acc","pathData","onFinishChange","particlesMaterial","uParticleSize","getPixelRatio","uColor","addColor","onChange","particles","dummyMat4","k","j","attributes","array","applyMatrix4","makeScale","needsUpdate"],"mappings":"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","file":"js/modern/app.c8842c95.js","sourcesContent":["export default __webpack_public_path__ + \"img/russia.png\";","import * as THREE from 'three';\nimport Stats from 'three/examples/jsm/libs/stats.module';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport * as dat from 'three/examples/jsm/libs/dat.gui.module';\nimport * as CANNON from 'cannon-es';\n\nexport function createPhysicsWorker() {\n    const canvas = document.querySelector<HTMLCanvasElement>('.js-canvas[data-experiment=\"physics-worker\"]');\n    let rAF: number;\n\n    if (!canvas) return;\n\n    let canvasRect = canvas.getBoundingClientRect();\n\n    const sizes = {\n        width: canvasRect.width,\n        height: canvasRect.height,\n    };\n\n    const gui = new dat.GUI();\n    gui.addFolder('');\n\n    const renderer = new THREE.WebGLRenderer({ canvas });\n    renderer.shadowMap.enabled = true;\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n    renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n    renderer.setSize(sizes.width, sizes.height);\n\n    const camera = new THREE.PerspectiveCamera(45, sizes.width / sizes.height, 0.1, 1000);\n    camera.position.set(-5, 7, 12);\n    const scene = new THREE.Scene();\n\n    const objects: any[] = [];\n    const world = new CANNON.World();\n    world.gravity.set(0, -9.82, 0);\n\n    const defaultMaterial = new CANNON.Material('default');\n    const defaultContactMaterial = new CANNON.ContactMaterial(defaultMaterial, defaultMaterial, {\n        friction: 0.1,\n        restitution: 0.7,\n    });\n\n    world.addContactMaterial(defaultContactMaterial);\n    world.defaultContactMaterial = defaultContactMaterial;\n\n    const plane = new THREE.Mesh(new THREE.PlaneBufferGeometry(25, 25, 25), new THREE.MeshStandardMaterial());\n    plane.receiveShadow = true;\n    // plane.rotation.x = -Math.PI / 2;\n    scene.add(plane);\n\n    const floorShape = new CANNON.Plane();\n    const floorBody = new CANNON.Body({ material: defaultMaterial });\n    floorBody.mass = 0;\n    floorBody.addShape(floorShape);\n    // floorBody.quaternion.setFromAxisAngle(new CANNON.Vec3(-1, 0, 0), Math.PI * 0.5);\n    world.addBody(floorBody);\n\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.35);\n    scene.add(ambientLight);\n\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.5);\n    directionalLight.position.set(0.3, 0.5, 0.5);\n    directionalLight.target = plane;\n    directionalLight.castShadow = true;\n    scene.add(directionalLight);\n    gui.add(directionalLight.position, 'x').min(-10).max(10).step(0.001);\n    gui.add(directionalLight.position, 'y').min(-10).max(10).step(0.001);\n    gui.add(directionalLight.position, 'z').min(-10).max(10).step(0.001);\n\n    const boxGeometry = new THREE.BoxBufferGeometry(1, 1, 1);\n    const boxMaterial = new THREE.MeshStandardMaterial({\n        metalness: 0.5,\n        roughness: 0.45,\n    });\n\n    function createBox(size = 1, position: { x: number; y: number; z: number }) {\n        const mesh = new THREE.Mesh(boxGeometry, boxMaterial);\n        mesh.castShadow = true;\n        mesh.scale.set(size, size, size);\n        mesh.position.x = position.x;\n        mesh.position.y = position.y;\n        mesh.position.z = position.z;\n        scene.add(mesh);\n\n        const shape = new CANNON.Box(new CANNON.Vec3(position.x, position.y, position.z));\n        const body = new CANNON.Body({\n            mass: 1,\n            position: new CANNON.Vec3(position.x, position.y, position.z),\n            shape,\n        });\n\n        world.addBody(body);\n        objects.push({ mesh, body });\n        // body.applyLocalForce(new CANNON.Vec3(150, 0, 0), new CANNON.Vec3(0, 0, 0));\n    }\n\n    createBox(1, { x: 0, y: 3, z: 0 });\n\n    const clock = new THREE.Clock();\n    let oldElapsedTime = 0;\n\n    const controls = new OrbitControls(camera, canvas);\n    controls.enableDamping = true;\n\n    const stats = new Stats();\n    document.body.appendChild(stats.domElement);\n\n    function render() {\n        const elapsedTime = clock.getElapsedTime();\n        const deltaTime = elapsedTime - oldElapsedTime;\n        oldElapsedTime = elapsedTime;\n\n        // Update physics world\n        world.step(1 / 60, deltaTime, 3);\n\n        for (let i = 0; i < objects.length; i++) {\n            objects[i].mesh.position.copy(objects[i].body.position);\n        }\n\n        controls.update();\n        stats.update();\n\n        renderer.render(scene, camera);\n    }\n\n    function animate() {\n        render();\n        rAF = requestAnimationFrame(animate);\n    }\n\n    function destroy() {\n        cancelAnimationFrame(rAF);\n        gui.destroy();\n        boxGeometry.dispose();\n        boxMaterial.dispose();\n        renderer.dispose();\n    }\n\n    animate();\n\n    window.addEventListener('resize', () => {\n        canvasRect = canvas.getBoundingClientRect();\n        sizes.width = canvasRect.width;\n        sizes.height = canvasRect.height;\n        camera.aspect = sizes.width / sizes.height;\n        camera.updateProjectionMatrix();\n        renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n        renderer.setSize(sizes.width, sizes.height);\n    });\n\n    module.hot?.addDisposeHandler(destroy);\n}\n","import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { baseExperiment } from '../../base';\nimport vertexShader from './shaders/vertex.glsl';\nimport fragmentShader from './shaders/fragment.glsl';\nimport { disposeMesh } from '../../../utils';\n\nexport const createShadersPatterns = baseExperiment('shaders-patterns', ({ canvas, sizes, onRender, gui }) => {\n    let rAF: number;\n    const renderer = new THREE.WebGLRenderer({ canvas });\n    renderer.outputEncoding = THREE.sRGBEncoding;\n    renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n    renderer.setSize(sizes.width, sizes.height);\n\n    const camera = new THREE.PerspectiveCamera(45, sizes.width / sizes.height, 0.1, 100);\n    camera.position.z = 10;\n\n    const scene = new THREE.Scene();\n    const clock = new THREE.Clock();\n\n    // const params = {\n    //     mapColor: 0x7071a,\n    //     // particlesColor: 0x040a14,\n    //     particlesColor: 0x110800,\n    //     // pointsAmountFactor: 0.4,\n    //     pointsAmountFactor: 0.9,\n    //     // maxPointsToRender: 50,\n    //     maxPointsToRender: 200,\n    //     // pointsToRenderFactor: 0.2,\n    //     pointsToRenderFactor: 0.5,\n    //     particlesSpeed: 1,\n    //     // opacityFactor: 0.2,\n    //     opacityFactor: 0.3,\n    //     // particleSize: 30,\n    //     particleSize: 20,\n    // };\n\n    const geometry = new THREE.PlaneBufferGeometry(6, 6, 256, 256);\n\n    const material = new THREE.ShaderMaterial({\n        defines: {\n            PI: Math.PI,\n        },\n        uniforms: {\n            uTime: { value: 0 },\n        },\n        vertexShader,\n        fragmentShader,\n        transparent: true,\n    });\n\n    const mesh = new THREE.Mesh(geometry, material);\n    mesh.position.y = 0.33;\n    scene.add(mesh);\n\n    const controls = new OrbitControls(camera, canvas);\n    controls.enableDamping = true;\n\n    function render() {\n        const elapsedTime = clock.getElapsedTime();\n\n        onRender();\n        material.uniforms.uTime.value = elapsedTime;\n\n        controls.update();\n        renderer.render(scene, camera);\n    }\n\n    function animate() {\n        render();\n        rAF = requestAnimationFrame(animate);\n    }\n\n    function destroy() {\n        cancelAnimationFrame(rAF);\n        scene.remove(mesh);\n        disposeMesh(mesh);\n        renderer.dispose();\n        gui.destroy();\n    }\n\n    animate();\n\n    window.addEventListener('resize', () => {\n        camera.aspect = sizes.width / sizes.height;\n        camera.updateProjectionMatrix();\n        renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n        renderer.setSize(sizes.width, sizes.height);\n    });\n\n    module.hot?.addDisposeHandler(destroy);\n});\n","export default \"#define GLSLIFY 1\\n//\\n// GLSL textureless classic 3D noise \\\"cnoise\\\",\\n// with an RSL-style periodic variant \\\"pnoise\\\".\\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\\n// Version: 2011-10-11\\n//\\n// Many thanks to Ian McEwan of Ashima Arts for the\\n// ideas for permutation and gradient selection.\\n//\\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\\n// Distributed under the MIT license. See LICENSE file.\\n// https://github.com/ashima/webgl-noise\\n//\\n\\nvec3 mod289(vec3 x)\\n{\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 mod289(vec4 x)\\n{\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 permute(vec4 x)\\n{\\n  return mod289(((x*34.0)+1.0)*x);\\n}\\n\\nvec4 taylorInvSqrt(vec4 r)\\n{\\n  return 1.79284291400159 - 0.85373472095314 * r;\\n}\\n\\nvec3 fade(vec3 t) {\\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\\n}\\n\\n// Classic Perlin noise\\nfloat cnoise(vec3 P)\\n{\\n  vec3 Pi0 = floor(P); // Integer part for indexing\\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\\n  Pi0 = mod289(Pi0);\\n  Pi1 = mod289(Pi1);\\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\\n  vec4 iz0 = Pi0.zzzz;\\n  vec4 iz1 = Pi1.zzzz;\\n\\n  vec4 ixy = permute(permute(ix) + iy);\\n  vec4 ixy0 = permute(ixy + iz0);\\n  vec4 ixy1 = permute(ixy + iz1);\\n\\n  vec4 gx0 = ixy0 * (1.0 / 7.0);\\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\\n  gx0 = fract(gx0);\\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\\n  vec4 sz0 = step(gz0, vec4(0.0));\\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\\n\\n  vec4 gx1 = ixy1 * (1.0 / 7.0);\\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\\n  gx1 = fract(gx1);\\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\\n  vec4 sz1 = step(gz1, vec4(0.0));\\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\\n\\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\\n\\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\\n  g000 *= norm0.x;\\n  g010 *= norm0.y;\\n  g100 *= norm0.z;\\n  g110 *= norm0.w;\\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\\n  g001 *= norm1.x;\\n  g011 *= norm1.y;\\n  g101 *= norm1.z;\\n  g111 *= norm1.w;\\n\\n  float n000 = dot(g000, Pf0);\\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\\n  float n111 = dot(g111, Pf1);\\n\\n  vec3 fade_xyz = fade(Pf0);\\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\\n  return 2.2 * n_xyz;\\n}\\n\\nuniform float uTime;\\n\\nvarying vec2 vUv;\\nvarying float vElevation;\\n\\nvoid main() {\\n    vec4 modelPosition = modelMatrix * vec4(position, 1.0);\\n    modelPosition.z += cnoise(modelPosition.xyz * sin(uTime)) * 0.7;\\n    float elevation = modelPosition.z;\\n\\n    vUv = uv;\\n    vElevation = elevation;\\n\\n    gl_Position = projectionMatrix * viewMatrix * modelPosition;\\n}\\n\\n// varying vec2 vUv;\\n\\n// void main() {\\n//     vUv = uv;\\n//     vec4 mvPosition = modelViewMatrix * vec4(position, 1.);\\n//     gl_Position = projectionMatrix * mvPosition;\\n// }\";","export default \"#define GLSLIFY 1\\nuniform float uTime;\\n\\nvarying vec2 vUv;\\nvarying float vElevation;\\n\\nvoid main() {\\n    vec3 color = vec3(distance(vUv, vec2(0.5)));\\n    \\n    gl_FragColor = vec4(mix(vec3(0.2), color, clamp(vElevation, 0., 1.)), 1.0);\\n}\\n\";","import './styles.scss';\nimport Aladino from 'aladino';\nimport { baseExperiment } from '../../base';\nimport vertexShader from './shaders/vertex.glsl';\nimport fragmentShader from './shaders/fragment.glsl';\nimport postprocessingShader from './shaders/postprocessing.glsl';\n\nexport const createShadersPixelated = baseExperiment('shaders-pixelated', ({ canvas, sizes, onRender, gui }) => {\n    let rAF: number;\n    const sliderAladino = new Aladino({\n        density: 1,\n        dpr: Math.min(devicePixelRatio, 2),\n        canvas,\n        post: {\n            fragment: postprocessingShader,\n            uniforms: {\n                pixelSize: 50,\n            },\n        },\n    });\n\n    const material = sliderAladino.material({\n        vertex: vertexShader,\n        fragment: fragmentShader,\n    });\n\n    const img = document.querySelector('img') as HTMLImageElement;\n\n    const carpet = sliderAladino.carpet(img, {\n        material,\n        uniforms: {\n            image: sliderAladino.texture(img.currentSrc),\n        },\n    });\n\n    function render() {\n        if (sliderAladino.post.uniforms.pixelSize > 1) {\n            sliderAladino.post.uniforms.pixelSize -= 0.5;\n        }\n    }\n\n    function animate() {\n        render();\n        rAF = requestAnimationFrame(animate);\n    }\n\n    function destroy() {\n        cancelAnimationFrame(rAF);\n        carpet.destroy();\n        sliderAladino.destroy();\n        gui.destroy();\n    }\n\n    animate();\n\n    window.addEventListener('resize', () => {\n        carpet.resize();\n    });\n\n    module.hot?.addDisposeHandler(destroy);\n});\n","export default \"#define GLSLIFY 1\\nattribute vec2 position;\\nattribute vec2 uv;\\n\\nuniform mat4 projection;\\n\\nvarying vec2 vUv;\\n\\n// float parabola(float x, float k) {\\n//   return pow(4.0 * x * (1.0 - x), k);\\n// }\\n\\nvoid main() {\\n  vUv = uv;\\n\\n  vec4 pos = vec4(position, 0.0, 1.0);\\n//   float spee = speed * 2.0;\\n//   pos.x += parabola(uv.y, 1.0) * spee;\\n//   vec4 pp = projection * vec4(position, 0.0, 1.0);\\n//   float yy = ((pp / pp.w).x + 1.0) / 2.0;\\n//   pos.z = parabola(clamp(yy, 0.0, 1.0), 2.4) * speed2 * 160.0;\\n//   pos.z = clamp(pos.z, -6.0, 6.0);\\n\\n  gl_Position = projection * pos;\\n}\";","export default \"precision highp float;\\n#define GLSLIFY 1\\n\\nuniform vec2 size;\\nuniform vec2 sizeImage;\\nuniform sampler2D image;\\n\\nvarying vec2 vUv;\\n\\nvec4 coverTexture(sampler2D tex, vec2 imgSize, vec2 ouv) {\\n  vec2 s = size;\\n  vec2 i = imgSize;\\n  float rs = s.x / s.y;\\n  float ri = i.x / i.y;\\n  vec2 new = rs < ri ? vec2(i.x * s.y / i.y, s.y) : vec2(s.x, i.y * s.x / i.x);\\n  vec2 offset = (rs < ri ? vec2((new.x - s.x) / 2.0, 0.0) : vec2(0.0, (new.y - s.y) / 2.0)) / new;\\n  vec2 uv = ouv * s / new + offset;\\n\\n  return texture2D(tex, uv);\\n}\\n\\nvoid main() {\\n  gl_FragColor = coverTexture(image, sizeImage, vUv);\\n}\\n\";","export default \"precision highp float;\\n#define GLSLIFY 1\\n    \\n// uniform float time;\\n// uniform float speed;\\n// uniform vec2 viewport;\\n// uniform sampler2D image;\\n\\n// float parabola(float x, float k) {\\n//     return pow(4.0 * x * (1.0 - x), k);\\n// }\\n\\n// float random(vec2 co) {\\n//     return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\\n// }\\n\\n// void main() {\\n//     vec2 uv = gl_FragCoord.xy / viewport;\\n//     float spe = speed * 300.0;\\n//     float p = parabola(uv.x, 1.4);\\n\\n//     float r = texture2D(image, uv + vec2(0.000 * spe, 0.0) * p).r;\\n//     float g = texture2D(image, uv + vec2(0.01 * spe, 0.0) * p).g;\\n//     float b = texture2D(image, uv + vec2(0.02 * spe, 0.0) * p).b;\\n//     float a = texture2D(image, uv + vec2(0.000 * spe, 0.0) * p).w;\\n\\n//     gl_FragColor = vec4(r, g, b, a);\\n    \\n//     // Film grain effect\\n//     float n = random(uv + mod(time, 3.0));\\n//     gl_FragColor.rgb *= 1.0 - (n * 0.2);\\n// }\\n\\nuniform sampler2D image;\\nuniform vec2 viewport;\\nuniform vec2 resolution;\\nuniform float pixelSize;\\n\\n// varying vec2 vUv;\\n\\n// vec3 bg(vec2 uv) {\\n//    return texture2D(image, uv).rgb;\\n// }\\n\\n// vec3 effect(vec2 uv, vec3 col) {\\n//    float granularity = floor(intensity*20.+10.);\\n\\n//    if (mod(granularity,2.) > 0.) {\\n//        granularity += 1.0;\\n//    };\\n\\n//    if (granularity > 0.0) {\\n//        float dx = granularity / viewport.x;\\n//        float dy = granularity / viewport.y;\\n//        uv = vec2(dx*(floor(uv.x/dx) + 0.5),dy*(floor(uv.y/dy) + 0.5));\\n//        return bg(uv);\\n//    };\\n\\n//    return col;\\n// }\\n\\nvoid main() {\\n    vec2 uv = gl_FragCoord.xy / viewport;\\n    // vec3 tex = bg(uv);\\n    // vec3 col = effect(uv,tex);\\n    // gl_FragColor = vec4( col, 1. );\\n\\n    vec2 dxy = pixelSize / viewport;\\n    vec2 coord = dxy * floor( uv / dxy );\\n    gl_FragColor = texture2D(image, coord);\\n}\\n\";","import './styles.scss';\nimport Flickity from 'flickity';\nimport Aladino from 'aladino';\nimport lerp from 'lerp';\nimport { baseExperiment } from '../../base';\nimport vertexShader from './shaders/vertex.glsl';\nimport fragmentShader from './shaders/fragment.glsl';\nimport postprocessingShader from './shaders/postprocessing.glsl';\n\nexport const createSliders1 = baseExperiment('sliders-1', ({ canvas, sizes, onRender, gui }) => {\n    let rAF: number;\n    const sliderAladino = new Aladino({\n        density: 16,\n        dpr: Math.min(devicePixelRatio, 2),\n        canvas,\n        post: {\n            fragment: postprocessingShader,\n            uniforms: {\n                speed: 0.0,\n            },\n        },\n    });\n\n    const material = sliderAladino.material({\n        vertex: vertexShader,\n        fragment: fragmentShader,\n        uniforms: {\n            speed: 0,\n            speed2: 0,\n        },\n    });\n\n    const cells = [...document.querySelectorAll('.slider-el')];\n    const carpets = [];\n    cells.forEach((cell) => {\n        const carpet = sliderAladino.carpet(cell, {\n            material,\n            uniforms: {\n                image: sliderAladino.texture(cell.currentSrc),\n            },\n        });\n\n        carpets.push(carpet);\n    });\n\n    let oldProgress = 0;\n    let speed = 0;\n    const freeScroll = true;\n\n    const slider = new Flickity(document.querySelector('.carousel')!, {\n        accessibility: true,\n        freeScroll,\n        dragThreshold: freeScroll ? 0 : 30,\n        // dragThreshold: 30,\n        freeScrollFriction: 0.07,\n        prevNextButtons: false,\n        pageDots: false,\n        // wrapAround: true,\n    });\n\n    const observer = new IntersectionObserver((entries) => {\n        entries.forEach((entry) => {\n            const exactCarpet = carpets.find((carpet) => entry.target === carpet.dom);\n            if (exactCarpet) {\n                exactCarpet.active = entry.isIntersecting;\n            }\n        });\n    });\n\n    cells.forEach((cell) => {\n        observer.observe(cell);\n    });\n\n    slider.on('scroll', (progress) => {\n        // The way flickity works doesn't allow an easy use of the position,\n        // So it can be optimised, as here we're recalculating dom boundingbox each time\n        carpets.forEach((carpet) => {\n            carpet.resize();\n        });\n\n        speed = oldProgress - progress;\n        oldProgress = progress;\n    });\n\n    function render() {\n        material.uniforms.speed = lerp(material.uniforms.speed, speed, 0.6);\n        material.uniforms.speed2 = lerp(material.uniforms.speed2, speed, 0.1);\n        sliderAladino.post.uniforms.speed = lerp(sliderAladino.post.uniforms.speed, speed, 0.1);\n    }\n\n    function animate() {\n        render();\n        rAF = requestAnimationFrame(animate);\n    }\n\n    function destroy() {\n        cancelAnimationFrame(rAF);\n        carpets.forEach((carpet) => {\n            carpet.destroy();\n        });\n        carpets = [];\n        sliderAladino.destroy();\n        slider.destroy();\n        gui.destroy();\n    }\n\n    animate();\n\n    window.addEventListener('resize', () => {\n        carpets.forEach((carpet) => {\n            carpet.resize();\n        });\n    });\n\n    module.hot?.addDisposeHandler(destroy);\n});\n","export default \"#define GLSLIFY 1\\nattribute vec2 position;\\nattribute vec2 uv;\\nuniform mat4 projection;\\nuniform float speed;\\nuniform float speed2;\\nvarying vec2 vUv;\\n\\nfloat parabola(float x, float k) {\\n  return pow(4.0 * x * (1.0 - x), k);\\n}\\n\\nvoid main() {\\n  vUv = uv;\\n\\n  vec4 pos = vec4(position, 0.0, 1.0);\\n  float spee = speed * 2.0;\\n  pos.x += parabola(uv.y, 1.0) * spee;\\n  vec4 pp = projection * vec4(position, 0.0, 1.0);\\n  float yy = ((pp / pp.w).x + 1.0) / 2.0;\\n  pos.z = parabola(clamp(yy, 0.0, 1.0), 2.4) * speed2 * 160.0;\\n  pos.z = clamp(pos.z, -6.0, 6.0);\\n\\n  gl_Position = projection * pos;\\n}\";","export default \"precision highp float;\\n#define GLSLIFY 1\\n\\nuniform vec2 size;\\nuniform vec2 sizeImage;\\nuniform sampler2D image;\\n\\nvarying vec2 vUv;\\n\\nvec4 coverTexture(sampler2D tex, vec2 imgSize, vec2 ouv) {\\n  vec2 s = size;\\n  vec2 i = imgSize;\\n  float rs = s.x / s.y;\\n  float ri = i.x / i.y;\\n  vec2 new = rs < ri ? vec2(i.x * s.y / i.y, s.y) : vec2(s.x, i.y * s.x / i.x);\\n  vec2 offset = (rs < ri ? vec2((new.x - s.x) / 2.0, 0.0) : vec2(0.0, (new.y - s.y) / 2.0)) / new;\\n  vec2 uv = ouv * s / new + offset;\\n\\n  return texture2D(tex, uv);\\n}\\n\\nvoid main() {\\n  gl_FragColor = coverTexture(image, sizeImage, vUv);\\n}\\n\";","export default \"precision highp float;\\n#define GLSLIFY 1\\n    \\nuniform float time;\\nuniform float speed;\\nuniform vec2 viewport;\\nuniform sampler2D image;\\n\\nfloat parabola(float x, float k) {\\n    return pow(4.0 * x * (1.0 - x), k);\\n}\\n\\nfloat random(vec2 co) {\\n    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\\n}\\n\\nvoid main() {\\n    vec2 uv = gl_FragCoord.xy / viewport;\\n    float spe = speed * 300.0;\\n    float p = parabola(uv.x, 1.4);\\n\\n    float r = texture2D(image, uv + vec2(0.000 * spe, 0.0) * p).r;\\n    float g = texture2D(image, uv + vec2(0.01 * spe, 0.0) * p).g;\\n    float b = texture2D(image, uv + vec2(0.02 * spe, 0.0) * p).b;\\n    float a = texture2D(image, uv + vec2(0.000 * spe, 0.0) * p).w;\\n\\n    gl_FragColor = vec4(r, g, b, a);\\n    \\n    // Film grain effect\\n    float n = random(uv + mod(time, 3.0));\\n    gl_FragColor.rgb *= 1.0 - (n * 0.2);\\n}\";","import './styles.scss';\nimport { baseExperiment } from '../../base';\n// import postprocessingShader from './shaders/postprocessing.glsl';\nimport MainSlider from './main-slider';\nimport MainWebglSlider from './main-slider/webgl-slider';\nimport { isWebGLAvailable } from '../../../utils/webgl';\n\nconst _isWebGLAvailable = isWebGLAvailable();\n\nexport const createSlidersFullscreen = baseExperiment('sliders-fullscreen', ({ canvas, sizes, onRender, gui }) => {\n    const mainSliderContainer = document.querySelector('.js-main-slider');\n    let mainSlider: any;\n    if (mainSliderContainer) {\n        const MainSliderConstructor = _isWebGLAvailable ? MainWebglSlider : MainSlider;\n        mainSlider = new MainSliderConstructor(mainSliderContainer, {\n            duration: 2500,\n            autoplay: true,\n            delay: 5000,\n            // paused: true,\n            canvas,\n        });\n    }\n\n    // function render() {\n    //     console.log('render');\n    //     // material.uniforms.speed = lerp(material.uniforms.speed, speed, 0.6);\n    //     // material.uniforms.speed2 = lerp(material.uniforms.speed2, speed, 0.1);\n    //     // sliderAladino.post.uniforms.speed = lerp(sliderAladino.post.uniforms.speed, speed, 0.1);\n    // }\n\n    // function animate() {\n    //     render();\n    //     this.rAF = requestAnimationFrame(animate);\n    // }\n\n    function destroy() {\n        cancelAnimationFrame(this.rAF);\n\n        if (mainSlider) {\n            mainSlider.destroy();\n            mainSlider = null;\n        }\n\n        gui.destroy();\n    }\n\n    // animate();\n\n    module.hot?.addDisposeHandler(destroy);\n});\n","export function isWebGLAvailable() {\n    try {\n        const canvas = document.createElement('canvas');\n        return !!(\n            window.WebGLRenderingContext &&\n            (canvas.getContext('webgl') || canvas.getContext('experimental-webgl'))\n        );\n    } catch (err) {\n        return false;\n    }\n}\n\nexport function isWebGL2Available() {\n    try {\n        const canvas = document.createElement('canvas');\n        return !!(window.WebGL2RenderingContext && canvas.getContext('webgl2'));\n    } catch (e) {\n        return false;\n    }\n}\n","import './styles.scss';\nimport Aladino from 'aladino';\nimport gsap from 'gsap';\nimport { baseExperiment } from '../base';\nimport vertexShader from './shaders/vertex.glsl';\nimport fragmentShader from './shaders/fragment.glsl';\n\nfunction getPowerOfTwo(value: number, pow = 1) {\n    let _pow = pow;\n\n    while (_pow < value) {\n        _pow *= 2;\n    }\n\n    return _pow;\n}\n\nfunction createMultilineText(ctx, textToWrite, maxWidth, text) {\n    textToWrite = textToWrite.replace('\\n', ' ');\n    var currentText = textToWrite;\n    var futureText;\n    var subWidth = 0;\n    var maxLineWidth = 0;\n\n    var wordArray = textToWrite.split(' ');\n    var wordsInCurrent, wordArrayLength;\n    wordsInCurrent = wordArrayLength = wordArray.length;\n\n    // Reduce currentText until it is less than maxWidth or is a single word\n    // futureText var keeps track of text not yet written to a text line\n    while (ctx.measureText(currentText).width > maxWidth && wordsInCurrent > 1) {\n        console.log({ currentText, width: ctx.measureText(currentText).width });\n        wordsInCurrent--;\n        // let linebreak = false;\n\n        currentText = futureText = '';\n        for (let i = 0; i < wordArrayLength; i++) {\n            if (i < wordsInCurrent) {\n                currentText += wordArray[i];\n                if (i + 1 < wordsInCurrent) {\n                    currentText += ' ';\n                }\n            } else {\n                futureText += wordArray[i];\n                if (i + 1 < wordArrayLength) {\n                    futureText += ' ';\n                }\n            }\n        }\n    }\n    text.push(currentText); // Write this line of text to the array\n    maxLineWidth = ctx.measureText(currentText).width;\n\n    // If there is any text left to be written call the function again\n    if (futureText) {\n        subWidth = createMultilineText(ctx, futureText, maxWidth, text);\n        if (subWidth > maxLineWidth) {\n            maxLineWidth = subWidth;\n        }\n    }\n\n    // Return the maximum line width\n    return maxLineWidth;\n}\n\nfunction createTextCanvas(el: HTMLElement) {\n    const text = el.textContent || '';\n    const dpr = Math.min(2, window.devicePixelRatio);\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d')!;\n    const textMeasurement = ctx.measureText(text);\n    const styles = getComputedStyle(el);\n    const textArr: string[] = [];\n    const fontSize = parseFloat(styles.fontSize) * dpr;\n    const width = parseFloat(styles.width);\n    // const width = getPowerOfTwo(textMeasurement.width);\n    const height = parseFloat(styles.height);\n    const lineHeight = parseFloat(styles.lineHeight);\n    // const height = getPowerOfTwo(fontSize * 2);\n    const maxWidth = createMultilineText(ctx, text, width, textArr);\n    console.log({ maxWidth });\n\n    canvas.width = width * dpr;\n    canvas.height = height * dpr;\n\n    ctx.font = `${fontSize}px ${styles.fontFamily}`;\n    ctx.textAlign = 'center';\n    // ctx.textAlign = styles.textAlign;\n    ctx.textBaseline = 'middle';\n    ctx.fillStyle = styles.color;\n\n    // const canvasX = maxWidth;\n    const canvasX = width;\n    // const canvasX = canvas.width;\n    const canvasY = lineHeight * textArr.length;\n    // const textX = canvas.width / 2;\n    // const textX = canvasX / 2;\n    const textX = 0;\n    let textY: number;\n    const offset = (canvasY - lineHeight * (textArr.length + 1)) * 0.5;\n    console.log(textArr);\n\n    // for (let i = 0; i < textArr.length; i++) {\n    //     textY = (i + 1) * lineHeight + offset;\n    //     // textY = canvas.height / 2;\n    //     ctx.fillText(textArr[i], textX, textY);\n    //     // ctx.fillText(textArr[i], textX, textY + fontSize * 0.14);\n    // }\n    ctx.fillText(text, canvas.width / 2, canvas.height / 2 + fontSize * (0.12 / dpr));\n\n    return canvas;\n}\n\nexport const createTextBasic = baseExperiment('text-basic', async ({ canvas, sizes, onRender, gui }) => {\n    let rAF: number;\n\n    const aladino = new Aladino({\n        density: 1,\n        dpr: Math.min(devicePixelRatio, 2),\n        canvas,\n    });\n\n    Array.from(document.querySelectorAll<HTMLElement>('.js-gl-text')).forEach((textEl) => {\n        const styles = getComputedStyle(textEl);\n\n        const material = aladino.material({\n            vertex: vertexShader,\n            fragment: fragmentShader,\n            uniforms: {\n                pixelSize: 1,\n            },\n        });\n\n        textEl.addEventListener('mouseenter', () => {\n            gsap.to(material.uniforms, {\n                duration: 0.6,\n                pixelSize: parseFloat(styles.fontSize) * 0.75,\n                ease: 'steps(10)',\n            });\n        });\n\n        textEl.addEventListener('mouseleave', () => {\n            gsap.to(material.uniforms, {\n                duration: 0.6,\n                pixelSize: 1,\n                ease: 'steps(10)',\n            });\n        });\n\n        function generateTexture() {\n            return new Promise((resolve) => {\n                createTextCanvas(textEl).toBlob((blob) => {\n                    const newImg = new Image();\n                    newImg.hidden = true;\n                    const url = URL.createObjectURL(blob);\n\n                    newImg.onload = () => {\n                        document.body.removeChild(newImg);\n                        resolve(url);\n                        setTimeout(() => {\n                            URL.revokeObjectURL(url);\n                        }, 0);\n                    };\n\n                    newImg.src = url;\n                    document.body.appendChild(newImg);\n                });\n            });\n        }\n\n        let carpet;\n\n        generateTexture().then((url) => {\n            carpet = aladino.carpet(textEl, {\n                material,\n                uniforms: {\n                    image: aladino.texture(url),\n                },\n            });\n        });\n\n        window.addEventListener('resize', () => {\n            generateTexture().then((url) => {\n                if (carpet) {\n                    carpet.uniforms.image = aladino.texture(url);\n                }\n            });\n        });\n    });\n\n    function render() {\n        onRender();\n    }\n\n    function animate() {\n        render();\n        rAF = requestAnimationFrame(animate);\n    }\n\n    function destroy() {\n        cancelAnimationFrame(rAF);\n    }\n\n    animate();\n\n    module.hot?.addDisposeHandler(destroy);\n});\n","export default \"#define GLSLIFY 1\\nattribute vec2 position;\\nattribute vec2 uv;\\nuniform mat4 projection;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vUv = uv;\\n\\n  vec4 pos = vec4(position, 0.0, 1.0);\\n\\n  gl_Position = projection * pos;\\n}\\n\";","export default \"precision highp float;\\n#define GLSLIFY 1\\n\\n// uniform vec2 size;\\n// uniform vec2 sizeImage;\\nuniform vec2 viewport;\\nuniform float pixelSize;\\nuniform sampler2D image;\\nuniform float time;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vec2 uv = vUv;\\n  // uv.x += sin(uv.y * 40.0 + time * 0.01) * 0.005;\\n\\n  // gl_FragColor = texture2D(image, uv);\\n\\n  vec2 dxy = pixelSize / viewport;\\n  vec2 coord = dxy * floor(uv / dxy);\\n\\n  gl_FragColor = texture2D(image, coord);\\n}\\n\";","import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport { baseExperiment } from '../base';\n\nexport const createInstancingGltf = baseExperiment('instancing-gltf', ({ canvas, sizes, onRender, gui }) => {\n    let rAF: number;\n    const renderer = new THREE.WebGLRenderer({ canvas });\n    renderer.outputEncoding = THREE.sRGBEncoding;\n    renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n    renderer.setSize(sizes.width, sizes.height);\n\n    const camera = new THREE.PerspectiveCamera(45, sizes.width / sizes.height, 0.1, 1000);\n    camera.position.z = 3;\n\n    const scene = new THREE.Scene();\n    const gltfLoader = new GLTFLoader();\n    const dummy = new THREE.Object3D();\n\n    let instancedShelf: THREE.InstancedMesh | null;\n    const shelfCount = 4;\n\n    let instancedTable: THREE.InstancedMesh | null;\n    const tableCount = 10;\n\n    gltfLoader.load(`${PUBLIC_PATH}gltf/room.glb`, (gltf) => {\n        console.log(gltf.scene);\n        gltf.scene.position.y = -2;\n        gltf.scene.rotation.y = 7.2;\n        const scale = 0.00153;\n        dummy.scale.set(scale, scale, scale);\n\n        const shelf = gltf.scene.getObjectByName('Other_Environment002') as THREE.Mesh;\n        const table = gltf.scene.getObjectByName('Other_Environment003') as THREE.Mesh;\n\n        if (shelf) {\n            instancedShelf = new THREE.InstancedMesh(shelf.geometry, shelf.material, shelfCount);\n\n            instancedShelf.name = 'Instanced Shelf';\n            gltf.scene.add(instancedShelf);\n\n            let i = 0;\n\n            for (let x = 0; x < shelfCount; x++) {\n                const posObj = gltf.scene.getObjectByName(x === 0 ? `Sphere` : `Sphere00${x}`);\n\n                if (posObj) {\n                    dummy.position.copy(posObj.position);\n                    dummy.rotation.set(0, -Math.PI / 2, 0);\n                    dummy.updateMatrix();\n                    instancedShelf.setMatrixAt(i++, dummy.matrix);\n                }\n            }\n        }\n\n        if (table) {\n            instancedTable = new THREE.InstancedMesh(table.geometry, table.material, tableCount);\n            instancedTable.name = 'Instanced Table';\n            gltf.scene.add(instancedTable);\n\n            let i = 0;\n\n            for (let x = 0; x < tableCount; x++) {\n                const posObj = gltf.scene.getObjectByName(`Sphere00${x + 5}`);\n\n                if (posObj) {\n                    dummy.position.copy(posObj.position);\n                    dummy.updateMatrix();\n                    instancedTable.setMatrixAt(i++, dummy.matrix);\n                }\n            }\n        }\n\n        scene.add(gltf.scene);\n    });\n\n    const ambientLight = new THREE.AmbientLight();\n    scene.add(ambientLight);\n\n    const controls = new OrbitControls(camera, canvas);\n    controls.enableDamping = true;\n\n    function render() {\n        onRender();\n        controls.update();\n\n        // const time = Date.now() * 0.001;\n\n        // if (instancedShelf) {\n        //     // let i = 0;\n        //     // const offset = (shelfCount - 1) / 2;\n\n        //     // for (let x = 0; x < shelfCount; x++) {\n        //     //     for (let y = 0; y < shelfCount; y++) {\n        //     //         for (let z = 0; z < shelfCount; z++) {\n        //     //             dummy.position.set(offset - x, offset - y, offset - z);\n        //     //             dummy.rotation.y = Math.sin(x / 4 + time) + Math.sin(y / 4 + time) + Math.sin(z / 4 + time);\n        //     //             dummy.rotation.z = dummy.rotation.y * 2;\n\n        //     //             dummy.updateMatrix();\n        //     //             instancedShelf.setMatrixAt(i++, dummy.matrix);\n        //     //         }\n        //     //     }\n        //     // }\n\n        //     instancedShelf.instanceMatrix.needsUpdate = true;\n        // }\n\n        renderer.render(scene, camera);\n    }\n\n    function animate() {\n        render();\n        rAF = requestAnimationFrame(animate);\n    }\n\n    function destroy() {\n        cancelAnimationFrame(rAF);\n\n        if (instancedShelf) {\n            instancedShelf.dispose();\n            instancedShelf = null;\n        }\n\n        if (instancedTable) {\n            instancedTable.dispose();\n            instancedTable = null;\n        }\n\n        renderer.dispose();\n    }\n\n    animate();\n\n    window.addEventListener('resize', () => {\n        camera.aspect = sizes.width / sizes.height;\n        camera.updateProjectionMatrix();\n        renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n        renderer.setSize(sizes.width, sizes.height);\n    });\n\n    module.hot?.addDisposeHandler(destroy);\n});\n","import Aladino from 'aladino';\nimport lerp from 'lerp';\nimport gsap from 'gsap';\nimport vertexShader from './shaders/vertex.glsl';\nimport fragmentShader from './shaders/fragment.glsl';\nimport MainSlider from './index';\nimport type { MainSliderOptions } from './types';\n\nexport default class WebglMainSlider extends MainSlider {\n    isWebglInitialized: boolean;\n\n    // width: number;\n\n    // height: number;\n\n    isAnimating: boolean;\n\n    // containerRect: DOMRect;\n\n    constructor(container: Element, options: Partial<MainSliderOptions>) {\n        super(container, options);\n        this._onVisibilityChange = this._onVisibilityChange.bind(this);\n        // this.animate = this.animate.bind(this);\n\n        this.isAnimating = false;\n        // this.containerRect = this.container.getBoundingClientRect();\n        // this.width = this.containerRect.width;\n        // this.height = this.containerRect.height;\n        this.isWebglInitialized = false;\n\n        this._init();\n    }\n\n    protected _init() {\n        this.aladino = new Aladino({\n            density: 1,\n            dpr: Math.min(devicePixelRatio, 2),\n            canvas: this.options.canvas,\n            // post: {\n            //     fragment: postprocessingShader,\n            //     uniforms: {\n            //         speed: 0.0,\n            //     },\n            // },\n        });\n\n        this.displacementTexture = this.aladino.texture(`${PUBLIC_PATH}img/sliders/displacement-map.png`);\n        this.textures = this.images.map((img) => this.aladino.texture(img.currentSrc));\n\n        this.material = this.aladino.material({\n            vertex: vertexShader,\n            fragment: fragmentShader,\n            uniforms: {\n                currentImage: this.textures[this.activeIndex],\n                nextImage: this.textures[this.nextIndex],\n                disp: this.displacementTexture,\n                dispPower: 0,\n                intensity: 0.5,\n                textureFactor: { x: 1, y: 1 },\n            },\n        });\n\n        this.carpet = this.aladino.carpet(this.images[0], {\n            material: this.material,\n            uniforms: {\n                image: this.textures[this.activeIndex],\n            },\n        });\n\n        const observer = new IntersectionObserver((entries) => {\n            entries.forEach((entry) => {\n                this.carpet.active = entry.isIntersecting;\n            });\n        });\n\n        observer.observe(this.container);\n\n        document.addEventListener('visibilitychange', this._onVisibilityChange);\n\n        // this.animate();\n\n        this.container.classList.add('webgl-initialized');\n        this.isWebglInitialized = true;\n    }\n\n    protected setTextureFactor(index: number) {\n        const { image } = this.textures[index];\n        const factor = { x: 1, y: 1 };\n        const rect = this.container.getBoundingClientRect();\n        const rectRatio = rect.width / rect.height;\n        const imageRatio = image.width / image.height;\n\n        if (rectRatio > imageRatio) {\n            factor.x = 1;\n            factor.y = (1 / rectRatio) * imageRatio;\n        } else {\n            factor.x = (1 * rectRatio) / imageRatio;\n            factor.y = 1;\n        }\n\n        return factor;\n    }\n\n    // render() {\n    //     // material.uniforms.speed = lerp(material.uniforms.speed, speed, 0.6);\n    //     // material.uniforms.speed2 = lerp(material.uniforms.speed2, speed, 0.1);\n    //     // sliderAladino.post.uniforms.speed = lerp(sliderAladino.post.uniforms.speed, speed, 0.1);\n    // }\n\n    // animate() {\n    //     this.render();\n    //     this.rAF = requestAnimationFrame(this.animate);\n    // }\n\n    async destroy() {\n        super.destroy();\n\n        cancelAnimationFrame(this.rAF);\n        document.removeEventListener('visibilitychange', this._onVisibilityChange);\n\n        if (this.observer) {\n            this.observer.disconnect();\n            this.observer = null;\n        }\n\n        this.carpet.destroy();\n        this.aladino.destroy();\n        this.container.classList.remove('webgl-initialized');\n        this.isWebglInitialized = false;\n    }\n\n    async navigateTo(index: number) {\n        super.navigateTo(index);\n\n        if (!this.isAnimating) return;\n\n        this.isAnimating = true;\n        console.log(this);\n\n        if (this.nextIndex !== index) {\n            this.material.uniforms.nextImage = this.textures[index];\n        }\n\n        const factor = this.setTextureFactor(index);\n\n        gsap.to(this.material.uniforms.dispPower, {\n            duration: this.duration / 1000,\n            value: 1,\n            ease: 'expo.inOut',\n            onComplete: () => {\n                this.material.uniforms.dispPower = 0;\n                this.material.uniforms.currentImage = this.textures[index];\n                this.material.uniforms.nextImage = this.textures[this.nextIndex];\n                this.isAnimating = false;\n                // this.activeIndex = index;\n            },\n        });\n\n        gsap.to(this.material.uniforms.textureFactor, {\n            duration: this.duration / 1000,\n            x: factor.x,\n            y: factor.y,\n            ease: 'expo.inOut',\n        });\n    }\n\n    protected async _onResize() {\n        super._onResize();\n        this.carpet.resize();\n    }\n\n    protected async _onVisibilityChange() {\n        // if (this.offscreen) {\n        //     await this.offscreen.setState({ documentVisible: document.visibilityState === 'visible' });\n        // }\n    }\n}\n","export default \"#define GLSLIFY 1\\nattribute vec2 position;\\nattribute vec2 uv;\\n\\nuniform mat4 projection;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vUv = uv;\\n\\n  gl_Position = projection * vec4(position, 0.0, 1.0);\\n}\\n\";","export default \"precision highp float;\\n#define GLSLIFY 1\\n\\nuniform vec2 size;\\nuniform vec2 sizeImage;\\nuniform sampler2D image;\\nuniform sampler2D currentImage;\\nuniform sampler2D nextImage;\\nuniform sampler2D disp;\\nuniform float dispPower;\\nuniform float intensity;\\n\\nvarying vec2 vUv;\\n\\nvec4 coverTexture(sampler2D tex, vec2 imgSize, vec2 ouv) {\\n  vec2 s = size;\\n  vec2 i = imgSize;\\n  float rs = s.x / s.y;\\n  float ri = i.x / i.y;\\n  vec2 new = rs < ri ? vec2(i.x * s.y / i.y, s.y) : vec2(s.x, i.y * s.x / i.x);\\n  vec2 offset = (rs < ri ? vec2((new.x - s.x) / 2.0, 0.0) : vec2(0.0, (new.y - s.y) / 2.0)) / new;\\n  vec2 uv = ouv * s / new + offset;\\n\\n  return texture2D(tex, uv);\\n}\\n\\nvoid main() {\\n    vec2 uv = vUv;\\n    vec4 disp = texture2D(disp, uv);\\n    vec2 dispVec = vec2(disp.x, disp.y);\\n    \\n    vec2 distPos1 = uv + (dispVec * intensity * dispPower);\\n    vec2 distPos2 = uv + (dispVec * -(intensity * (1. - dispPower)));\\n    \\n    vec4 currentImage = texture2D(currentImage, distPos1);\\n    vec4 nextImage = texture2D(nextImage, distPos2);\\n    \\n    gl_FragColor = mix(currentImage, nextImage, dispPower);\\n//   gl_FragColor = coverTexture(currentImage, sizeImage, vUv);\\n}\\n\";","/* global PUBLIC_PATH */\nasync function register() {\n    if ('serviceWorker' in navigator) {\n        try {\n            await navigator.serviceWorker.register(`${PUBLIC_PATH}service-worker.js`);\n        } catch (err) {\n            console.log('SW registration failed: ', err);\n        }\n    }\n}\n\nasync function unregister() {\n    if ('serviceWorker' in navigator) {\n        const registrations = await navigator.serviceWorker.getRegistrations();\n        registrations.forEach((registration) => {\n            registration.unregister();\n        });\n    }\n}\n\nconst _module = { register, unregister };\n\nexport default _module;\n","/* global USE_SERVICE_WORKER */\nimport './webpack-imports';\nimport './sentry';\nimport './polyfills';\nimport sw from './sw';\nimport { registerCustomElements } from './custom-elements';\n\nimport { createParticlesBasic } from './experiments/particles/particles-basic';\nimport { createParticlesPathTrailing } from './experiments/particles/path-trailing';\n\nimport { createPhysicsWorker } from './experiments/physics/physics-worker';\n\nimport { createShadersPatterns } from './experiments/shaders/patterns';\nimport { createShadersPixelated } from './experiments/shaders/pixelated';\n\nimport { createSliders1 } from './experiments/sliders/1';\nimport { createSlidersFullscreen } from './experiments/sliders/fullscreen';\n\nimport { createTextBasic } from './experiments/text/text-basic';\n\nimport { createInstancingGltf } from './experiments/instancing/gltf';\n\nimport './experiments/distortions/1';\n\nregisterCustomElements();\n\ncreateParticlesBasic();\ncreateParticlesPathTrailing();\n\ncreatePhysicsWorker();\n\ncreateShadersPatterns();\ncreateShadersPixelated();\ncreateSliders1();\ncreateSlidersFullscreen();\n\ncreateTextBasic();\n\ncreateInstancingGltf();\n\n// Service Worker\nif (USE_SERVICE_WORKER) {\n    window.addEventListener('load', () => sw.register());\n} else {\n    sw.unregister();\n}\n\n// module.hot?.accept();\n","import Stats from 'three/examples/jsm/libs/stats.module';\nimport * as dat from 'three/examples/jsm/libs/dat.gui.module';\n\ntype Experiment = (data: {\n    canvas: HTMLCanvasElement;\n    onRender: () => void;\n    gui: any;\n    sizes: { width: number; height: number };\n}) => void;\n\nexport function baseExperiment(name: string, fn: Experiment) {\n    return () => {\n        const canvas = document.querySelector<HTMLCanvasElement>(`.js-canvas[data-experiment=\"${name}\"]`);\n\n        if (!canvas) {\n            return;\n        }\n\n        let canvasRect = canvas.getBoundingClientRect();\n\n        const sizes = {\n            width: canvasRect.width,\n            height: canvasRect.height,\n        };\n\n        const stats = new Stats();\n        document.body.appendChild(stats.domElement);\n\n        const gui = new dat.GUI();\n        gui.addFolder();\n\n        function onRender() {\n            stats.update();\n        }\n\n        fn({ sizes, gui, canvas, onRender });\n\n        window.addEventListener('resize', () => {\n            canvasRect = canvas.getBoundingClientRect();\n            sizes.width = canvasRect.width;\n            sizes.height = canvasRect.height;\n        });\n\n        function destroy() {\n            gui?.destroy();\n        }\n\n        module.hot?.addDisposeHandler(destroy);\n    };\n}\n","import { BackSide, FrontSide, Group, Material, Mesh, Points } from 'three';\n\nexport function disposeMesh(mesh: Mesh | Points) {\n    mesh.geometry?.dispose();\n    if (mesh.material) {\n        if (mesh.material instanceof Array) {\n            for (let i = 0; i < mesh.material.length; ++i) {\n                mesh.material[i].dispose();\n            }\n        } else {\n            mesh.material.dispose();\n        }\n    }\n}\n\nexport function separateCullingPass(mesh: Mesh): Group {\n    const group = new Group();\n\n    [BackSide, FrontSide].forEach((side, i) => {\n        const newMesh = mesh.clone();\n        newMesh.name = `${newMesh.name}__clone${i + 1}`;\n\n        if (mesh.material instanceof Material) {\n            const material = mesh.material.clone();\n            newMesh.material = material;\n            material.transparent = true;\n            material.side = side;\n        }\n\n        group.add(newMesh);\n\n        if (mesh.parent) {\n            mesh.parent.add(group);\n            mesh.parent.remove(mesh);\n            disposeMesh(mesh);\n        }\n    });\n\n    return group;\n}\n","/* eslint-disable max-lines */\nimport delegate from 'delegate';\n// import createDispatcher from 'lit-dispatcher';\nimport gsap from 'gsap';\n// import debounce from 'lodash.debounce';\nimport Hammer from 'hammerjs';\n\nimport type { MainSliderOptions } from './types';\n\nconst defaultOptions: MainSliderOptions = {\n    duration: 1,\n    autoplay: false,\n    delay: 5000,\n    paused: false,\n};\n\nexport default class MainSlider {\n    container: Element;\n\n    options: MainSliderOptions;\n\n    slides: Element[];\n\n    slidesContainer: Element | null;\n\n    navigationContainer: Element | null;\n\n    paginationContainer: Element | null;\n\n    prevSlideButton: HTMLButtonElement | null;\n\n    nextSlideButton: HTMLButtonElement | null;\n\n    _paginationDelegation: any;\n\n    // _dispatcher: ReturnType<typeof createDispatcher>;\n\n    paginationButtons: HTMLButtonElement[];\n\n    images: HTMLImageElement[];\n\n    total: number;\n\n    activeIndex: number;\n\n    nextIndex: number;\n\n    isAnimating: boolean;\n\n    _autoplayTimeout: NodeJS.Timeout | null;\n\n    // _contentMap: WeakMap<Element, { content: Element; label: Element; name: Element; link: Element }>;\n\n    _hammer: HammerManager;\n\n    tl: gsap.core.Timeline | null;\n\n    constructor(container: Element, options: Partial<MainSliderOptions> = defaultOptions) {\n        this.navigateToNext = this.navigateToNext.bind(this);\n        this.navigateToPrev = this.navigateToPrev.bind(this);\n        this._onResize = this._onResize.bind(this);\n        this._onSwipe = this._onSwipe.bind(this);\n\n        this.options = { ...defaultOptions, ...options };\n        // this._dispatcher = createDispatcher();\n        this.isAnimating = false;\n        this.container = container;\n        this.slides = Array.from(container.querySelectorAll('.js-main-slide'));\n        this.total = this.slides.length;\n        this.slidesContainer = container.querySelector('.js-main-slides-container');\n        this.navigationContainer = container.querySelector('.js-main-slide-nav-container');\n        this.paginationContainer = container.querySelector('.js-main-slide-pagination-container');\n        this.images = Array.from(container.querySelectorAll('img.js-main-slide-img'));\n        this.activeIndex = 0;\n        this.nextIndex = this._getNextIndex();\n        this.prevSlideButton = null;\n        this.nextSlideButton = null;\n        this.paginationButtons = [];\n        this._paginationDelegation = null;\n        this._autoplayTimeout = null;\n        this.tl = null;\n\n        // this._contentMap = new WeakMap<Element, { content: Element; label: Element; name: Element; link: Element }>();\n        // this.slides.forEach((slide) => {\n        //     this._contentMap.set(slide, {\n        //         content: slide.querySelector('.js-main-slide-content')!,\n        //         label: slide.querySelector('.js-main-slide-label')!,\n        //         name: slide.querySelector('.js-main-slide-name')!,\n        //         link: slide.querySelector('.js-main-slide-link')!,\n        //     });\n        // });\n\n        // this._generateNavigation();\n        // this._generatePagination();\n\n        this._hammer = new Hammer(container as HTMLElement);\n        this._hammer.get('swipe').set({ direction: Hammer.DIRECTION_HORIZONTAL });\n        this._hammer.on('swipe', this._onSwipe);\n\n        this.slides[this.activeIndex].classList.add('is-active');\n        this.slides[this.nextIndex].classList.add('is-next');\n        // this.paginationButtons[this.activeIndex].classList.add('a-loader');\n\n        if (this.options.autoplay && !this.options.paused) {\n            this._autoplayTimeout = setTimeout(this.navigateToNext, this.options.delay);\n        }\n\n        window.addEventListener('resize', this._onResize);\n    }\n\n    on(eventName: string, fn: (data?: any) => void) {\n        // this._dispatcher.on(eventName, fn);\n    }\n\n    once(eventName: string, fn: (data?: any) => void) {\n        // this._dispatcher.once(eventName, fn);\n    }\n\n    off(eventName: string, fn: (data?: any) => void) {\n        // this._dispatcher.off(eventName, fn);\n    }\n\n    resume() {\n        this.options.paused = true;\n        this._autoplayTimeout = setTimeout(this.navigateToNext, this.options.delay);\n    }\n\n    navigateTo(index: number) {\n        console.log('adf');\n        if (this.activeIndex === index || this.isAnimating) return;\n\n        if (this._autoplayTimeout) {\n            clearTimeout(this._autoplayTimeout);\n        }\n\n        this.isAnimating = true;\n        // this._dispatcher.dispatch('change', { currentIndex: this.activeIndex, nextIndex: index });\n\n        // const activePaginationBtn = this.paginationButtons.find(\n        //     (btn) => this.paginationButtons.indexOf(btn) === this.activeIndex,\n        // );\n\n        // if (activePaginationBtn) {\n        //     activePaginationBtn.classList.remove('a-loader');\n        //     activePaginationBtn.classList.remove('is-active');\n        // }\n\n        // this.paginationButtons.find((btn) => this.paginationButtons.indexOf(btn) === index)?.classList.add('is-active');\n\n        const nextIndex = this._getNextIndex(this._getPrevIndex(index));\n        const nextAfterNextIndex = this._getNextIndex(nextIndex);\n\n        if (this.nextIndex !== nextIndex) {\n            this.slides[this.nextIndex].classList.remove('is-next');\n            this.slides[nextIndex].classList.add('is-next');\n            this.nextIndex = nextIndex;\n        }\n\n        // const currentContent = this._contentMap.get(this.slides[this.activeIndex]);\n        // const nextContent = this._contentMap.get(this.slides[index]);\n        // const nextAfterNextContent = this._contentMap.get(this.slides[nextAfterNextIndex]);\n        const duration = (this.options.duration / 1000) * 0.9;\n\n        // const cloneSlide = this.slides[nextAfterNextIndex].cloneNode(true) as Element;\n        // cloneSlide.classList.add('main-slide--clone');\n        // cloneSlide.classList.remove('is-active');\n        // cloneSlide.classList.remove('is-next');\n        // this.slidesContainer?.appendChild(cloneSlide);\n\n        this.tl = gsap.timeline({\n            defaults: { duration },\n            onComplete: () => {\n                // this.slidesContainer?.removeChild(cloneSlide);\n\n                // this.paginationButtons\n                //     .find((btn) => this.paginationButtons.indexOf(btn) === index)\n                //     ?.classList.add('a-loader');\n\n                this.slides[this.activeIndex].classList.remove('is-active');\n                this.slides[this.nextIndex].classList.remove('is-next');\n\n                this.activeIndex = index;\n                this.nextIndex = this._getNextIndex();\n\n                this.slides[this.activeIndex].classList.add('is-active');\n                this.slides[this.nextIndex].classList.add('is-next');\n\n                gsap.set(\n                    [\n                        this.slides[index],\n                        // currentContent!.link,\n                        // currentContent!.name,\n                        // currentContent!.label,\n                        // nextContent!.content,\n                        // nextContent!.name,\n                        // nextContent!.label,\n                        // nextContent!.link,\n                        // nextAfterNextContent!.name,\n                    ],\n                    { clearProps: 'all' },\n                );\n\n                this.isAnimating = false;\n                // this._dispatcher.dispatch('change-complete', {\n                //     currentIndex: this.activeIndex,\n                //     nextIndex: this.nextIndex,\n                // });\n\n                if (this.options.autoplay) {\n                    this._autoplayTimeout = setTimeout(this.navigateToNext, this.options.delay);\n                }\n            },\n        });\n\n        this.tl\n            .to(this.images[this.activeIndex], {\n                autoAlpha: 0,\n                ease: 'power4.inOut',\n            })\n            .fromTo(\n                this.images[nextIndex],\n                {\n                    autoAlpha: 0,\n                },\n                {\n                    x: 0,\n                    autoAlpha: 1,\n                    ease: 'expo.inOut',\n                },\n                `-=${duration}`,\n            )\n            .fromTo(\n                // this.slides[index],\n                nextContent!.content,\n                {\n                    x: 0,\n                },\n                {\n                    x: window.matchMedia('(max-width: 1024px)').matches ? '-100vw' : '-50vw',\n                    ease: 'power4.inOut',\n                },\n                `-=${duration - 0.05}`,\n            )\n            .to(\n                nextContent!.name,\n                {\n                    opacity: 1,\n                    ease: 'expo.inOut',\n                },\n                `-=${duration}`,\n            )\n            .fromTo(\n                nextContent!.label,\n                {\n                    x: '15vw',\n                    autoAlpha: 0,\n                },\n                {\n                    x: 0,\n                    autoAlpha: 1,\n                    ease: 'expo.inOut',\n                },\n                `-=${duration - 0.05}`,\n            )\n            .fromTo(\n                cloneSlide,\n                {\n                    x: '50vw',\n                },\n                {\n                    x: 0,\n                    ease: 'power4.inOut',\n                },\n                `-=${duration - 0.05}`,\n            );\n    }\n\n    navigateToPrev() {\n        this.navigateTo(this._getPrevIndex());\n    }\n\n    navigateToNext() {\n        this.navigateTo(this._getNextIndex());\n    }\n\n    destroy() {\n        if (this.tl) {\n            this.tl.kill();\n            this.tl = null;\n        }\n        this._hammer.destroy();\n        window.removeEventListener('resize', this._onResize);\n        this.prevSlideButton?.removeEventListener('click', this.navigateToPrev);\n        this.nextSlideButton?.removeEventListener('click', this.navigateToNext);\n        // this.slides.forEach((slide) => {\n        //     this._contentMap.delete(slide);\n        // });\n\n        if (this._paginationDelegation) {\n            this._paginationDelegation.destroy();\n        }\n\n        if (this._autoplayTimeout) {\n            clearTimeout(this._autoplayTimeout);\n        }\n    }\n\n    protected _onResize() {\n        //\n    }\n\n    protected _onSwipe(event: any) {\n        console.log('swipe');\n        if (event.deltaX < 0) {\n            this.navigateToNext();\n        } else {\n            this.navigateToPrev();\n        }\n    }\n\n    protected _generateNavigation() {\n        if (!this.navigationContainer) return;\n\n        const arrowTemplate = `\n            <svg width=\"16\" height=\"9\" viewBox=\"0 0 16 9\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M15.2 1.348a.59.59 0 00-.834-.832L8.08 6.802 2.014.516a.59.59 0 00-.833.832l6.9 7.01 7.118-7.01z\" fill=\"#fff\"/>\n            </svg>\n        `;\n        this.prevSlideButton = document.createElement('button');\n        this.prevSlideButton.className = 'main-slider-navigation-arrow main-slider-navigation-arrow--prev';\n        const prevSlideLabel = 'Предыдущий слайд';\n        this.prevSlideButton.setAttribute('aria-label', prevSlideLabel);\n        this.prevSlideButton.setAttribute('title', prevSlideLabel);\n        this.prevSlideButton.innerHTML = arrowTemplate;\n        this.prevSlideButton.addEventListener('click', this.navigateToPrev);\n\n        this.nextSlideButton = document.createElement('button');\n        this.nextSlideButton.className = 'main-slider-navigation-arrow main-slider-navigation-arrow--next';\n        const nextSlideLabel = 'Следующий слайд';\n        this.nextSlideButton.setAttribute('aria-label', nextSlideLabel);\n        this.nextSlideButton.setAttribute('title', nextSlideLabel);\n        this.nextSlideButton.innerHTML = arrowTemplate;\n        this.nextSlideButton.addEventListener('click', this.navigateToNext);\n\n        const fragment = document.createDocumentFragment();\n        fragment.appendChild(this.prevSlideButton);\n        fragment.appendChild(this.nextSlideButton);\n\n        this.navigationContainer.appendChild(fragment);\n    }\n\n    protected _generatePagination() {\n        if (!this.paginationContainer) return;\n\n        const loaderTemplate = `\n            <svg viewBox=\"0 0 37 37\" class=\"main-slider-pagination__loading-svg\" preserveAspectRatio=\"none\">\n                <circle class=\"main-slider-pagination__loading-path\" cx=\"19\" cy=\"19\" r=\"18.5\" style=\"--path-length:115.49px;\"></circle>\n            </svg>\n        `;\n\n        this.paginationButtons = [];\n        const ul = document.createElement('ul');\n        ul.className = 'list-unstyled main-slider-pagination-list';\n\n        for (let i = 0; i < this.total; i++) {\n            const li = document.createElement('li');\n            li.className = 'main-slider-pagination-list__item';\n            ul.appendChild(li);\n            const button = document.createElement('button');\n            button.className = 'main-slider-pagination-btn js-main-slider-pagination-btn';\n            const buttonLabel = `Перейти на слайд ${i + 1}`;\n            button.setAttribute('aria-label', buttonLabel);\n            button.setAttribute('title', buttonLabel);\n            button.setAttribute('data-slide-index', `${i}`);\n            if (this.activeIndex === i) {\n                button.classList.add('is-active');\n            }\n            this.paginationButtons.push(button);\n            li.appendChild(button);\n            button.innerHTML += loaderTemplate;\n        }\n\n        this.paginationContainer.appendChild(ul);\n\n        this._paginationDelegation = delegate(\n            this.paginationContainer,\n            '.js-main-slider-pagination-btn',\n            'click',\n            (event: any) => {\n                this.navigateTo(parseInt(event.delegateTarget.dataset.slideIndex, 10));\n            },\n        );\n    }\n\n    protected _getPrevIndex(index = this.activeIndex) {\n        return (index - 1 + this.total) % this.total;\n    }\n\n    protected _getNextIndex(index = this.activeIndex) {\n        return (index + 1) % this.total;\n    }\n}\n","import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { baseExperiment } from '../base';\n\nexport const createParticlesBasic = baseExperiment('particles-basic', ({ canvas, sizes, onRender, gui }) => {\n    let rAF: number;\n    const renderer = new THREE.WebGLRenderer({ canvas });\n    renderer.outputEncoding = THREE.sRGBEncoding;\n    renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n    renderer.setSize(sizes.width, sizes.height);\n\n    const camera = new THREE.PerspectiveCamera(45, sizes.width / sizes.height, 0.1, 1000);\n    camera.position.z = 3;\n\n    const scene = new THREE.Scene();\n    const textureLoader = new THREE.TextureLoader();\n\n    const particleTexture = textureLoader.load(`${PUBLIC_PATH}img/particles/8.png`);\n\n    const particlesGeometry = new THREE.BufferGeometry();\n    const particlesCount = 20000;\n    const positions = new Float32Array(particlesCount * 3);\n\n    for (let i = 0; i < particlesCount * 3; i++) {\n        positions[i] = (Math.random() - 0.5) * 4;\n    }\n\n    particlesGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n\n    const sphere = new THREE.Points(\n        particlesGeometry,\n        new THREE.PointsMaterial({\n            color: 0xffffff,\n            map: particleTexture,\n            size: 0.05,\n            sizeAttenuation: true,\n            depthWrite: false,\n            blending: THREE.AdditiveBlending,\n        }),\n    );\n    scene.add(sphere);\n\n    const controls = new OrbitControls(camera, canvas);\n    controls.enableDamping = true;\n\n    function render() {\n        onRender();\n        controls.update();\n        renderer.render(scene, camera);\n    }\n\n    function animate() {\n        render();\n        rAF = requestAnimationFrame(animate);\n    }\n\n    function destroy() {\n        cancelAnimationFrame(rAF);\n        renderer.dispose();\n    }\n\n    animate();\n\n    window.addEventListener('resize', () => {\n        camera.aspect = sizes.width / sizes.height;\n        camera.updateProjectionMatrix();\n        renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n        renderer.setSize(sizes.width, sizes.height);\n    });\n\n    module.hot?.addDisposeHandler(destroy);\n});\n","import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { baseExperiment } from '../../base';\nimport vertexShader from './shaders/vertex.glsl';\nimport fragmentShader from './shaders/fragment.glsl';\nimport { disposeMesh } from '../../../utils';\nimport texture from './russia.png';\n\nexport const createParticlesPathTrailing = baseExperiment(\n    'particles-path-trailing',\n    ({ canvas, sizes, onRender, gui }) => {\n        let rAF: number;\n        const renderer = new THREE.WebGLRenderer({ canvas });\n        renderer.outputEncoding = THREE.sRGBEncoding;\n        renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n        renderer.setSize(sizes.width, sizes.height);\n\n        const camera = new THREE.PerspectiveCamera(45, sizes.width / sizes.height, 0.1, 100);\n        camera.position.z = 10;\n\n        const scene = new THREE.Scene();\n        // const clock = new THREE.Clock();\n\n        const svg = document.querySelector<SVGElement>('svg.js-russia-svg');\n\n        if (!svg) {\n            throw new Error('svg not found');\n        }\n\n        const svgBBox = svg.getBBox();\n        svg.style.display = 'none';\n        const svgTexture = new THREE.TextureLoader().load(texture);\n\n        const params = {\n            mapColor: 0x7071a,\n            // particlesColor: 0x040a14,\n            particlesColor: 0x110800,\n            // pointsAmountFactor: 0.4,\n            pointsAmountFactor: 0.9,\n            // maxPointsToRender: 50,\n            maxPointsToRender: 200,\n            // pointsToRenderFactor: 0.2,\n            pointsToRenderFactor: 0.5,\n            particlesSpeed: 1,\n            // opacityFactor: 0.2,\n            opacityFactor: 0.3,\n            // particleSize: 30,\n            particleSize: 20,\n        };\n        gui?.add(params, 'particlesSpeed').min(0).max(10).step(1);\n        gui?.add(params, 'opacityFactor').min(0).max(1).step(0.001);\n\n        let pathsData: any[] = [];\n        let maxPoints = 0;\n        let positions: Float32Array | null;\n        let opacity: Float32Array | null;\n\n        const particlesGeometry = new THREE.BufferGeometry();\n\n        function initScene() {\n            pathsData = Array.from(svg!.querySelectorAll<SVGPathElement>('.land')).map((path) => {\n                const pathLength = path.getTotalLength();\n                const pointsAmount = Math.floor(pathLength * params.pointsAmountFactor);\n                const points: THREE.Vector3[] = [];\n\n                for (let i = 0; i < pointsAmount; i++) {\n                    const pointAt = (pathLength / pointsAmount) * i;\n                    const point = path.getPointAtLength(pointAt);\n                    const normalizedPoint = {\n                        x: (point.x - svgBBox.width / 2) * 0.01 + Math.random() * 0.02,\n                        y: (point.y - svgBBox.height / 2) * 0.01 + Math.random() * 0.02,\n                        z: 0,\n                    };\n                    points.push(new THREE.Vector3(normalizedPoint.x, normalizedPoint.y, normalizedPoint.z));\n                }\n\n                return {\n                    length: pathLength,\n                    points,\n                    pointsToRender: Math.min(\n                        params.maxPointsToRender,\n                        Math.floor(pointsAmount * params.pointsToRenderFactor),\n                    ),\n                    currentPosition: 0,\n                };\n            });\n            maxPoints = pathsData.reduce((acc, pathData) => acc + pathData.pointsToRender, 0);\n\n            positions = new Float32Array(maxPoints * 3);\n            opacity = new Float32Array(maxPoints);\n\n            for (let i = 0; i < maxPoints * 3; i++) {\n                positions[i] = 0;\n            }\n\n            for (let i = 0; i < maxPoints; i++) {\n                opacity[i] = Math.random() * params.opacityFactor;\n            }\n\n            particlesGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n            particlesGeometry.setAttribute('opacity', new THREE.BufferAttribute(opacity, 1));\n        }\n\n        initScene();\n        gui?.add(params, 'pointsToRenderFactor').min(0).max(1).step(0.01).onFinishChange(initScene);\n        gui?.add(params, 'pointsAmountFactor').min(0).max(3).step(0.01).onFinishChange(initScene);\n        gui?.add(params, 'maxPointsToRender').min(0).max(500).step(1).onFinishChange(initScene);\n\n        const particlesMaterial = new THREE.ShaderMaterial({\n            uniforms: {\n                uParticleSize: { value: params.particleSize * renderer.getPixelRatio() },\n                uTime: { value: 0 },\n                uColor: { value: new THREE.Color(params.particlesColor) },\n            },\n            vertexShader,\n            fragmentShader,\n            transparent: true,\n            depthWrite: false,\n            blending: THREE.AdditiveBlending,\n        });\n        gui?.addColor(params, 'particlesColor').onChange(() => {\n            particlesMaterial.uniforms.uColor.value = new THREE.Color(params.particlesColor);\n        });\n        gui?.add(params, 'particleSize')\n            .min(0)\n            .max(100)\n            .step(0.01)\n            .onChange(() => {\n                particlesMaterial.uniforms.uParticleSize.value = params.particleSize;\n            });\n\n        const particles = new THREE.Points(particlesGeometry, particlesMaterial);\n        particles.position.y = 0.33;\n        scene.add(particles);\n\n        const plane = new THREE.Mesh(\n            new THREE.PlaneBufferGeometry(svgBBox.width * 0.01, svgBBox.height * 0.01, 1, 1),\n            new THREE.MeshBasicMaterial({\n                color: params.mapColor,\n                map: svgTexture,\n            }),\n        );\n        scene.add(plane);\n        gui?.addColor(params, 'mapColor').onChange(() => {\n            plane.material.color = new THREE.Color(params.mapColor);\n        });\n\n        const dummyMat4 = new THREE.Matrix4();\n\n        const controls = new OrbitControls(camera, canvas);\n        controls.enableDamping = true;\n\n        function render() {\n            // const elapsedTime = clock.getElapsedTime();\n\n            onRender();\n            // particlesMaterial.uniforms.uTime.value = elapsedTime;\n            let k = 0;\n\n            for (let i = 0; i < pathsData.length; i++) {\n                pathsData[i].currentPosition =\n                    (pathsData[i].currentPosition + params.particlesSpeed) % pathsData[i].points.length;\n\n                for (let j = 0; j < pathsData[i].pointsToRender; j++) {\n                    const point = pathsData[i].points[(j + pathsData[i].currentPosition) % pathsData[i].points.length];\n                    positions?.set([point.x, point.y, point.z], k * 3);\n\n                    if (opacity) {\n                        opacity[k] = j / (pathsData[i].pointsToRender / params.opacityFactor);\n                    }\n\n                    k++;\n                }\n            }\n\n            particlesGeometry.attributes.position.array = positions;\n            particlesGeometry.applyMatrix4(dummyMat4.makeScale(1, -1, 1));\n            particlesGeometry.attributes.opacity.array = opacity;\n            particlesGeometry.attributes.position.needsUpdate = true;\n            particlesGeometry.attributes.opacity.needsUpdate = true;\n\n            controls.update();\n            renderer.render(scene, camera);\n        }\n\n        function animate() {\n            render();\n            rAF = requestAnimationFrame(animate);\n        }\n\n        function destroy() {\n            if (svg) {\n                svg.style.display = 'block';\n            }\n\n            cancelAnimationFrame(rAF);\n            scene.remove(particles);\n            disposeMesh(particles);\n            renderer.dispose();\n            gui.destroy();\n        }\n\n        animate();\n\n        window.addEventListener('resize', () => {\n            camera.aspect = sizes.width / sizes.height;\n            camera.updateProjectionMatrix();\n            renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n            renderer.setSize(sizes.width, sizes.height);\n        });\n\n        module.hot?.addDisposeHandler(destroy);\n    },\n);\n","export default \"#define GLSLIFY 1\\nuniform float uParticleSize;\\n\\nattribute float opacity;\\n\\nvarying float vOpacity;\\n\\nvoid main() {\\n    vOpacity = opacity;\\n\\n    vec4 mvPosition = modelViewMatrix * vec4(position, 1.);\\n\\n    gl_PointSize = uParticleSize * (-1. / mvPosition.z);\\n    gl_Position = projectionMatrix * mvPosition;\\n}\";","export default \"#define GLSLIFY 1\\nuniform vec3 uColor;\\n\\nvarying float vOpacity;\\n\\nvoid main() {\\n    vec2 uv = vec2(gl_PointCoord.x, 1. - gl_PointCoord.y);\\n    vec2 centerUv = uv - 0.5;\\n\\n    vec4 color = vec4(0.08 / length(centerUv));\\n    color.rgb = min(vec3(10.), color.rgb);\\n    color.rgb *= uColor * 100.;\\n    color *= vOpacity;\\n    color.a = min(1., color.a);\\n\\n    gl_FragColor = vec4(color.rgb, 1.);\\n}\";"],"sourceRoot":""}